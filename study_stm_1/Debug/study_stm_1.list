
study_stm_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e4c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004fe4  08004fe4  00005fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005014  08005014  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005014  08005014  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005014  08005014  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800501c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00000908  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000918  20000918  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d258  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f60  00000000  00000000  00014298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  000161f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009de  00000000  00000000  00016eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212b6  00000000  00000000  00017896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104c4  00000000  00000000  00038b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfb22  00000000  00000000  00049010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118b32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036c0  00000000  00000000  00118b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0011c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004fcc 	.word	0x08004fcc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004fcc 	.word	0x08004fcc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <raiseToPow>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//возведение в степень
double raiseToPow(double x, int power)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a5e:	6078      	str	r0, [r7, #4]
    double result;
    result = 1.0;
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <raiseToPow+0x54>)
 8000a66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (byte i = 1; i <= power;i++)
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
 8000a6e:	e00c      	b.n	8000a8a <raiseToPow+0x36>
    {
        result*=x;
 8000a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000a78:	f7ff fd6a 	bl	8000550 <__aeabi_dmul>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	460b      	mov	r3, r1
 8000a80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (byte i = 1; i <= power;i++)
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	3301      	adds	r3, #1
 8000a88:	75fb      	strb	r3, [r7, #23]
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	daee      	bge.n	8000a70 <raiseToPow+0x1c>
    }
    return(result);
 8000a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a96:	ec43 2b17 	vmov	d7, r2, r3
}
 8000a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8000a9e:	eef0 0a67 	vmov.f32	s1, s15
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	3ff00000 	.word	0x3ff00000
 8000aac:	00000000 	.word	0x00000000

08000ab0 <sin>:

//вычисление синуса
double sin(double x){
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0b00 	vstr	d0, [r7]
	float res = x - raiseToPow(x, 3) / 6 + raiseToPow(x, 5) / 120 - raiseToPow(x, 7) / 5040;
 8000aba:	2003      	movs	r0, #3
 8000abc:	ed97 0b00 	vldr	d0, [r7]
 8000ac0:	f7ff ffc8 	bl	8000a54 <raiseToPow>
 8000ac4:	ec51 0b10 	vmov	r0, r1, d0
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <sin+0xc0>)
 8000ace:	f7ff fe69 	bl	80007a4 <__aeabi_ddiv>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ada:	f7ff fb81 	bl	80001e0 <__aeabi_dsub>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4614      	mov	r4, r2
 8000ae4:	461d      	mov	r5, r3
 8000ae6:	2005      	movs	r0, #5
 8000ae8:	ed97 0b00 	vldr	d0, [r7]
 8000aec:	f7ff ffb2 	bl	8000a54 <raiseToPow>
 8000af0:	ec51 0b10 	vmov	r0, r1, d0
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <sin+0xc4>)
 8000afa:	f7ff fe53 	bl	80007a4 <__aeabi_ddiv>
 8000afe:	4602      	mov	r2, r0
 8000b00:	460b      	mov	r3, r1
 8000b02:	4620      	mov	r0, r4
 8000b04:	4629      	mov	r1, r5
 8000b06:	f7ff fb6d 	bl	80001e4 <__adddf3>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	4614      	mov	r4, r2
 8000b10:	461d      	mov	r5, r3
 8000b12:	2007      	movs	r0, #7
 8000b14:	ed97 0b00 	vldr	d0, [r7]
 8000b18:	f7ff ff9c 	bl	8000a54 <raiseToPow>
 8000b1c:	ec51 0b10 	vmov	r0, r1, d0
 8000b20:	a311      	add	r3, pc, #68	@ (adr r3, 8000b68 <sin+0xb8>)
 8000b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b26:	f7ff fe3d 	bl	80007a4 <__aeabi_ddiv>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	4620      	mov	r0, r4
 8000b30:	4629      	mov	r1, r5
 8000b32:	f7ff fb55 	bl	80001e0 <__aeabi_dsub>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f7ff ff39 	bl	80009b4 <__aeabi_d2f>
 8000b42:	4603      	mov	r3, r0
 8000b44:	60fb      	str	r3, [r7, #12]
	return res;
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff fcaa 	bl	80004a0 <__aeabi_f2d>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	460b      	mov	r3, r1
 8000b50:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b54:	eeb0 0a47 	vmov.f32	s0, s14
 8000b58:	eef0 0a67 	vmov.f32	s1, s15
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bdb0      	pop	{r4, r5, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	f3af 8000 	nop.w
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40b3b000 	.word	0x40b3b000
 8000b70:	40180000 	.word	0x40180000
 8000b74:	405e0000 	.word	0x405e0000

08000b78 <HAL_TIM_PeriodElapsedCallback>:
	}
	all_setup++;
	return 0;
}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b8a:	d104      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x1e>
		zeta++;
 8000b8c:	4b55      	ldr	r3, [pc, #340]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a54      	ldr	r2, [pc, #336]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000b94:	6013      	str	r3, [r2, #0]
	}
	if (htim->Instance == TIM1){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a53      	ldr	r2, [pc, #332]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	f040 809b 	bne.w	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x160>
		if (all % times == 0){
 8000ba2:	4b52      	ldr	r3, [pc, #328]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a52      	ldr	r2, [pc, #328]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bae:	fb01 f202 	mul.w	r2, r1, r2
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 808a 	bne.w	8000cce <HAL_TIM_PeriodElapsedCallback+0x156>
			switch(method){
 8000bba:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d073      	beq.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x132>
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	dc78      	bgt.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d04b      	beq.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0xee>
 8000bce:	e073      	b.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x140>
				//синус
				case 0:
					if (inc == 120) inc = 0;	//проверка, что прошел полный оборот
 8000bd0:	4b49      	ldr	r3, [pc, #292]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b78      	cmp	r3, #120	@ 0x78
 8000bd6:	d102      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x66>
 8000bd8:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
					double x = (inc * pi) / 60;
 8000bde:	4b46      	ldr	r3, [pc, #280]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bea:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000cfc <HAL_TIM_PeriodElapsedCallback+0x184>
 8000bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf2:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000d00 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000bf6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000bfa:	ee16 0a90 	vmov	r0, s13
 8000bfe:	f7ff fc4f 	bl	80004a0 <__aeabi_f2d>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	e9c7 2302 	strd	r2, r3, [r7, #8]
					dac_value = amplitude + (amplitude * sin(x)) / 1;
 8000c0a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fc34 	bl	800047c <__aeabi_i2d>
 8000c14:	4604      	mov	r4, r0
 8000c16:	460d      	mov	r5, r1
 8000c18:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fc2d 	bl	800047c <__aeabi_i2d>
 8000c22:	4680      	mov	r8, r0
 8000c24:	4689      	mov	r9, r1
 8000c26:	ed97 0b02 	vldr	d0, [r7, #8]
 8000c2a:	f7ff ff41 	bl	8000ab0 <sin>
 8000c2e:	ec53 2b10 	vmov	r2, r3, d0
 8000c32:	4640      	mov	r0, r8
 8000c34:	4649      	mov	r1, r9
 8000c36:	f7ff fc8b 	bl	8000550 <__aeabi_dmul>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4620      	mov	r0, r4
 8000c40:	4629      	mov	r1, r5
 8000c42:	f7ff facf 	bl	80001e4 <__adddf3>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f7ff fe91 	bl	8000974 <__aeabi_d2uiz>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a2b      	ldr	r2, [pc, #172]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c56:	6013      	str	r3, [r2, #0]
					inc++;
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c62:	701a      	strb	r2, [r3, #0]
					break;
 8000c64:	e028      	b.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x140>
				//меандр
				case 1:
					if (all % sq == 0){	//прореживание для совпадения периодов синусоиды и меандра
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a27      	ldr	r2, [pc, #156]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c72:	fb01 f202 	mul.w	r2, r1, r2
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11c      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x13e>
						if (n == 0){
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d107      	bne.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x11c>
							dac_value = 3000;//amplitude;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c86:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c8a:	601a      	str	r2, [r3, #0]
							n = 1;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
						else if (n == 1){
							dac_value = 0;
							n = 0;
						}
					}
					break;
 8000c92:	e010      	b.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x13e>
						else if (n == 1){
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10c      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x13e>
							dac_value = 0;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
							n = 0;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
					break;
 8000ca8:	e005      	b.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x13e>
				//постоянка
				case 2:
					dac_value = amplitude;
 8000caa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000cb2:	601a      	str	r2, [r3, #0]
					break;
 8000cb4:	e000      	b.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x140>
					break;
 8000cb6:	bf00      	nop
			}
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000cbc:	f001 fe74 	bl	80029a8 <HAL_DAC_Start>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000cc0:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000cca:	f001 fe48 	bl	800295e <HAL_DAC_SetValue>
		}
		all++; //счетчик для прореживания
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000cd6:	6013      	str	r3, [r2, #0]

	}
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000910 	.word	0x20000910
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	2000012c 	.word	0x2000012c
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000905 	.word	0x20000905
 8000cf8:	20000128 	.word	0x20000128
 8000cfc:	40490ff9 	.word	0x40490ff9
 8000d00:	42700000 	.word	0x42700000
 8000d04:	20000130 	.word	0x20000130
 8000d08:	20000001 	.word	0x20000001
 8000d0c:	20000904 	.word	0x20000904
 8000d10:	2000007c 	.word	0x2000007c

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f000 fb9e 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f844 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 f9e2 	bl	80010e8 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000d24:	f000 f914 	bl	8000f50 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000d28:	f000 f8a2 	bl	8000e70 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d2c:	f000 f98e 	bl	800104c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000d30:	f000 f938 	bl	8000fa4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d34:	4816      	ldr	r0, [pc, #88]	@ (8000d90 <main+0x7c>)
 8000d36:	f003 fccb 	bl	80046d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000d3a:	4816      	ldr	r0, [pc, #88]	@ (8000d94 <main+0x80>)
 8000d3c:	f003 fcc8 	bl	80046d0 <HAL_TIM_Base_Start_IT>
	  if (amplitude > 0 && amplitude <= 1000) end_transmit = 1;
	  else if (amplitude > 1000 && amplitude <= 2000) end_transmit = 2;
	  else if (amplitude > 2000 && amplitude <= 3000) end_transmit = 3;
	  else if (amplitude > 3000 && amplitude <= 4000) end_transmit = 4;
	  HAL_Delay(10);*/
	  HAL_ADC_Start(&hadc1);
 8000d40:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <main+0x84>)
 8000d42:	f000 fe0d 	bl	8001960 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d46:	2164      	movs	r1, #100	@ 0x64
 8000d48:	4813      	ldr	r0, [pc, #76]	@ (8000d98 <main+0x84>)
 8000d4a:	f000 ff1f 	bl	8001b8c <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000d4e:	4812      	ldr	r0, [pc, #72]	@ (8000d98 <main+0x84>)
 8000d50:	f001 f81e 	bl	8001d90 <HAL_ADC_GetValue>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a11      	ldr	r2, [pc, #68]	@ (8000d9c <main+0x88>)
 8000d58:	6013      	str	r3, [r2, #0]
	  adc_array[i] = adc_value;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <main+0x88>)
 8000d5c:	6819      	ldr	r1, [r3, #0]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <main+0x8c>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	b209      	sxth	r1, r1
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <main+0x90>)
 8000d68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  i++;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <main+0x8c>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <main+0x8c>)
 8000d76:	801a      	strh	r2, [r3, #0]
	  if (i == 1000)i = 0;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <main+0x8c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d80:	d102      	bne.n	8000d88 <main+0x74>
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <main+0x8c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(10);
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f000 fbcb 	bl	8001524 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000d8e:	e7d7      	b.n	8000d40 <main+0x2c>
 8000d90:	200000dc 	.word	0x200000dc
 8000d94:	20000090 	.word	0x20000090
 8000d98:	2000002c 	.word	0x2000002c
 8000d9c:	20000908 	.word	0x20000908
 8000da0:	2000090c 	.word	0x2000090c
 8000da4:	20000134 	.word	0x20000134

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0a6      	sub	sp, #152	@ 0x98
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000db2:	2228      	movs	r2, #40	@ 0x28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 f8dc 	bl	8004f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2258      	movs	r2, #88	@ 0x58
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f8ce 	bl	8004f74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2310      	movs	r3, #16
 8000de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 f809 	bl	8002e1c <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000e10:	f000 f9be 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 f818 	bl	8003e64 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e3a:	f000 f9a9 	bl	8001190 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <SystemClock_Config+0xc4>)
 8000e40:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV2;
 8000e42:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f9c8 	bl	80041e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e5e:	f000 f997 	bl	8001190 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3798      	adds	r7, #152	@ 0x98
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	00101080 	.word	0x00101080

08000e70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e92:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000e94:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea6:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eac:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eba:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eec:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000eee:	f000 fb3d 	bl	800156c <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 f94a 	bl	8001190 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000f08:	f001 fa3a 	bl	8002380 <HAL_ADCEx_MultiModeConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f12:	f000 f93d 	bl	8001190 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f22:	2304      	movs	r3, #4
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_ADC1_Init+0xdc>)
 8000f34:	f000 ff3a 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f3e:	f000 f927 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000002c 	.word	0x2000002c

08000f50 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_DAC1_Init+0x4c>)
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <MX_DAC1_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_DAC1_Init+0x4c>)
 8000f68:	f001 fcd7 	bl	800291a <HAL_DAC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000f72:	f000 f90d 	bl	8001190 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <MX_DAC1_Init+0x4c>)
 8000f86:	f001 fd5a 	bl	8002a3e <HAL_DAC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000f90:	f000 f8fe 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000007c 	.word	0x2000007c
 8000fa0:	40007400 	.word	0x40007400

08000fa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000fc4:	4a20      	ldr	r2, [pc, #128]	@ (8001048 <MX_TIM1_Init+0xa4>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000fca:	2223      	movs	r2, #35	@ 0x23
 8000fcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000fd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fee:	4815      	ldr	r0, [pc, #84]	@ (8001044 <MX_TIM1_Init+0xa0>)
 8000ff0:	f003 fb16 	bl	8004620 <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ffa:	f000 f8c9 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	480e      	ldr	r0, [pc, #56]	@ (8001044 <MX_TIM1_Init+0xa0>)
 800100c:	f003 fcd2 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001016:	f000 f8bb 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	@ (8001044 <MX_TIM1_Init+0xa0>)
 800102c:	f003 fef8 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001036:	f000 f8ab 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000090 	.word	0x20000090
 8001048:	40012c00 	.word	0x40012c00

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_TIM2_Init+0x98>)
 800106c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001070:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_TIM2_Init+0x98>)
 8001074:	2248      	movs	r2, #72	@ 0x48
 8001076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_TIM2_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_TIM2_Init+0x98>)
 8001080:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_TIM2_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_TIM2_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001092:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <MX_TIM2_Init+0x98>)
 8001094:	f003 fac4 	bl	8004620 <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800109e:	f000 f877 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_TIM2_Init+0x98>)
 80010b0:	f003 fc80 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010ba:	f000 f869 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <MX_TIM2_Init+0x98>)
 80010cc:	f003 fea8 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010d6:	f000 f85b 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000dc 	.word	0x200000dc

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_GPIO_Init+0xa0>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <MX_GPIO_Init+0xa0>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_GPIO_Init+0xa0>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_GPIO_Init+0xa0>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <MX_GPIO_Init+0xa0>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_GPIO_Init+0xa0>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	21e4      	movs	r1, #228	@ 0xe4
 8001132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001136:	f001 fe59 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	4813      	ldr	r0, [pc, #76]	@ (800118c <MX_GPIO_Init+0xa4>)
 8001140:	f001 fe54 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001144:	23e4      	movs	r3, #228	@ 0xe4
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115e:	f001 fcbb 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001162:	2340      	movs	r3, #64	@ 0x40
 8001164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4619      	mov	r1, r3
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_GPIO_Init+0xa4>)
 800117a:	f001 fcad 	bl	8002ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <Error_Handler+0x8>

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_MspInit+0x44>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <HAL_MspInit+0x44>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_MspInit+0x44>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_MspInit+0x44>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <HAL_MspInit+0x44>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_MspInit+0x44>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001204:	d124      	bne.n	8001250 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <HAL_ADC_MspInit+0x74>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <HAL_ADC_MspInit+0x74>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_ADC_MspInit+0x74>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_ADC_MspInit+0x74>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <HAL_ADC_MspInit+0x74>)
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <HAL_ADC_MspInit+0x74>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f001 fc44 	bl	8002ad8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	@ 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <HAL_DAC_MspInit+0x74>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d124      	bne.n	80012c8 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 8001284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ae:	2310      	movs	r3, #16
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c4:	f001 fc08 	bl	8002ad8 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40007400 	.word	0x40007400
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001350 <HAL_TIM_Base_MspInit+0x78>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d114      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_TIM_Base_MspInit+0x7c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <HAL_TIM_Base_MspInit+0x7c>)
 80012f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012f4:	6193      	str	r3, [r2, #24]
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <HAL_TIM_Base_MspInit+0x7c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2019      	movs	r0, #25
 8001308:	f001 fad1 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800130c:	2019      	movs	r0, #25
 800130e:	f001 faea 	bl	80028e6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001312:	e018      	b.n	8001346 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131c:	d113      	bne.n	8001346 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_TIM_Base_MspInit+0x7c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0c      	ldr	r2, [pc, #48]	@ (8001354 <HAL_TIM_Base_MspInit+0x7c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_TIM_Base_MspInit+0x7c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201c      	movs	r0, #28
 800133c:	f001 fab7 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001340:	201c      	movs	r0, #28
 8001342:	f001 fad0 	bl	80028e6 <HAL_NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40012c00 	.word	0x40012c00
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <NMI_Handler+0x4>

08001360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <MemManage_Handler+0x4>

08001370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <UsageFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ae:	f000 f899 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013be:	f003 f9f7 	bl	80047b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000090 	.word	0x20000090

080013cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <TIM2_IRQHandler+0x10>)
 80013d2:	f003 f9ed 	bl	80047b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000dc 	.word	0x200000dc

080013e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800143c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001408:	f7ff ffea 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <LoopForever+0x6>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	@ (8001444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <LoopForever+0xe>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	@ (8001450 <LoopForever+0x16>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f003 fda7 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001436:	f7ff fc6d 	bl	8000d14 <main>

0800143a <LoopForever>:

LoopForever:
    b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800143c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001448:	0800501c 	.word	0x0800501c
  ldr r2, =_sbss
 800144c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001450:	20000918 	.word	0x20000918

08001454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_2_IRQHandler>
	...

08001458 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_Init+0x28>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <HAL_Init+0x28>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f001 fa15 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146e:	200f      	movs	r0, #15
 8001470:	f000 f808 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001474:	f7ff fe92 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000

08001484 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fa2d 	bl	8002902 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f001 f9f5 	bl	80028ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000004 	.word	0x20000004
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	20000008 	.word	0x20000008

080014e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000914 	.word	0x20000914

0800150c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000914 	.word	0x20000914

08001524 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c

0800156c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b09a      	sub	sp, #104	@ 0x68
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e1e3      	b.n	8001954 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	d176      	bne.n	800168c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d152      	bne.n	800164c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fe0f 	bl	80011e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13b      	bne.n	800164c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 f829 	bl	800262c <ADC_Disable>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d12f      	bne.n	800164c <HAL_ADC_Init+0xe0>
 80015ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d12b      	bne.n	800164c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015fc:	f023 0302 	bic.w	r3, r3, #2
 8001600:	f043 0202 	orr.w	r2, r3, #2
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001616:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001626:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001628:	4b92      	ldr	r3, [pc, #584]	@ (8001874 <HAL_ADC_Init+0x308>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a92      	ldr	r2, [pc, #584]	@ (8001878 <HAL_ADC_Init+0x30c>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0c9a      	lsrs	r2, r3, #18
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163e:	e002      	b.n	8001646 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	3b01      	subs	r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f9      	bne.n	8001640 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001668:	d110      	bne.n	800168c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f023 0312 	bic.w	r3, r3, #18
 8001672:	f043 0210 	orr.w	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 8150 	bne.w	800193a <HAL_ADC_Init+0x3ce>
 800169a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 814b 	bne.w	800193a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 8143 	bne.w	800193a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016bc:	f043 0202 	orr.w	r2, r3, #2
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_Init+0x16c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6a      	ldr	r2, [pc, #424]	@ (800187c <HAL_ADC_Init+0x310>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_ADC_Init+0x170>
 80016d8:	4b69      	ldr	r3, [pc, #420]	@ (8001880 <HAL_ADC_Init+0x314>)
 80016da:	e000      	b.n	80016de <HAL_ADC_Init+0x172>
 80016dc:	4b69      	ldr	r3, [pc, #420]	@ (8001884 <HAL_ADC_Init+0x318>)
 80016de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016e8:	d102      	bne.n	80016f0 <HAL_ADC_Init+0x184>
 80016ea:	4b64      	ldr	r3, [pc, #400]	@ (800187c <HAL_ADC_Init+0x310>)
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e01a      	b.n	8001726 <HAL_ADC_Init+0x1ba>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a61      	ldr	r2, [pc, #388]	@ (800187c <HAL_ADC_Init+0x310>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d103      	bne.n	8001702 <HAL_ADC_Init+0x196>
 80016fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e011      	b.n	8001726 <HAL_ADC_Init+0x1ba>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a60      	ldr	r2, [pc, #384]	@ (8001888 <HAL_ADC_Init+0x31c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d102      	bne.n	8001712 <HAL_ADC_Init+0x1a6>
 800170c:	4b5f      	ldr	r3, [pc, #380]	@ (800188c <HAL_ADC_Init+0x320>)
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e009      	b.n	8001726 <HAL_ADC_Init+0x1ba>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5d      	ldr	r2, [pc, #372]	@ (800188c <HAL_ADC_Init+0x320>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <HAL_ADC_Init+0x1b6>
 800171c:	4b5a      	ldr	r3, [pc, #360]	@ (8001888 <HAL_ADC_Init+0x31c>)
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e001      	b.n	8001726 <HAL_ADC_Init+0x1ba>
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_ADC_Init+0x1da>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_ADC_Init+0x1da>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_ADC_Init+0x1dc>
 8001746:	2300      	movs	r3, #0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d11c      	bne.n	8001786 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800174c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800174e:	2b00      	cmp	r3, #0
 8001750:	d010      	beq.n	8001774 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_ADC_Init+0x202>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADC_Init+0x202>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_ADC_Init+0x204>
 800176e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001770:	2b00      	cmp	r3, #0
 8001772:	d108      	bne.n	8001786 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	431a      	orrs	r2, r3
 8001782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001784:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7e5b      	ldrb	r3, [r3, #25]
 800178a:	035b      	lsls	r3, r3, #13
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001790:	2a01      	cmp	r2, #1
 8001792:	d002      	beq.n	800179a <HAL_ADC_Init+0x22e>
 8001794:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001798:	e000      	b.n	800179c <HAL_ADC_Init+0x230>
 800179a:	2200      	movs	r2, #0
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017ac:	4313      	orrs	r3, r2
 80017ae:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d11b      	bne.n	80017f2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e5b      	ldrb	r3, [r3, #25]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	3b01      	subs	r3, #1
 80017c8:	045a      	lsls	r2, r3, #17
 80017ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017cc:	4313      	orrs	r3, r2
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017d4:	e00d      	b.n	80017f2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80017de:	f043 0220 	orr.w	r2, r3, #32
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d054      	beq.n	80018a4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a22      	ldr	r2, [pc, #136]	@ (8001888 <HAL_ADC_Init+0x31c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d004      	beq.n	800180e <HAL_ADC_Init+0x2a2>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a20      	ldr	r2, [pc, #128]	@ (800188c <HAL_ADC_Init+0x320>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d140      	bne.n	8001890 <HAL_ADC_Init+0x324>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001816:	d02a      	beq.n	800186e <HAL_ADC_Init+0x302>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001820:	d022      	beq.n	8001868 <HAL_ADC_Init+0x2fc>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800182a:	d01a      	beq.n	8001862 <HAL_ADC_Init+0x2f6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001834:	d012      	beq.n	800185c <HAL_ADC_Init+0x2f0>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800183e:	d00a      	beq.n	8001856 <HAL_ADC_Init+0x2ea>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001848:	d002      	beq.n	8001850 <HAL_ADC_Init+0x2e4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	e023      	b.n	8001898 <HAL_ADC_Init+0x32c>
 8001850:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001854:	e020      	b.n	8001898 <HAL_ADC_Init+0x32c>
 8001856:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800185a:	e01d      	b.n	8001898 <HAL_ADC_Init+0x32c>
 800185c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001860:	e01a      	b.n	8001898 <HAL_ADC_Init+0x32c>
 8001862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001866:	e017      	b.n	8001898 <HAL_ADC_Init+0x32c>
 8001868:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 800186c:	e014      	b.n	8001898 <HAL_ADC_Init+0x32c>
 800186e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001872:	e011      	b.n	8001898 <HAL_ADC_Init+0x32c>
 8001874:	20000004 	.word	0x20000004
 8001878:	431bde83 	.word	0x431bde83
 800187c:	50000100 	.word	0x50000100
 8001880:	50000300 	.word	0x50000300
 8001884:	50000700 	.word	0x50000700
 8001888:	50000400 	.word	0x50000400
 800188c:	50000500 	.word	0x50000500
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800189c:	4313      	orrs	r3, r2
 800189e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018a0:	4313      	orrs	r3, r2
 80018a2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d114      	bne.n	80018dc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018c0:	f023 0302 	bic.w	r3, r3, #2
 80018c4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e1b      	ldrb	r3, [r3, #24]
 80018ca:	039a      	lsls	r2, r3, #14
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4313      	orrs	r3, r2
 80018d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018d8:	4313      	orrs	r3, r2
 80018da:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <HAL_ADC_Init+0x3f0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80018ec:	430b      	orrs	r3, r1
 80018ee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10c      	bne.n	8001912 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f023 010f 	bic.w	r1, r3, #15
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	1e5a      	subs	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001910:	e007      	b.n	8001922 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 020f 	bic.w	r2, r2, #15
 8001920:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f023 0303 	bic.w	r3, r3, #3
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40
 8001938:	e00a      	b.n	8001950 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f023 0312 	bic.w	r3, r3, #18
 8001942:	f043 0210 	orr.w	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800194a:	2301      	movs	r3, #1
 800194c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001950:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001954:	4618      	mov	r0, r3
 8001956:	3768      	adds	r7, #104	@ 0x68
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	fff0c007 	.word	0xfff0c007

08001960 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 80f9 	bne.w	8001b6e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_Start+0x2a>
 8001986:	2302      	movs	r3, #2
 8001988:	e0f4      	b.n	8001b74 <HAL_ADC_Start+0x214>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fde6 	bl	8002564 <ADC_Enable>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 80e0 	bne.w	8001b64 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019c0:	d004      	beq.n	80019cc <HAL_ADC_Start+0x6c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6d      	ldr	r2, [pc, #436]	@ (8001b7c <HAL_ADC_Start+0x21c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d106      	bne.n	80019da <HAL_ADC_Start+0x7a>
 80019cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001b80 <HAL_ADC_Start+0x220>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d010      	beq.n	80019fa <HAL_ADC_Start+0x9a>
 80019d8:	e005      	b.n	80019e6 <HAL_ADC_Start+0x86>
 80019da:	4b6a      	ldr	r3, [pc, #424]	@ (8001b84 <HAL_ADC_Start+0x224>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_ADC_Start+0x9a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019ee:	d004      	beq.n	80019fa <HAL_ADC_Start+0x9a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a64      	ldr	r2, [pc, #400]	@ (8001b88 <HAL_ADC_Start+0x228>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d115      	bne.n	8001a26 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d036      	beq.n	8001a82 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a24:	e02d      	b.n	8001a82 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a3a:	d004      	beq.n	8001a46 <HAL_ADC_Start+0xe6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a4e      	ldr	r2, [pc, #312]	@ (8001b7c <HAL_ADC_Start+0x21c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10a      	bne.n	8001a5c <HAL_ADC_Start+0xfc>
 8001a46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2301      	movne	r3, #1
 8001a56:	2300      	moveq	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e008      	b.n	8001a6e <HAL_ADC_Start+0x10e>
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <HAL_ADC_Start+0x228>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf14      	ite	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a8e:	d106      	bne.n	8001a9e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	f023 0206 	bic.w	r2, r3, #6
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	221c      	movs	r2, #28
 8001ab2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001abc:	d004      	beq.n	8001ac8 <HAL_ADC_Start+0x168>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8001b7c <HAL_ADC_Start+0x21c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d106      	bne.n	8001ad6 <HAL_ADC_Start+0x176>
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <HAL_ADC_Start+0x220>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03e      	beq.n	8001b52 <HAL_ADC_Start+0x1f2>
 8001ad4:	e005      	b.n	8001ae2 <HAL_ADC_Start+0x182>
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_ADC_Start+0x224>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d037      	beq.n	8001b52 <HAL_ADC_Start+0x1f2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aea:	d004      	beq.n	8001af6 <HAL_ADC_Start+0x196>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a22      	ldr	r2, [pc, #136]	@ (8001b7c <HAL_ADC_Start+0x21c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d106      	bne.n	8001b04 <HAL_ADC_Start+0x1a4>
 8001af6:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <HAL_ADC_Start+0x220>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d027      	beq.n	8001b52 <HAL_ADC_Start+0x1f2>
 8001b02:	e005      	b.n	8001b10 <HAL_ADC_Start+0x1b0>
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <HAL_ADC_Start+0x224>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d020      	beq.n	8001b52 <HAL_ADC_Start+0x1f2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b18:	d004      	beq.n	8001b24 <HAL_ADC_Start+0x1c4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a17      	ldr	r2, [pc, #92]	@ (8001b7c <HAL_ADC_Start+0x21c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d106      	bne.n	8001b32 <HAL_ADC_Start+0x1d2>
 8001b24:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_ADC_Start+0x220>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d010      	beq.n	8001b52 <HAL_ADC_Start+0x1f2>
 8001b30:	e005      	b.n	8001b3e <HAL_ADC_Start+0x1de>
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_ADC_Start+0x224>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	d009      	beq.n	8001b52 <HAL_ADC_Start+0x1f2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b46:	d004      	beq.n	8001b52 <HAL_ADC_Start+0x1f2>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b88 <HAL_ADC_Start+0x228>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10f      	bne.n	8001b72 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0204 	orr.w	r2, r2, #4
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	e006      	b.n	8001b72 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001b6c:	e001      	b.n	8001b72 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	50000100 	.word	0x50000100
 8001b80:	50000300 	.word	0x50000300
 8001b84:	50000700 	.word	0x50000700
 8001b88:	50000400 	.word	0x50000400

08001b8c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d102      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e03a      	b.n	8001c1e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bb0:	d004      	beq.n	8001bbc <HAL_ADC_PollForConversion+0x30>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a72      	ldr	r2, [pc, #456]	@ (8001d80 <HAL_ADC_PollForConversion+0x1f4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x34>
 8001bbc:	4b71      	ldr	r3, [pc, #452]	@ (8001d84 <HAL_ADC_PollForConversion+0x1f8>)
 8001bbe:	e000      	b.n	8001bc2 <HAL_ADC_PollForConversion+0x36>
 8001bc0:	4b71      	ldr	r3, [pc, #452]	@ (8001d88 <HAL_ADC_PollForConversion+0x1fc>)
 8001bc2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d112      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d11d      	bne.n	8001c1a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f043 0220 	orr.w	r2, r3, #32
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0bf      	b.n	8001d76 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f043 0220 	orr.w	r2, r3, #32
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0ad      	b.n	8001d76 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c26:	d004      	beq.n	8001c32 <HAL_ADC_PollForConversion+0xa6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a54      	ldr	r2, [pc, #336]	@ (8001d80 <HAL_ADC_PollForConversion+0x1f4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d106      	bne.n	8001c40 <HAL_ADC_PollForConversion+0xb4>
 8001c32:	4b54      	ldr	r3, [pc, #336]	@ (8001d84 <HAL_ADC_PollForConversion+0x1f8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <HAL_ADC_PollForConversion+0xd4>
 8001c3e:	e005      	b.n	8001c4c <HAL_ADC_PollForConversion+0xc0>
 8001c40:	4b51      	ldr	r3, [pc, #324]	@ (8001d88 <HAL_ADC_PollForConversion+0x1fc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <HAL_ADC_PollForConversion+0xd4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c54:	d004      	beq.n	8001c60 <HAL_ADC_PollForConversion+0xd4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d8c <HAL_ADC_PollForConversion+0x200>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d104      	bne.n	8001c6a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	e00f      	b.n	8001c8a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c72:	d004      	beq.n	8001c7e <HAL_ADC_PollForConversion+0xf2>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a41      	ldr	r2, [pc, #260]	@ (8001d80 <HAL_ADC_PollForConversion+0x1f4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d102      	bne.n	8001c84 <HAL_ADC_PollForConversion+0xf8>
 8001c7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_PollForConversion+0xfa>
 8001c84:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <HAL_ADC_PollForConversion+0x200>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001c8a:	f7ff fc3f 	bl	800150c <HAL_GetTick>
 8001c8e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c90:	e021      	b.n	8001cd6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d01d      	beq.n	8001cd6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_ADC_PollForConversion+0x124>
 8001ca0:	f7ff fc34 	bl	800150c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d212      	bcs.n	8001cd6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f043 0204 	orr.w	r2, r3, #4
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04f      	b.n	8001d76 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0d6      	beq.n	8001c92 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d131      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12c      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d125      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d112      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d112      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d48:	e00b      	b.n	8001d62 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f043 0220 	orr.w	r2, r3, #32
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	50000100 	.word	0x50000100
 8001d84:	50000300 	.word	0x50000300
 8001d88:	50000700 	.word	0x50000700
 8001d8c:	50000400 	.word	0x50000400

08001d90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b09b      	sub	sp, #108	@ 0x6c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x22>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e2c8      	b.n	8002360 <HAL_ADC_ConfigChannel+0x5b4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 82ac 	bne.w	800233e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d81c      	bhi.n	8001e28 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	461a      	mov	r2, r3
 8001e02:	231f      	movs	r3, #31
 8001e04:	4093      	lsls	r3, r2
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4019      	ands	r1, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e26:	e063      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d81e      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	221f      	movs	r2, #31
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4019      	ands	r1, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	3b1e      	subs	r3, #30
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e6c:	e040      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b0e      	cmp	r3, #14
 8001e74:	d81e      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	3b3c      	subs	r3, #60	@ 0x3c
 8001e8a:	221f      	movs	r2, #31
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	3b3c      	subs	r3, #60	@ 0x3c
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eb2:	e01d      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	3b5a      	subs	r3, #90	@ 0x5a
 8001ec8:	221f      	movs	r2, #31
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	4019      	ands	r1, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	3b5a      	subs	r3, #90	@ 0x5a
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80e5 	bne.w	80020ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d91c      	bls.n	8001f42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6999      	ldr	r1, [r3, #24]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	3b1e      	subs	r3, #30
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e019      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6959      	ldr	r1, [r3, #20]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4019      	ands	r1, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d84f      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0x28c>
 8001f98:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fd3 	.word	0x08001fd3
 8001fa8:	08001ff5 	.word	0x08001ff5
 8001fac:	08002017 	.word	0x08002017
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fb6:	4b99      	ldr	r3, [pc, #612]	@ (800221c <HAL_ADC_ConfigChannel+0x470>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	0691      	lsls	r1, r2, #26
 8001fc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001fce:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fd0:	e07b      	b.n	80020ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001fd8:	4b90      	ldr	r3, [pc, #576]	@ (800221c <HAL_ADC_ConfigChannel+0x470>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	0691      	lsls	r1, r2, #26
 8001fe2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ff0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ff2:	e06a      	b.n	80020ca <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001ffa:	4b88      	ldr	r3, [pc, #544]	@ (800221c <HAL_ADC_ConfigChannel+0x470>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	0691      	lsls	r1, r2, #26
 8002004:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002006:	430a      	orrs	r2, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002012:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002014:	e059      	b.n	80020ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800201c:	4b7f      	ldr	r3, [pc, #508]	@ (800221c <HAL_ADC_ConfigChannel+0x470>)
 800201e:	4013      	ands	r3, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	0691      	lsls	r1, r2, #26
 8002026:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002028:	430a      	orrs	r2, r1
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002034:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002036:	e048      	b.n	80020ca <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	069b      	lsls	r3, r3, #26
 8002048:	429a      	cmp	r2, r3
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800205a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002062:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	429a      	cmp	r2, r3
 800206e:	d107      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800207e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002086:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	069b      	lsls	r3, r3, #26
 8002090:	429a      	cmp	r2, r3
 8002092:	d107      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020a2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	069b      	lsls	r3, r3, #26
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d107      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80020c8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x33e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x33e>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_ADC_ConfigChannel+0x340>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 8131 	bne.w	8002354 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d00f      	beq.n	800211a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43da      	mvns	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	400a      	ands	r2, r1
 8002114:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002118:	e049      	b.n	80021ae <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	409a      	lsls	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d91c      	bls.n	8002176 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6999      	ldr	r1, [r3, #24]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1b      	subs	r3, #27
 800214e:	2207      	movs	r2, #7
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4019      	ands	r1, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6898      	ldr	r0, [r3, #8]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	3b1b      	subs	r3, #27
 8002168:	fa00 f203 	lsl.w	r2, r0, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	619a      	str	r2, [r3, #24]
 8002174:	e01b      	b.n	80021ae <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6959      	ldr	r1, [r3, #20]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	2207      	movs	r2, #7
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	4019      	ands	r1, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6898      	ldr	r0, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021b6:	d004      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x416>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <HAL_ADC_ConfigChannel+0x474>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x41a>
 80021c2:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <HAL_ADC_ConfigChannel+0x478>)
 80021c4:	e000      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x41c>
 80021c6:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_ADC_ConfigChannel+0x47c>)
 80021c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d105      	bne.n	80021de <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021e2:	2b11      	cmp	r3, #17
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	f040 80ac 	bne.w	8002354 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 80a5 	bne.w	8002354 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002212:	d10b      	bne.n	800222c <HAL_ADC_ConfigChannel+0x480>
 8002214:	4b02      	ldr	r3, [pc, #8]	@ (8002220 <HAL_ADC_ConfigChannel+0x474>)
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e023      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4b6>
 800221a:	bf00      	nop
 800221c:	83fff000 	.word	0x83fff000
 8002220:	50000100 	.word	0x50000100
 8002224:	50000300 	.word	0x50000300
 8002228:	50000700 	.word	0x50000700
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4e      	ldr	r2, [pc, #312]	@ (800236c <HAL_ADC_ConfigChannel+0x5c0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d103      	bne.n	800223e <HAL_ADC_ConfigChannel+0x492>
 8002236:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e011      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4b6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a4b      	ldr	r2, [pc, #300]	@ (8002370 <HAL_ADC_ConfigChannel+0x5c4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d102      	bne.n	800224e <HAL_ADC_ConfigChannel+0x4a2>
 8002248:	4b4a      	ldr	r3, [pc, #296]	@ (8002374 <HAL_ADC_ConfigChannel+0x5c8>)
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e009      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4b6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a48      	ldr	r2, [pc, #288]	@ (8002374 <HAL_ADC_ConfigChannel+0x5c8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d102      	bne.n	800225e <HAL_ADC_ConfigChannel+0x4b2>
 8002258:	4b45      	ldr	r3, [pc, #276]	@ (8002370 <HAL_ADC_ConfigChannel+0x5c4>)
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e001      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4b6>
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d108      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x4d6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x4d6>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_ADC_ConfigChannel+0x4d8>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d150      	bne.n	800232a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002288:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x4fe>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x4fe>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_ADC_ConfigChannel+0x500>
 80022aa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d13c      	bne.n	800232a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d11d      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x548>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022c0:	d118      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022cc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002378 <HAL_ADC_ConfigChannel+0x5cc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2a      	ldr	r2, [pc, #168]	@ (800237c <HAL_ADC_ConfigChannel+0x5d0>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	0c9a      	lsrs	r2, r3, #18
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022e4:	e002      	b.n	80022ec <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f9      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022f2:	e02e      	b.n	8002352 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b11      	cmp	r3, #17
 80022fa:	d10b      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x568>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002304:	d106      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800230e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002310:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002312:	e01e      	b.n	8002352 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b12      	cmp	r3, #18
 800231a:	d11a      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800231c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002326:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002328:	e013      	b.n	8002352 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800233c:	e00a      	b.n	8002354 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002350:	e000      	b.n	8002354 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002352:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800235c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002360:	4618      	mov	r0, r3
 8002362:	376c      	adds	r7, #108	@ 0x6c
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	50000100 	.word	0x50000100
 8002370:	50000400 	.word	0x50000400
 8002374:	50000500 	.word	0x50000500
 8002378:	20000004 	.word	0x20000004
 800237c:	431bde83 	.word	0x431bde83

08002380 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002380:	b480      	push	{r7}
 8002382:	b099      	sub	sp, #100	@ 0x64
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002398:	d102      	bne.n	80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800239a:	4b6d      	ldr	r3, [pc, #436]	@ (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	e01a      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d103      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80023aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	e011      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a67      	ldr	r2, [pc, #412]	@ (8002554 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d102      	bne.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023bc:	4b66      	ldr	r3, [pc, #408]	@ (8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	e009      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a64      	ldr	r2, [pc, #400]	@ (8002558 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d102      	bne.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023cc:	4b61      	ldr	r3, [pc, #388]	@ (8002554 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	e001      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b0      	b.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e0a9      	b.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 808d 	bne.w	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 8086 	bne.w	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800241c:	d004      	beq.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a4b      	ldr	r2, [pc, #300]	@ (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002428:	4b4c      	ldr	r3, [pc, #304]	@ (800255c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800242a:	e000      	b.n	800242e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800242c:	4b4c      	ldr	r3, [pc, #304]	@ (8002560 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800242e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d040      	beq.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800244a:	035b      	lsls	r3, r3, #13
 800244c:	430b      	orrs	r3, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002452:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d15c      	bne.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002496:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002498:	2b00      	cmp	r3, #0
 800249a:	d14b      	bne.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800249c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024a4:	f023 030f 	bic.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	6811      	ldr	r1, [r2, #0]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024b6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b8:	e03c      	b.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024c4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d123      	bne.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002508:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800250a:	2b00      	cmp	r3, #0
 800250c:	d112      	bne.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800250e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002516:	f023 030f 	bic.w	r3, r3, #15
 800251a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800251c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800251e:	e009      	b.n	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f043 0220 	orr.w	r2, r3, #32
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002532:	e000      	b.n	8002536 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002534:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800253e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002542:	4618      	mov	r0, r3
 8002544:	3764      	adds	r7, #100	@ 0x64
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	50000100 	.word	0x50000100
 8002554:	50000400 	.word	0x50000400
 8002558:	50000500 	.word	0x50000500
 800255c:	50000300 	.word	0x50000300
 8002560:	50000700 	.word	0x50000700

08002564 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d108      	bne.n	8002590 <ADC_Enable+0x2c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <ADC_Enable+0x2c>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <ADC_Enable+0x2e>
 8002590:	2300      	movs	r3, #0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d143      	bne.n	800261e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <ADC_Enable+0xc4>)
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f043 0210 	orr.w	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e02f      	b.n	8002620 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80025d0:	f7fe ff9c 	bl	800150c <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025d6:	e01b      	b.n	8002610 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025d8:	f7fe ff98 	bl	800150c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d914      	bls.n	8002610 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d00d      	beq.n	8002610 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0210 	orr.w	r2, r3, #16
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e007      	b.n	8002620 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d1dc      	bne.n	80025d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	8000003f 	.word	0x8000003f

0800262c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <ADC_Disable+0x2c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <ADC_Disable+0x2c>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <ADC_Disable+0x2e>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d047      	beq.n	80026ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030d 	and.w	r3, r3, #13
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10f      	bne.n	800268c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0202 	orr.w	r2, r2, #2
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2203      	movs	r2, #3
 8002682:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002684:	f7fe ff42 	bl	800150c <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800268a:	e029      	b.n	80026e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e023      	b.n	80026f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026a8:	f7fe ff30 	bl	800150c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d914      	bls.n	80026e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10d      	bne.n	80026e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e007      	b.n	80026f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d0dc      	beq.n	80026a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	@ (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	@ (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	@ 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f7ff ff8e 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff29 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c0:	f7ff ff3e 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7ff ff8e 	bl	80027ec <NVIC_EncodePriority>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff5d 	bl	8002798 <__NVIC_SetPriority>
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff31 	bl	800275c <__NVIC_EnableIRQ>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffa2 	bl	8002854 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e014      	b.n	8002956 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fe fc8d 	bl	800125c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800295e:	b480      	push	{r7}
 8002960:	b087      	sub	sp, #28
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	3308      	adds	r3, #8
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e004      	b.n	8002992 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	3314      	adds	r3, #20
 8002990:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	461a      	mov	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	795b      	ldrb	r3, [r3, #5]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_DAC_Start+0x16>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e039      	b.n	8002a32 <HAL_DAC_Start+0x8a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	409a      	lsls	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80029ee:	2b3c      	cmp	r3, #60	@ 0x3c
 80029f0:	d118      	bne.n	8002a24 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e00f      	b.n	8002a24 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a0e:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8002a12:	d107      	bne.n	8002a24 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0202 	orr.w	r2, r2, #2
 8002a22:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	795b      	ldrb	r3, [r3, #5]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_DAC_ConfigChannel+0x20>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e036      	b.n	8002acc <HAL_DAC_ConfigChannel+0x8e>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2202      	movs	r2, #2
 8002a68:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002a72:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4013      	ands	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6819      	ldr	r1, [r3, #0]
 8002aac:	22c0      	movs	r2, #192	@ 0xc0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	400a      	ands	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	e160      	b.n	8002daa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8152 	beq.w	8002da4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d005      	beq.n	8002b18 <HAL_GPIO_Init+0x40>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d130      	bne.n	8002b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b4e:	2201      	movs	r2, #1
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0201 	and.w	r2, r3, #1
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d017      	beq.n	8002bb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2203      	movs	r2, #3
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d123      	bne.n	8002c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	08da      	lsrs	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3208      	adds	r2, #8
 8002bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	6939      	ldr	r1, [r7, #16]
 8002c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0203 	and.w	r2, r3, #3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80ac 	beq.w	8002da4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8002dc8 <HAL_GPIO_Init+0x2f0>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc8 <HAL_GPIO_Init+0x2f0>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6193      	str	r3, [r2, #24]
 8002c58:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc8 <HAL_GPIO_Init+0x2f0>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c64:	4a59      	ldr	r2, [pc, #356]	@ (8002dcc <HAL_GPIO_Init+0x2f4>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c8e:	d025      	beq.n	8002cdc <HAL_GPIO_Init+0x204>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd0 <HAL_GPIO_Init+0x2f8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01f      	beq.n	8002cd8 <HAL_GPIO_Init+0x200>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d019      	beq.n	8002cd4 <HAL_GPIO_Init+0x1fc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_GPIO_Init+0x1f8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a4c      	ldr	r2, [pc, #304]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_Init+0x1f4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4b      	ldr	r2, [pc, #300]	@ (8002de0 <HAL_GPIO_Init+0x308>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_Init+0x1f0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a4a      	ldr	r2, [pc, #296]	@ (8002de4 <HAL_GPIO_Init+0x30c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_Init+0x1ec>
 8002cc0:	2306      	movs	r3, #6
 8002cc2:	e00c      	b.n	8002cde <HAL_GPIO_Init+0x206>
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	e00a      	b.n	8002cde <HAL_GPIO_Init+0x206>
 8002cc8:	2305      	movs	r3, #5
 8002cca:	e008      	b.n	8002cde <HAL_GPIO_Init+0x206>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e006      	b.n	8002cde <HAL_GPIO_Init+0x206>
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e004      	b.n	8002cde <HAL_GPIO_Init+0x206>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0x206>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_GPIO_Init+0x206>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	f002 0203 	and.w	r2, r2, #3
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cee:	4937      	ldr	r1, [pc, #220]	@ (8002dcc <HAL_GPIO_Init+0x2f4>)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d20:	4a31      	ldr	r2, [pc, #196]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d26:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d4a:	4a27      	ldr	r2, [pc, #156]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d74:	4a1c      	ldr	r2, [pc, #112]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d9e:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3301      	adds	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f47f ae97 	bne.w	8002ae8 <HAL_GPIO_Init+0x10>
  }
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48001000 	.word	0x48001000
 8002de0:	48001400 	.word	0x48001400
 8002de4:	48001800 	.word	0x48001800
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e2c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f001 b80a 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8161 	beq.w	800311a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e58:	4bae      	ldr	r3, [pc, #696]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e64:	4bab      	ldr	r3, [pc, #684]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d157      	bne.n	8002f20 <HAL_RCC_OscConfig+0x104>
 8002e70:	4ba8      	ldr	r3, [pc, #672]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e7c:	d150      	bne.n	8002f20 <HAL_RCC_OscConfig+0x104>
 8002e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e82:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e9e:	d802      	bhi.n	8002ea6 <HAL_RCC_OscConfig+0x8a>
 8002ea0:	4b9c      	ldr	r3, [pc, #624]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_OscConfig+0xb6>
 8002ea6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eaa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002eba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ebe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ec2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002ece:	4b91      	ldr	r3, [pc, #580]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ed6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002eda:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002ee6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002eea:	fab2 f282 	clz	r2, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f042 0220 	orr.w	r2, r2, #32
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f002 021f 	and.w	r2, r2, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8108 	beq.w	8003118 <HAL_RCC_OscConfig+0x2fc>
 8002f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 80ff 	bne.w	8003118 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f000 bf9b 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x124>
 8002f32:	4b78      	ldr	r3, [pc, #480]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a77      	ldr	r2, [pc, #476]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e036      	b.n	8002fae <HAL_RCC_OscConfig+0x192>
 8002f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x14e>
 8002f50:	4b70      	ldr	r3, [pc, #448]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6f      	ldr	r2, [pc, #444]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b6d      	ldr	r3, [pc, #436]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6c      	ldr	r2, [pc, #432]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e021      	b.n	8002fae <HAL_RCC_OscConfig+0x192>
 8002f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f7a:	d10c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x17a>
 8002f7c:	4b65      	ldr	r3, [pc, #404]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a64      	ldr	r2, [pc, #400]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b62      	ldr	r3, [pc, #392]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a61      	ldr	r2, [pc, #388]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e00b      	b.n	8002fae <HAL_RCC_OscConfig+0x192>
 8002f96:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8002fa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d054      	beq.n	8003068 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe faa5 	bl	800150c <HAL_GetTick>
 8002fc2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe faa0 	bl	800150c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	@ 0x64
 8002fd6:	d902      	bls.n	8002fde <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	f000 bf3c 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
 8002fde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fe2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002ff2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ffe:	d802      	bhi.n	8003006 <HAL_RCC_OscConfig+0x1ea>
 8003000:	4b44      	ldr	r3, [pc, #272]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x216>
 8003006:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800300a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800301a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800301e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003022:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800302e:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003036:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800303a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800303e:	fa92 f2a2 	rbit	r2, r2
 8003042:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003046:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800304a:	fab2 f282 	clz	r2, r2
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f042 0220 	orr.w	r2, r2, #32
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	f002 021f 	and.w	r2, r2, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0b0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x1ac>
 8003066:	e058      	b.n	800311a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fa50 	bl	800150c <HAL_GetTick>
 800306c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003072:	f7fe fa4b 	bl	800150c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	@ 0x64
 8003080:	d902      	bls.n	8003088 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	f000 bee7 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800308c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800309c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80030a8:	d802      	bhi.n	80030b0 <HAL_RCC_OscConfig+0x294>
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e015      	b.n	80030dc <HAL_RCC_OscConfig+0x2c0>
 80030b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80030c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030c8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80030cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_RCC_OscConfig+0x2f8>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030e0:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80030e4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80030e8:	fa92 f2a2 	rbit	r2, r2
 80030ec:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80030f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1b0      	bne.n	8003072 <HAL_RCC_OscConfig+0x256>
 8003110:	e003      	b.n	800311a <HAL_RCC_OscConfig+0x2fe>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 816d 	beq.w	800340a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003130:	4bcd      	ldr	r3, [pc, #820]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00c      	beq.n	8003156 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800313c:	4bca      	ldr	r3, [pc, #808]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d16e      	bne.n	8003226 <HAL_RCC_OscConfig+0x40a>
 8003148:	4bc7      	ldr	r3, [pc, #796]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003154:	d167      	bne.n	8003226 <HAL_RCC_OscConfig+0x40a>
 8003156:	2302      	movs	r3, #2
 8003158:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003168:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b3f      	cmp	r3, #63	@ 0x3f
 8003174:	d802      	bhi.n	800317c <HAL_RCC_OscConfig+0x360>
 8003176:	4bbc      	ldr	r3, [pc, #752]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e013      	b.n	80031a4 <HAL_RCC_OscConfig+0x388>
 800317c:	2302      	movs	r3, #2
 800317e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800318e:	2302      	movs	r3, #2
 8003190:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003194:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80031a0:	4bb1      	ldr	r3, [pc, #708]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	2202      	movs	r2, #2
 80031a6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80031aa:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80031ae:	fa92 f2a2 	rbit	r2, r2
 80031b2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80031b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80031ba:	fab2 f282 	clz	r2, r2
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f042 0220 	orr.w	r2, r2, #32
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f002 021f 	and.w	r2, r2, #31
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCC_OscConfig+0x3d0>
 80031d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f000 be35 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b9e      	ldr	r3, [pc, #632]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	21f8      	movs	r1, #248	@ 0xf8
 8003202:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800320a:	fa91 f1a1 	rbit	r1, r1
 800320e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003212:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003216:	fab1 f181 	clz	r1, r1
 800321a:	b2c9      	uxtb	r1, r1
 800321c:	408b      	lsls	r3, r1
 800321e:	4992      	ldr	r1, [pc, #584]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003224:	e0f1      	b.n	800340a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8083 	beq.w	800333e <HAL_RCC_OscConfig+0x522>
 8003238:	2301      	movs	r3, #1
 800323a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800324a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003258:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	461a      	mov	r2, r3
 8003260:	2301      	movs	r3, #1
 8003262:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe f952 	bl	800150c <HAL_GetTick>
 8003268:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326e:	f7fe f94d 	bl	800150c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d902      	bls.n	8003284 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	f000 bde9 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003284:	2302      	movs	r3, #2
 8003286:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003296:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80032a2:	d802      	bhi.n	80032aa <HAL_RCC_OscConfig+0x48e>
 80032a4:	4b70      	ldr	r3, [pc, #448]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	e013      	b.n	80032d2 <HAL_RCC_OscConfig+0x4b6>
 80032aa:	2302      	movs	r3, #2
 80032ac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80032bc:	2302      	movs	r3, #2
 80032be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80032c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80032ce:	4b66      	ldr	r3, [pc, #408]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	2202      	movs	r2, #2
 80032d4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80032d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80032dc:	fa92 f2a2 	rbit	r2, r2
 80032e0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80032e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80032e8:	fab2 f282 	clz	r2, r2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	f042 0220 	orr.w	r2, r2, #32
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f002 021f 	and.w	r2, r2, #31
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f202 	lsl.w	r2, r1, r2
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0b4      	beq.n	800326e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b58      	ldr	r3, [pc, #352]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003310:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	21f8      	movs	r1, #248	@ 0xf8
 800331a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003322:	fa91 f1a1 	rbit	r1, r1
 8003326:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800332a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800332e:	fab1 f181 	clz	r1, r1
 8003332:	b2c9      	uxtb	r1, r1
 8003334:	408b      	lsls	r3, r1
 8003336:	494c      	ldr	r1, [pc, #304]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e065      	b.n	800340a <HAL_RCC_OscConfig+0x5ee>
 800333e:	2301      	movs	r3, #1
 8003340:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003350:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800335e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	461a      	mov	r2, r3
 8003366:	2300      	movs	r3, #0
 8003368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe f8cf 	bl	800150c <HAL_GetTick>
 800336e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe f8ca 	bl	800150c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d902      	bls.n	800338a <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	f000 bd66 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
 800338a:	2302      	movs	r3, #2
 800338c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800339c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80033a8:	d802      	bhi.n	80033b0 <HAL_RCC_OscConfig+0x594>
 80033aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	e013      	b.n	80033d8 <HAL_RCC_OscConfig+0x5bc>
 80033b0:	2302      	movs	r3, #2
 80033b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80033c2:	2302      	movs	r3, #2
 80033c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80033c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80033d4:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCC_OscConfig+0x64c>)
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	2202      	movs	r2, #2
 80033da:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80033de:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80033e2:	fa92 f2a2 	rbit	r2, r2
 80033e6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80033ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1b4      	bne.n	8003374 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800340e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8119 	beq.w	8003652 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003424:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8082 	beq.w	8003536 <HAL_RCC_OscConfig+0x71a>
 8003432:	2301      	movs	r3, #1
 8003434:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003444:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCC_OscConfig+0x650>)
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	461a      	mov	r2, r3
 8003458:	2301      	movs	r3, #1
 800345a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345c:	f7fe f856 	bl	800150c <HAL_GetTick>
 8003460:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003464:	e00f      	b.n	8003486 <HAL_RCC_OscConfig+0x66a>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003470:	f7fe f84c 	bl	800150c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d902      	bls.n	8003486 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	f000 bce8 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003486:	2302      	movs	r3, #2
 8003488:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003490:	fa93 f2a3 	rbit	r2, r3
 8003494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003498:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034a6:	2202      	movs	r2, #2
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80034ca:	2202      	movs	r2, #2
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fa93 f2a3 	rbit	r2, r3
 80034dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	4bb0      	ldr	r3, [pc, #704]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 80034e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80034f2:	2102      	movs	r1, #2
 80034f4:	6019      	str	r1, [r3, #0]
 80034f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f1a3 	rbit	r1, r3
 8003504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003508:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800350c:	6019      	str	r1, [r3, #0]
  return result;
 800350e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003512:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d09d      	beq.n	8003470 <HAL_RCC_OscConfig+0x654>
 8003534:	e08d      	b.n	8003652 <HAL_RCC_OscConfig+0x836>
 8003536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003546:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	fa93 f2a3 	rbit	r2, r3
 8003550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003554:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003558:	601a      	str	r2, [r3, #0]
  return result;
 800355a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003562:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	4b8f      	ldr	r3, [pc, #572]	@ (80037ac <HAL_RCC_OscConfig+0x990>)
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	461a      	mov	r2, r3
 8003574:	2300      	movs	r3, #0
 8003576:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fd ffc8 	bl	800150c <HAL_GetTick>
 800357c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003582:	f7fd ffc3 	bl	800150c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	f000 bc5f 	b.w	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80035a0:	2202      	movs	r2, #2
 80035a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035c4:	2202      	movs	r2, #2
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	fa93 f2a3 	rbit	r2, r3
 80035d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80035e8:	2202      	movs	r2, #2
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003602:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b68      	ldr	r3, [pc, #416]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800360c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003610:	2102      	movs	r1, #2
 8003612:	6019      	str	r1, [r3, #0]
 8003614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003618:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	fa93 f1a3 	rbit	r1, r3
 8003622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003626:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800362a:	6019      	str	r1, [r3, #0]
  return result;
 800362c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003630:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d197      	bne.n	8003582 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003656:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 819c 	beq.w	80039a0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366e:	4b4e      	ldr	r3, [pc, #312]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003684:	61d3      	str	r3, [r2, #28]
 8003686:	4b48      	ldr	r3, [pc, #288]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800368e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <HAL_RCC_OscConfig+0x994>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11a      	bne.n	80036ea <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b4:	4b3e      	ldr	r3, [pc, #248]	@ (80037b0 <HAL_RCC_OscConfig+0x994>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3d      	ldr	r2, [pc, #244]	@ (80037b0 <HAL_RCC_OscConfig+0x994>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c0:	f7fd ff24 	bl	800150c <HAL_GetTick>
 80036c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	e009      	b.n	80036de <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ca:	f7fd ff1f 	bl	800150c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e3bb      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	4b34      	ldr	r3, [pc, #208]	@ (80037b0 <HAL_RCC_OscConfig+0x994>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x8ec>
 80036fa:	4b2b      	ldr	r3, [pc, #172]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a2a      	ldr	r2, [pc, #168]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	e035      	b.n	8003774 <HAL_RCC_OscConfig+0x958>
 8003708:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800370c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x916>
 8003718:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	6213      	str	r3, [r2, #32]
 8003724:	4b20      	ldr	r3, [pc, #128]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4a1f      	ldr	r2, [pc, #124]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 800372a:	f023 0304 	bic.w	r3, r3, #4
 800372e:	6213      	str	r3, [r2, #32]
 8003730:	e020      	b.n	8003774 <HAL_RCC_OscConfig+0x958>
 8003732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003736:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x940>
 8003742:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6213      	str	r3, [r2, #32]
 800374e:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4a15      	ldr	r2, [pc, #84]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6213      	str	r3, [r2, #32]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x958>
 800375c:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4a11      	ldr	r2, [pc, #68]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6213      	str	r3, [r2, #32]
 8003768:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a0e      	ldr	r2, [pc, #56]	@ (80037a8 <HAL_RCC_OscConfig+0x98c>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003778:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8085 	beq.w	8003890 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fd fec1 	bl	800150c <HAL_GetTick>
 800378a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	e011      	b.n	80037b4 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fd febc 	bl	800150c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d907      	bls.n	80037b4 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e356      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	10908120 	.word	0x10908120
 80037b0:	40007000 	.word	0x40007000
 80037b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80037bc:	2202      	movs	r2, #2
 80037be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	fa93 f2a3 	rbit	r2, r3
 80037ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80037e0:	2202      	movs	r2, #2
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80037fa:	601a      	str	r2, [r3, #0]
  return result;
 80037fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003800:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003804:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0xa00>
 8003816:	4b98      	ldr	r3, [pc, #608]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	e013      	b.n	8003844 <HAL_RCC_OscConfig+0xa28>
 800381c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003820:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003824:	2202      	movs	r2, #2
 8003826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800382c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	fa93 f2a3 	rbit	r2, r3
 8003836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800383a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	4b8d      	ldr	r3, [pc, #564]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003848:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800384c:	2102      	movs	r1, #2
 800384e:	6011      	str	r1, [r2, #0]
 8003850:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003854:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	fa92 f1a2 	rbit	r1, r2
 800385e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003862:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003866:	6011      	str	r1, [r2, #0]
  return result;
 8003868:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800386c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	fab2 f282 	clz	r2, r2
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f002 021f 	and.w	r2, r2, #31
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d080      	beq.n	8003790 <HAL_RCC_OscConfig+0x974>
 800388e:	e07d      	b.n	800398c <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003890:	f7fd fe3c 	bl	800150c <HAL_GetTick>
 8003894:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003898:	e00b      	b.n	80038b2 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fd fe37 	bl	800150c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e2d1      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
 80038b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80038ba:	2202      	movs	r2, #2
 80038bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038da:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80038de:	2202      	movs	r2, #2
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	fa93 f2a3 	rbit	r2, r3
 80038f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80038f8:	601a      	str	r2, [r3, #0]
  return result;
 80038fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003902:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <HAL_RCC_OscConfig+0xafe>
 8003914:	4b58      	ldr	r3, [pc, #352]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	e013      	b.n	8003942 <HAL_RCC_OscConfig+0xb26>
 800391a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800391e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800392a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fa93 f2a3 	rbit	r2, r3
 8003934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003938:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	4b4e      	ldr	r3, [pc, #312]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003946:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800394a:	2102      	movs	r1, #2
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003952:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	fa92 f1a2 	rbit	r1, r2
 800395c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003960:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003964:	6011      	str	r1, [r2, #0]
  return result;
 8003966:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800396a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	fab2 f282 	clz	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f002 021f 	and.w	r2, r2, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d186      	bne.n	800389a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800398c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003990:	2b01      	cmp	r3, #1
 8003992:	d105      	bne.n	80039a0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003994:	4b38      	ldr	r3, [pc, #224]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4a37      	ldr	r2, [pc, #220]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 800399a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8251 	beq.w	8003e54 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b2:	4b31      	ldr	r3, [pc, #196]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	f000 820f 	beq.w	8003dde <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	f040 8165 	bne.w	8003c9c <HAL_RCC_OscConfig+0xe80>
 80039d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039d6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	fa93 f2a3 	rbit	r2, r3
 80039ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80039f6:	601a      	str	r2, [r3, #0]
  return result;
 80039f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a0c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd fd78 	bl	800150c <HAL_GetTick>
 8003a1c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	e009      	b.n	8003a36 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd fd73 	bl	800150c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e20f      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a3a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a48:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a56:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a5a:	601a      	str	r2, [r3, #0]
  return result;
 8003a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a60:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a6e:	d805      	bhi.n	8003a7c <HAL_RCC_OscConfig+0xc60>
 8003a70:	4b01      	ldr	r3, [pc, #4]	@ (8003a78 <HAL_RCC_OscConfig+0xc5c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	e02a      	b.n	8003acc <HAL_RCC_OscConfig+0xcb0>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a80:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003a84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003aaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ab4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	fa93 f2a3 	rbit	r2, r3
 8003abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	4bca      	ldr	r3, [pc, #808]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ad0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ad4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ad8:	6011      	str	r1, [r2, #0]
 8003ada:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ade:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	fa92 f1a2 	rbit	r1, r2
 8003ae8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003aec:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003af0:	6011      	str	r1, [r2, #0]
  return result;
 8003af2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003af6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	fab2 f282 	clz	r2, r2
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	f042 0220 	orr.w	r2, r2, #32
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f002 021f 	and.w	r2, r2, #31
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d184      	bne.n	8003a22 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b18:	4bb6      	ldr	r3, [pc, #728]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	f023 020f 	bic.w	r2, r3, #15
 8003b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	49b1      	ldr	r1, [pc, #708]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003b32:	4bb0      	ldr	r3, [pc, #704]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a19      	ldr	r1, [r3, #32]
 8003b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	430b      	orrs	r3, r1
 8003b54:	49a7      	ldr	r1, [pc, #668]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 8003b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b5e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b62:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b7a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003b7e:	601a      	str	r2, [r3, #0]
  return result;
 8003b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b84:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003b88:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b94:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fd fcb4 	bl	800150c <HAL_GetTick>
 8003ba4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba8:	e009      	b.n	8003bbe <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fd fcaf 	bl	800150c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e14b      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003bbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bc2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	fa93 f2a3 	rbit	r2, r3
 8003bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bde:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003be2:	601a      	str	r2, [r3, #0]
  return result;
 8003be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003be8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003bec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bf6:	d802      	bhi.n	8003bfe <HAL_RCC_OscConfig+0xde2>
 8003bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	e027      	b.n	8003c4e <HAL_RCC_OscConfig+0xe32>
 8003bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c02:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c28:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c36:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	fa93 f2a3 	rbit	r2, r3
 8003c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c44:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c52:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c56:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c5a:	6011      	str	r1, [r2, #0]
 8003c5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c60:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	fa92 f1a2 	rbit	r1, r2
 8003c6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c6e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003c72:	6011      	str	r1, [r2, #0]
  return result;
 8003c74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c78:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	fab2 f282 	clz	r2, r2
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f042 0220 	orr.w	r2, r2, #32
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f002 021f 	and.w	r2, r2, #31
 8003c8e:	2101      	movs	r1, #1
 8003c90:	fa01 f202 	lsl.w	r2, r1, r2
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d087      	beq.n	8003baa <HAL_RCC_OscConfig+0xd8e>
 8003c9a:	e0db      	b.n	8003e54 <HAL_RCC_OscConfig+0x1038>
 8003c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ca4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cae:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	fa93 f2a3 	rbit	r2, r3
 8003cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cbc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003cc0:	601a      	str	r2, [r3, #0]
  return result;
 8003cc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cc6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003cca:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cd6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fd fc13 	bl	800150c <HAL_GetTick>
 8003ce6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cea:	e009      	b.n	8003d00 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd fc0e 	bl	800150c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0aa      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d04:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d12:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d20:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d24:	601a      	str	r2, [r3, #0]
  return result;
 8003d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d2a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d38:	d802      	bhi.n	8003d40 <HAL_RCC_OscConfig+0xf24>
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	e027      	b.n	8003d90 <HAL_RCC_OscConfig+0xf74>
 8003d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d44:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d52:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f2a3 	rbit	r2, r3
 8003d5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d60:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d6a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003d6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d78:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	fa93 f2a3 	rbit	r2, r3
 8003d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d86:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <HAL_RCC_OscConfig+0xfd8>)
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d94:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003d98:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003da2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	fa92 f1a2 	rbit	r1, r2
 8003dac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003db0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003db4:	6011      	str	r1, [r2, #0]
  return result;
 8003db6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003dba:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	fab2 f282 	clz	r2, r2
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f042 0220 	orr.w	r2, r2, #32
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	f002 021f 	and.w	r2, r2, #31
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d187      	bne.n	8003cec <HAL_RCC_OscConfig+0xed0>
 8003ddc:	e03a      	b.n	8003e54 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003de2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d104      	bne.n	8003df8 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e031      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df8:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <HAL_RCC_OscConfig+0x1044>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <HAL_RCC_OscConfig+0x1044>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e0c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d117      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e24:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b09e      	sub	sp, #120	@ 0x78
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e154      	b.n	8004126 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b89      	ldr	r3, [pc, #548]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b86      	ldr	r3, [pc, #536]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4984      	ldr	r1, [pc, #528]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b82      	ldr	r3, [pc, #520]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e13c      	b.n	8004126 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4978      	ldr	r1, [pc, #480]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80cd 	beq.w	8004072 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d137      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xec>
 8003ee0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ef8:	d802      	bhi.n	8003f00 <HAL_RCC_ClockConfig+0x9c>
 8003efa:	4b6b      	ldr	r3, [pc, #428]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	e00f      	b.n	8003f20 <HAL_RCC_ClockConfig+0xbc>
 8003f00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f12:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f1c:	4b62      	ldr	r3, [pc, #392]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f28:	fa92 f2a2 	rbit	r2, r2
 8003f2c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003f2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f30:	fab2 f282 	clz	r2, r2
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	f042 0220 	orr.w	r2, r2, #32
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	f002 021f 	and.w	r2, r2, #31
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f202 	lsl.w	r2, r1, r2
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d171      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0ea      	b.n	8004126 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d137      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x164>
 8003f58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f60:	fa93 f3a3 	rbit	r3, r3
 8003f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f70:	d802      	bhi.n	8003f78 <HAL_RCC_ClockConfig+0x114>
 8003f72:	4b4d      	ldr	r3, [pc, #308]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	e00f      	b.n	8003f98 <HAL_RCC_ClockConfig+0x134>
 8003f78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f94:	4b44      	ldr	r3, [pc, #272]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f9c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003fa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f042 0220 	orr.w	r2, r2, #32
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f002 021f 	and.w	r2, r2, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d135      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0ae      	b.n	8004126 <HAL_RCC_ClockConfig+0x2c2>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	fa93 f3a3 	rbit	r3, r3
 8003fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fde:	d802      	bhi.n	8003fe6 <HAL_RCC_ClockConfig+0x182>
 8003fe0:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	e00d      	b.n	8004002 <HAL_RCC_ClockConfig+0x19e>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	623b      	str	r3, [r7, #32]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	2202      	movs	r2, #2
 8004004:	61ba      	str	r2, [r7, #24]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	fa92 f2a2 	rbit	r2, r2
 800400c:	617a      	str	r2, [r7, #20]
  return result;
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	fab2 f282 	clz	r2, r2
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	f042 0220 	orr.w	r2, r2, #32
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	f002 021f 	and.w	r2, r2, #31
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e07a      	b.n	8004126 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004030:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f023 0203 	bic.w	r2, r3, #3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	491a      	ldr	r1, [pc, #104]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004042:	f7fd fa63 	bl	800150c <HAL_GetTick>
 8004046:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004048:	e00a      	b.n	8004060 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404a:	f7fd fa5f 	bl	800150c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e062      	b.n	8004126 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004060:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 020c 	and.w	r2, r3, #12
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	429a      	cmp	r2, r3
 8004070:	d1eb      	bne.n	800404a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d215      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004080:	4b08      	ldr	r3, [pc, #32]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 0207 	bic.w	r2, r3, #7
 8004088:	4906      	ldr	r1, [pc, #24]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004090:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d006      	beq.n	80040ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e041      	b.n	8004126 <HAL_RCC_ClockConfig+0x2c2>
 80040a2:	bf00      	nop
 80040a4:	40022000 	.word	0x40022000
 80040a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_RCC_ClockConfig+0x2cc>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	491a      	ldr	r1, [pc, #104]	@ (8004130 <HAL_RCC_ClockConfig+0x2cc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d6:	4b16      	ldr	r3, [pc, #88]	@ (8004130 <HAL_RCC_ClockConfig+0x2cc>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4912      	ldr	r1, [pc, #72]	@ (8004130 <HAL_RCC_ClockConfig+0x2cc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040ea:	f000 f829 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80040ee:	4601      	mov	r1, r0
 80040f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <HAL_RCC_ClockConfig+0x2cc>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f8:	22f0      	movs	r2, #240	@ 0xf0
 80040fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	fa92 f2a2 	rbit	r2, r2
 8004102:	60fa      	str	r2, [r7, #12]
  return result;
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	fab2 f282 	clz	r2, r2
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	40d3      	lsrs	r3, r2
 800410e:	4a09      	ldr	r2, [pc, #36]	@ (8004134 <HAL_RCC_ClockConfig+0x2d0>)
 8004110:	5cd3      	ldrb	r3, [r2, r3]
 8004112:	fa21 f303 	lsr.w	r3, r1, r3
 8004116:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <HAL_RCC_ClockConfig+0x2d4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800411a:	4b08      	ldr	r3, [pc, #32]	@ (800413c <HAL_RCC_ClockConfig+0x2d8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd f9b0 	bl	8001484 <HAL_InitTick>
  
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3778      	adds	r7, #120	@ 0x78
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	08004fe4 	.word	0x08004fe4
 8004138:	20000004 	.word	0x20000004
 800413c:	20000008 	.word	0x20000008

08004140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x98>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b04      	cmp	r3, #4
 8004168:	d002      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x30>
 800416a:	2b08      	cmp	r3, #8
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x36>
 800416e:	e029      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004170:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004172:	613b      	str	r3, [r7, #16]
      break;
 8004174:	e029      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	0c9b      	lsrs	r3, r3, #18
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004180:	5cd3      	ldrb	r3, [r2, r3]
 8004182:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004184:	4b14      	ldr	r3, [pc, #80]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	4a15      	ldr	r2, [pc, #84]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800418e:	5cd3      	ldrb	r3, [r2, r3]
 8004190:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800419c:	4a0f      	ldr	r2, [pc, #60]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x9c>)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e007      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041ae:	4a0b      	ldr	r2, [pc, #44]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x9c>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	613b      	str	r3, [r7, #16]
      break;
 80041c2:	e002      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x9c>)
 80041c6:	613b      	str	r3, [r7, #16]
      break;
 80041c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ca:	693b      	ldr	r3, [r7, #16]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40021000 	.word	0x40021000
 80041dc:	007a1200 	.word	0x007a1200
 80041e0:	08004ff4 	.word	0x08004ff4
 80041e4:	08005004 	.word	0x08005004

080041e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b092      	sub	sp, #72	@ 0x48
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80d2 	beq.w	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420c:	4b4d      	ldr	r3, [pc, #308]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10e      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	4b4a      	ldr	r3, [pc, #296]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a49      	ldr	r2, [pc, #292]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004222:	61d3      	str	r3, [r2, #28]
 8004224:	4b47      	ldr	r3, [pc, #284]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d118      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004242:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a40      	ldr	r2, [pc, #256]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424e:	f7fd f95d 	bl	800150c <HAL_GetTick>
 8004252:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	e008      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004256:	f7fd f959 	bl	800150c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b64      	cmp	r3, #100	@ 0x64
 8004262:	d901      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e1d4      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	4b37      	ldr	r3, [pc, #220]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004274:	4b33      	ldr	r3, [pc, #204]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800427e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8082 	beq.w	800438a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004290:	429a      	cmp	r2, r3
 8004292:	d07a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004294:	4b2b      	ldr	r3, [pc, #172]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b25      	ldr	r3, [pc, #148]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	461a      	mov	r2, r3
 80042be:	2301      	movs	r3, #1
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	4b1c      	ldr	r3, [pc, #112]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	461a      	mov	r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042e6:	4a17      	ldr	r2, [pc, #92]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d049      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fd f909 	bl	800150c <HAL_GetTick>
 80042fa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fd f905 	bl	800150c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e17e      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004314:	2302      	movs	r3, #2
 8004316:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004320:	2302      	movs	r3, #2
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	fa93 f3a3 	rbit	r3, r3
 800432a:	61fb      	str	r3, [r7, #28]
  return result;
 800432c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d108      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800433e:	4b01      	ldr	r3, [pc, #4]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	e00d      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
 800434c:	10908100 	.word	0x10908100
 8004350:	2302      	movs	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	4b9a      	ldr	r3, [pc, #616]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	2202      	movs	r2, #2
 8004362:	613a      	str	r2, [r7, #16]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	60fa      	str	r2, [r7, #12]
  return result;
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	f002 021f 	and.w	r2, r2, #31
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0b9      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800438a:	4b8f      	ldr	r3, [pc, #572]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	498c      	ldr	r1, [pc, #560]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800439c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a4:	4b88      	ldr	r3, [pc, #544]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	4a87      	ldr	r2, [pc, #540]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043bc:	4b82      	ldr	r3, [pc, #520]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	f023 0203 	bic.w	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	497f      	ldr	r1, [pc, #508]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043da:	4b7b      	ldr	r3, [pc, #492]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	4978      	ldr	r1, [pc, #480]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f8:	4b73      	ldr	r3, [pc, #460]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4970      	ldr	r1, [pc, #448]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004416:	4b6c      	ldr	r3, [pc, #432]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f023 0210 	bic.w	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4969      	ldr	r1, [pc, #420]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004434:	4b64      	ldr	r3, [pc, #400]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004440:	4961      	ldr	r1, [pc, #388]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004452:	4b5d      	ldr	r3, [pc, #372]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	f023 0220 	bic.w	r2, r3, #32
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	495a      	ldr	r1, [pc, #360]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004470:	4b55      	ldr	r3, [pc, #340]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	4952      	ldr	r1, [pc, #328]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447e:	4313      	orrs	r3, r2
 8004480:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800448e:	4b4e      	ldr	r3, [pc, #312]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	494b      	ldr	r1, [pc, #300]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449c:	4313      	orrs	r3, r2
 800449e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044ac:	4b46      	ldr	r3, [pc, #280]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	4943      	ldr	r1, [pc, #268]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044ca:	4b3f      	ldr	r3, [pc, #252]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	493c      	ldr	r1, [pc, #240]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044e8:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	4934      	ldr	r1, [pc, #208]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004506:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	492d      	ldr	r1, [pc, #180]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004514:	4313      	orrs	r3, r2
 8004516:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004524:	4b28      	ldr	r3, [pc, #160]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004530:	4925      	ldr	r1, [pc, #148]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004542:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	491e      	ldr	r1, [pc, #120]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004560:	4b19      	ldr	r3, [pc, #100]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	4916      	ldr	r1, [pc, #88]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800457e:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458a:	490f      	ldr	r1, [pc, #60]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a8:	4907      	ldr	r1, [pc, #28]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80045ba:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045be:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	e002      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ce:	4913      	ldr	r1, [pc, #76]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80045e0:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ec:	490b      	ldr	r1, [pc, #44]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80045fe:	4b07      	ldr	r3, [pc, #28]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460a:	4904      	ldr	r1, [pc, #16]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800460c:	4313      	orrs	r3, r2
 800460e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3748      	adds	r7, #72	@ 0x48
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000

08004620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e049      	b.n	80046c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fe46 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 fa9a 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d001      	beq.n	80046e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e04f      	b.n	8004788 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a23      	ldr	r2, [pc, #140]	@ (8004794 <HAL_TIM_Base_Start_IT+0xc4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004712:	d018      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <HAL_TIM_Base_Start_IT+0xc8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1e      	ldr	r2, [pc, #120]	@ (800479c <HAL_TIM_Base_Start_IT+0xcc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1b      	ldr	r2, [pc, #108]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0x76>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d115      	bne.n	8004772 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <HAL_TIM_Base_Start_IT+0xdc>)
 800474e:	4013      	ands	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d015      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0xb4>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475e:	d011      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	e008      	b.n	8004784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e000      	b.n	8004786 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40015000 	.word	0x40015000
 80047ac:	00010007 	.word	0x00010007

080047b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d020      	beq.n	8004814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01b      	beq.n	8004814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0202 	mvn.w	r2, #2
 80047e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9ad 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f99f 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f9b0 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d020      	beq.n	8004860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01b      	beq.n	8004860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0204 	mvn.w	r2, #4
 8004830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f987 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f979 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f98a 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d020      	beq.n	80048ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01b      	beq.n	80048ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0208 	mvn.w	r2, #8
 800487c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2204      	movs	r2, #4
 8004882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f961 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f953 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f964 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d020      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0210 	mvn.w	r2, #16
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2208      	movs	r2, #8
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f93b 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f92d 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f93e 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0201 	mvn.w	r2, #1
 8004914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fc f92e 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fb06 	bl	8004f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fafe 	bl	8004f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8fd 	bl	8004b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0220 	mvn.w	r2, #32
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fac6 	bl	8004f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_ConfigClockSource+0x1c>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0b6      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x18a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0c:	d03e      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0xd8>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a12:	f200 8087 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	f000 8086 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x176>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a22:	d87f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a24:	2b70      	cmp	r3, #112	@ 0x70
 8004a26:	d01a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xaa>
 8004a28:	2b70      	cmp	r3, #112	@ 0x70
 8004a2a:	d87b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a2c:	2b60      	cmp	r3, #96	@ 0x60
 8004a2e:	d050      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x11e>
 8004a30:	2b60      	cmp	r3, #96	@ 0x60
 8004a32:	d877      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a34:	2b50      	cmp	r3, #80	@ 0x50
 8004a36:	d03c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xfe>
 8004a38:	2b50      	cmp	r3, #80	@ 0x50
 8004a3a:	d873      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a3c:	2b40      	cmp	r3, #64	@ 0x40
 8004a3e:	d058      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x13e>
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d86f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a44:	2b30      	cmp	r3, #48	@ 0x30
 8004a46:	d064      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a48:	2b30      	cmp	r3, #48	@ 0x30
 8004a4a:	d86b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d060      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d867      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d05a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a5c:	e062      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	f000 f9b7 	bl	8004de0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e04f      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	f000 f9a0 	bl	8004de0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aae:	609a      	str	r2, [r3, #8]
      break;
 8004ab0:	e03c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 f914 	bl	8004cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2150      	movs	r1, #80	@ 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f96d 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e02c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 f933 	bl	8004d4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2160      	movs	r1, #96	@ 0x60
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f95d 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 8004af0:	e01c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 f8f4 	bl	8004cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	@ 0x40
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f94d 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 8004b10:	e00c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 f944 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 8004b22:	e003      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a48      	ldr	r2, [pc, #288]	@ (8004ccc <TIM_Base_SetConfig+0x134>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb6:	d00f      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a45      	ldr	r2, [pc, #276]	@ (8004cd0 <TIM_Base_SetConfig+0x138>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a44      	ldr	r2, [pc, #272]	@ (8004cd4 <TIM_Base_SetConfig+0x13c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a43      	ldr	r2, [pc, #268]	@ (8004cd8 <TIM_Base_SetConfig+0x140>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a42      	ldr	r2, [pc, #264]	@ (8004cdc <TIM_Base_SetConfig+0x144>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a37      	ldr	r2, [pc, #220]	@ (8004ccc <TIM_Base_SetConfig+0x134>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf8:	d01b      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a34      	ldr	r2, [pc, #208]	@ (8004cd0 <TIM_Base_SetConfig+0x138>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d017      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a33      	ldr	r2, [pc, #204]	@ (8004cd4 <TIM_Base_SetConfig+0x13c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a32      	ldr	r2, [pc, #200]	@ (8004cd8 <TIM_Base_SetConfig+0x140>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a32      	ldr	r2, [pc, #200]	@ (8004ce0 <TIM_Base_SetConfig+0x148>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ce4 <TIM_Base_SetConfig+0x14c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a30      	ldr	r2, [pc, #192]	@ (8004ce8 <TIM_Base_SetConfig+0x150>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004cdc <TIM_Base_SetConfig+0x144>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <TIM_Base_SetConfig+0x134>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a19      	ldr	r2, [pc, #100]	@ (8004cd8 <TIM_Base_SetConfig+0x140>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00f      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a19      	ldr	r2, [pc, #100]	@ (8004ce0 <TIM_Base_SetConfig+0x148>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <TIM_Base_SetConfig+0x14c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ce8 <TIM_Base_SetConfig+0x150>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a12      	ldr	r2, [pc, #72]	@ (8004cdc <TIM_Base_SetConfig+0x144>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d103      	bne.n	8004ca0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d105      	bne.n	8004cbe <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	611a      	str	r2, [r3, #16]
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40015000 	.word	0x40015000
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40014800 	.word	0x40014800

08004cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0201 	bic.w	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f023 030a 	bic.w	r3, r3, #10
 8004d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 0210 	bic.w	r2, r3, #16
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	031b      	lsls	r3, r3, #12
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f043 0307 	orr.w	r3, r3, #7
 8004dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e06d      	b.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	@ (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d009      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2f      	ldr	r2, [pc, #188]	@ (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1c      	ldr	r2, [pc, #112]	@ (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a11      	ldr	r2, [pc, #68]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10c      	bne.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40015000 	.word	0x40015000
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40014000 	.word	0x40014000

08004f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <memset>:
 8004f74:	4402      	add	r2, r0
 8004f76:	4603      	mov	r3, r0
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d100      	bne.n	8004f7e <memset+0xa>
 8004f7c:	4770      	bx	lr
 8004f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f82:	e7f9      	b.n	8004f78 <memset+0x4>

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	4d0d      	ldr	r5, [pc, #52]	@ (8004fbc <__libc_init_array+0x38>)
 8004f88:	4c0d      	ldr	r4, [pc, #52]	@ (8004fc0 <__libc_init_array+0x3c>)
 8004f8a:	1b64      	subs	r4, r4, r5
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	2600      	movs	r6, #0
 8004f90:	42a6      	cmp	r6, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	4d0b      	ldr	r5, [pc, #44]	@ (8004fc4 <__libc_init_array+0x40>)
 8004f96:	4c0c      	ldr	r4, [pc, #48]	@ (8004fc8 <__libc_init_array+0x44>)
 8004f98:	f000 f818 	bl	8004fcc <_init>
 8004f9c:	1b64      	subs	r4, r4, r5
 8004f9e:	10a4      	asrs	r4, r4, #2
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	42a6      	cmp	r6, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fac:	4798      	blx	r3
 8004fae:	3601      	adds	r6, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb6:	4798      	blx	r3
 8004fb8:	3601      	adds	r6, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	08005014 	.word	0x08005014
 8004fc0:	08005014 	.word	0x08005014
 8004fc4:	08005014 	.word	0x08005014
 8004fc8:	08005018 	.word	0x08005018

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr
