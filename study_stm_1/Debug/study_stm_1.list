
study_stm_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004794  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004958  08004958  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004958  08004958  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004958  08004958  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800495c  0800495c  0000595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004960  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000001fc  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1e6  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efa  00000000  00000000  00013226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00015120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d1  00000000  00000000  00015dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212b6  00000000  00000000  000167a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001059a  00000000  00000000  00037a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfb29  00000000  00000000  00047ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117b1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003530  00000000  00000000  00117b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0011b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004910 	.word	0x08004910

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004910 	.word	0x08004910

080001d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80001e4:	f040 813c 	bne.w	8000460 <HAL_TIM_PeriodElapsedCallback+0x28c>
		if (all % times == 0 && !flag_const){//прореживание в зависимости от периода сигнала, поступающего на ADC
 80001e8:	4bb8      	ldr	r3, [pc, #736]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4ab8      	ldr	r2, [pc, #736]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80001ee:	7812      	ldrb	r2, [r2, #0]
 80001f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80001f4:	fb01 f202 	mul.w	r2, r1, r2
 80001f8:	1a9b      	subs	r3, r3, r2
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	f040 80d6 	bne.w	80003ac <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8000200:	4bb4      	ldr	r3, [pc, #720]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	f040 80d1 	bne.w	80003ac <HAL_TIM_PeriodElapsedCallback+0x1d8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	2120      	movs	r1, #32
 800020e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000212:	f002 fa8d 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2140      	movs	r1, #64	@ 0x40
 800021a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021e:	f002 fa87 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2180      	movs	r1, #128	@ 0x80
 8000226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022a:	f002 fa81 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2140      	movs	r1, #64	@ 0x40
 8000232:	48a9      	ldr	r0, [pc, #676]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000234:	f002 fa7c 	bl	8002730 <HAL_GPIO_WritePin>
			switch(end_transmit){
 8000238:	4ba8      	ldr	r3, [pc, #672]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x308>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b04      	cmp	r3, #4
 800023e:	f200 810a 	bhi.w	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
 8000242:	a201      	add	r2, pc, #4	@ (adr r2, 8000248 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000248:	080003a9 	.word	0x080003a9
 800024c:	0800025d 	.word	0x0800025d
 8000250:	0800028d 	.word	0x0800028d
 8000254:	080002d5 	.word	0x080002d5
 8000258:	08000335 	.word	0x08000335
				case 0:
					break;
				case 1:
					if (k == 0){
 800025c:	4ba0      	ldr	r3, [pc, #640]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d109      	bne.n	8000278 <HAL_TIM_PeriodElapsedCallback+0xa4>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2120      	movs	r1, #32
 8000268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800026c:	f002 fa60 	bl	8002730 <HAL_GPIO_WritePin>
						k = 1;
 8000270:	4b9b      	ldr	r3, [pc, #620]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
					}
					else {
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
						k = 0;
					}
					break;
 8000276:	e098      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2120      	movs	r1, #32
 800027c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000280:	f002 fa56 	bl	8002730 <HAL_GPIO_WritePin>
						k = 0;
 8000284:	4b96      	ldr	r3, [pc, #600]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
					break;
 800028a:	e08e      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
				case 2:
					if (k == 0){
 800028c:	4b94      	ldr	r3, [pc, #592]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d10f      	bne.n	80002b4 <HAL_TIM_PeriodElapsedCallback+0xe0>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2120      	movs	r1, #32
 8000298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029c:	f002 fa48 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f002 fa42 	bl	8002730 <HAL_GPIO_WritePin>
						k = 1;
 80002ac:	4b8c      	ldr	r3, [pc, #560]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
					else {
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
						k = 0;
					}
					break;
 80002b2:	e07a      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2120      	movs	r1, #32
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f002 fa38 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2140      	movs	r1, #64	@ 0x40
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c8:	f002 fa32 	bl	8002730 <HAL_GPIO_WritePin>
						k = 0;
 80002cc:	4b84      	ldr	r3, [pc, #528]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
					break;
 80002d2:	e06a      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
				case 3:
					if (k == 0){
 80002d4:	4b82      	ldr	r3, [pc, #520]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d115      	bne.n	8000308 <HAL_TIM_PeriodElapsedCallback+0x134>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	2120      	movs	r1, #32
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e4:	f002 fa24 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	@ 0x40
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f0:	f002 fa1e 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2180      	movs	r1, #128	@ 0x80
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fc:	f002 fa18 	bl	8002730 <HAL_GPIO_WritePin>
						k = 1;
 8000300:	4b77      	ldr	r3, [pc, #476]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
						k = 0;
					}
					break;
 8000306:	e050      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2120      	movs	r1, #32
 800030c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000310:	f002 fa0e 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2140      	movs	r1, #64	@ 0x40
 8000318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031c:	f002 fa08 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2180      	movs	r1, #128	@ 0x80
 8000324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000328:	f002 fa02 	bl	8002730 <HAL_GPIO_WritePin>
						k = 0;
 800032c:	4b6c      	ldr	r3, [pc, #432]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
					break;
 8000332:	e03a      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
				case 4:
					if (k == 0){
 8000334:	4b6a      	ldr	r3, [pc, #424]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d11a      	bne.n	8000372 <HAL_TIM_PeriodElapsedCallback+0x19e>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f002 f9f4 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2140      	movs	r1, #64	@ 0x40
 800034c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000350:	f002 f9ee 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2180      	movs	r1, #128	@ 0x80
 8000358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035c:	f002 f9e8 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2140      	movs	r1, #64	@ 0x40
 8000364:	485c      	ldr	r0, [pc, #368]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000366:	f002 f9e3 	bl	8002730 <HAL_GPIO_WritePin>
						k = 1;
 800036a:	4b5d      	ldr	r3, [pc, #372]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
						k = 0;
					}
					break;
 8000370:	e01b      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2120      	movs	r1, #32
 8000376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037a:	f002 f9d9 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2140      	movs	r1, #64	@ 0x40
 8000382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000386:	f002 f9d3 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2180      	movs	r1, #128	@ 0x80
 800038e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000392:	f002 f9cd 	bl	8002730 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2140      	movs	r1, #64	@ 0x40
 800039a:	484f      	ldr	r0, [pc, #316]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800039c:	f002 f9c8 	bl	8002730 <HAL_GPIO_WritePin>
						k = 0;
 80003a0:	4b4f      	ldr	r3, [pc, #316]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
					break;
 80003a6:	e000      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
					break;
 80003a8:	bf00      	nop
			switch(end_transmit){
 80003aa:	e054      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
			}
		}
		else if (flag_const) {
 80003ac:	4b49      	ldr	r3, [pc, #292]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d050      	beq.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
			switch(end_transmit){
 80003b4:	4b49      	ldr	r3, [pc, #292]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x308>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	d84c      	bhi.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
 80003bc:	a201      	add	r2, pc, #4	@ (adr r2, 80003c4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	08000457 	.word	0x08000457
 80003c8:	080003d9 	.word	0x080003d9
 80003cc:	080003e7 	.word	0x080003e7
 80003d0:	08000401 	.word	0x08000401
 80003d4:	08000427 	.word	0x08000427
				case 0:
					break;
				case 1:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e0:	f002 f9a6 	bl	8002730 <HAL_GPIO_WritePin>
					break;
 80003e4:	e037      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
				case 2:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2120      	movs	r1, #32
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ee:	f002 f99f 	bl	8002730 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2140      	movs	r1, #64	@ 0x40
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003fa:	f002 f999 	bl	8002730 <HAL_GPIO_WritePin>
					break;
 80003fe:	e02a      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
				case 3:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000400:	2201      	movs	r2, #1
 8000402:	2120      	movs	r1, #32
 8000404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000408:	f002 f992 	bl	8002730 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2140      	movs	r1, #64	@ 0x40
 8000410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000414:	f002 f98c 	bl	8002730 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2180      	movs	r1, #128	@ 0x80
 800041c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000420:	f002 f986 	bl	8002730 <HAL_GPIO_WritePin>
					break;
 8000424:	e017      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
				case 4:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2120      	movs	r1, #32
 800042a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042e:	f002 f97f 	bl	8002730 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2140      	movs	r1, #64	@ 0x40
 8000436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043a:	f002 f979 	bl	8002730 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2180      	movs	r1, #128	@ 0x80
 8000442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000446:	f002 f973 	bl	8002730 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2140      	movs	r1, #64	@ 0x40
 800044e:	4822      	ldr	r0, [pc, #136]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000450:	f002 f96e 	bl	8002730 <HAL_GPIO_WritePin>
					break;
 8000454:	bf00      	nop
			}
		}
		all++;
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800045e:	6013      	str	r3, [r2, #0]
	}
	if (htim->Instance == TIM1){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1f      	ldr	r2, [pc, #124]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d12c      	bne.n	80004c4 <HAL_TIM_PeriodElapsedCallback+0x2f0>
		if (all_setup % setup_period == 0){
 800046a:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a1f      	ldr	r2, [pc, #124]	@ (80004ec <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000470:	7812      	ldrb	r2, [r2, #0]
 8000472:	fbb3 f1f2 	udiv	r1, r3, r2
 8000476:	fb01 f202 	mul.w	r2, r1, r2
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	2b00      	cmp	r3, #0
 800047e:	d11c      	bne.n	80004ba <HAL_TIM_PeriodElapsedCallback+0x2e6>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000480:	2100      	movs	r1, #0
 8000482:	481b      	ldr	r0, [pc, #108]	@ (80004f0 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000484:	f001 ff32 	bl	80022ec <HAL_DAC_Start>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000488:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	4817      	ldr	r0, [pc, #92]	@ (80004f0 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000492:	f001 ff06 	bl	80022a2 <HAL_DAC_SetValue>
			if (n == 0){	//производство переменного сигнала
 8000496:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d107      	bne.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x2da>
				dac_value = 3500;
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80004a0:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80004a4:	801a      	strh	r2, [r3, #0]
				n = 1;
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	e005      	b.n	80004ba <HAL_TIM_PeriodElapsedCallback+0x2e6>
			}
			else{
				dac_value = 0;
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	801a      	strh	r2, [r3, #0]
				n = 0;
 80004b4:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
			}
		}
		all_setup++;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	@ (80004e8 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3301      	adds	r3, #1
 80004c0:	4a09      	ldr	r2, [pc, #36]	@ (80004e8 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80004c2:	6013      	str	r3, [r2, #0]
	}
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000130 	.word	0x20000130
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000202 	.word	0x20000202
 80004d8:	48000400 	.word	0x48000400
 80004dc:	2000012c 	.word	0x2000012c
 80004e0:	2000012d 	.word	0x2000012d
 80004e4:	40012c00 	.word	0x40012c00
 80004e8:	20000204 	.word	0x20000204
 80004ec:	20000002 	.word	0x20000002
 80004f0:	2000007c 	.word	0x2000007c
 80004f4:	2000012a 	.word	0x2000012a
 80004f8:	2000012e 	.word	0x2000012e

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fc4b 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f8f1 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa8f 	bl	8000a2c <MX_GPIO_Init>
  MX_DAC1_Init();
 800050e:	f000 f9c1 	bl	8000894 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000512:	f000 f94f 	bl	80007b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000516:	f000 fa3b 	bl	8000990 <MX_TIM2_Init>
  MX_TIM1_Init();
 800051a:	f000 f9e5 	bl	80008e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800051e:	4866      	ldr	r0, [pc, #408]	@ (80006b8 <main+0x1bc>)
 8000520:	f003 fd78 	bl	8004014 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000524:	4865      	ldr	r0, [pc, #404]	@ (80006bc <main+0x1c0>)
 8000526:	f003 fd75 	bl	8004014 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
	  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
	  HAL_ADC_Start(&hadc1);
 800052a:	4865      	ldr	r0, [pc, #404]	@ (80006c0 <main+0x1c4>)
 800052c:	f000 feba 	bl	80012a4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000530:	2164      	movs	r1, #100	@ 0x64
 8000532:	4863      	ldr	r0, [pc, #396]	@ (80006c0 <main+0x1c4>)
 8000534:	f000 ffcc 	bl	80014d0 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000538:	4861      	ldr	r0, [pc, #388]	@ (80006c0 <main+0x1c4>)
 800053a:	f001 f8cb 	bl	80016d4 <HAL_ADC_GetValue>
 800053e:	4603      	mov	r3, r0
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b60      	ldr	r3, [pc, #384]	@ (80006c4 <main+0x1c8>)
 8000544:	801a      	strh	r2, [r3, #0]
	  adc_array[i] = adc_value;
 8000546:	4b60      	ldr	r3, [pc, #384]	@ (80006c8 <main+0x1cc>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	4b5d      	ldr	r3, [pc, #372]	@ (80006c4 <main+0x1c8>)
 800054e:	8819      	ldrh	r1, [r3, #0]
 8000550:	4b5e      	ldr	r3, [pc, #376]	@ (80006cc <main+0x1d0>)
 8000552:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  i++;
 8000556:	4b5c      	ldr	r3, [pc, #368]	@ (80006c8 <main+0x1cc>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b5a      	ldr	r3, [pc, #360]	@ (80006c8 <main+0x1cc>)
 8000560:	701a      	strb	r2, [r3, #0]
	  if (i == 100){//происходит анализ массива, полученного с DAC
 8000562:	4b59      	ldr	r3, [pc, #356]	@ (80006c8 <main+0x1cc>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b64      	cmp	r3, #100	@ 0x64
 8000568:	d16a      	bne.n	8000640 <main+0x144>
		  for (int j = 0; j < 99; j++ ){
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	e04b      	b.n	8000608 <main+0x10c>
			  if (adc_array[j] > max){	//поиск предельного напряжения
 8000570:	4a56      	ldr	r2, [pc, #344]	@ (80006cc <main+0x1d0>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000578:	4b55      	ldr	r3, [pc, #340]	@ (80006d0 <main+0x1d4>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d905      	bls.n	800058c <main+0x90>
				  max = adc_array[j];
 8000580:	4a52      	ldr	r2, [pc, #328]	@ (80006cc <main+0x1d0>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000588:	4b51      	ldr	r3, [pc, #324]	@ (80006d0 <main+0x1d4>)
 800058a:	801a      	strh	r2, [r3, #0]
			  }
			  if (adc_array[j] < 20 && m == 0 && adc_array[j-1] > 20){	//проверка на наличие спада
 800058c:	4a4f      	ldr	r2, [pc, #316]	@ (80006cc <main+0x1d0>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000594:	2b13      	cmp	r3, #19
 8000596:	d815      	bhi.n	80005c4 <main+0xc8>
 8000598:	4b4e      	ldr	r3, [pc, #312]	@ (80006d4 <main+0x1d8>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d111      	bne.n	80005c4 <main+0xc8>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	4a49      	ldr	r2, [pc, #292]	@ (80006cc <main+0x1d0>)
 80005a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005aa:	2b14      	cmp	r3, #20
 80005ac:	d90a      	bls.n	80005c4 <main+0xc8>
				  m++;
 80005ae:	4b49      	ldr	r3, [pc, #292]	@ (80006d4 <main+0x1d8>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b47      	ldr	r3, [pc, #284]	@ (80006d4 <main+0x1d8>)
 80005b8:	701a      	strb	r2, [r3, #0]
				  period = j;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b46      	ldr	r3, [pc, #280]	@ (80006d8 <main+0x1dc>)
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	e01e      	b.n	8000602 <main+0x106>
			  }
			  else if(adc_array[j] > 20 && m == 1 && adc_array[j-1] < 20){ //проверка на наличиие подъема
 80005c4:	4a41      	ldr	r2, [pc, #260]	@ (80006cc <main+0x1d0>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005cc:	2b14      	cmp	r3, #20
 80005ce:	d918      	bls.n	8000602 <main+0x106>
 80005d0:	4b40      	ldr	r3, [pc, #256]	@ (80006d4 <main+0x1d8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d114      	bne.n	8000602 <main+0x106>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3b01      	subs	r3, #1
 80005dc:	4a3b      	ldr	r2, [pc, #236]	@ (80006cc <main+0x1d0>)
 80005de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e2:	2b13      	cmp	r3, #19
 80005e4:	d80d      	bhi.n	8000602 <main+0x106>
				  m ++;	//благодаря этой переменной период вычисляется лишь раз
 80005e6:	4b3b      	ldr	r3, [pc, #236]	@ (80006d4 <main+0x1d8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b39      	ldr	r3, [pc, #228]	@ (80006d4 <main+0x1d8>)
 80005f0:	701a      	strb	r2, [r3, #0]
				  period = j - period;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b38      	ldr	r3, [pc, #224]	@ (80006d8 <main+0x1dc>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b36      	ldr	r3, [pc, #216]	@ (80006d8 <main+0x1dc>)
 8000600:	701a      	strb	r2, [r3, #0]
		  for (int j = 0; j < 99; j++ ){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3301      	adds	r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b62      	cmp	r3, #98	@ 0x62
 800060c:	ddb0      	ble.n	8000570 <main+0x74>

			  }

		  }
		  if (m == 1 || m == 0) flag_const = 1;	//проверка того, что сигнал имеет период
 800060e:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <main+0x1d8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d003      	beq.n	800061e <main+0x122>
 8000616:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <main+0x1d8>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <main+0x128>
 800061e:	4b2f      	ldr	r3, [pc, #188]	@ (80006dc <main+0x1e0>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
		  m = 0;
 8000624:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <main+0x1d8>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
		  amplitude = max;
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <main+0x1d4>)
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <main+0x1e4>)
 8000630:	801a      	strh	r2, [r3, #0]
		  times = period;
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <main+0x1dc>)
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <main+0x1e8>)
 8000638:	701a      	strb	r2, [r3, #0]
		  i = 0;
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <main+0x1cc>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	  }
	  //snprintf(trans_str, 63, "ADC %d\n", adc_value);
	  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)trans_str, strlen(trans_str));
	  //end_transmit = 0;
	  if (amplitude > 0 && amplitude <= 1000) end_transmit = 1;
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <main+0x1e4>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <main+0x15e>
 8000648:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <main+0x1e4>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000650:	d803      	bhi.n	800065a <main+0x15e>
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <main+0x1ec>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	e02a      	b.n	80006b0 <main+0x1b4>
	  else if (amplitude > 1000 && amplitude <= 2000) end_transmit = 2;
 800065a:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <main+0x1e4>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000662:	d908      	bls.n	8000676 <main+0x17a>
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <main+0x1e4>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800066c:	d803      	bhi.n	8000676 <main+0x17a>
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <main+0x1ec>)
 8000670:	2202      	movs	r2, #2
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e01c      	b.n	80006b0 <main+0x1b4>
	  else if (amplitude > 2000 && amplitude <= 3000) end_transmit = 3;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <main+0x1e4>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800067e:	d909      	bls.n	8000694 <main+0x198>
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <main+0x1e4>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000688:	4293      	cmp	r3, r2
 800068a:	d803      	bhi.n	8000694 <main+0x198>
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <main+0x1ec>)
 800068e:	2203      	movs	r2, #3
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e00d      	b.n	80006b0 <main+0x1b4>
	  else if (amplitude > 3000 && amplitude <= 4000) end_transmit = 4;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <main+0x1e4>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800069c:	4293      	cmp	r3, r2
 800069e:	d907      	bls.n	80006b0 <main+0x1b4>
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <main+0x1e4>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80006a8:	d802      	bhi.n	80006b0 <main+0x1b4>
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <main+0x1ec>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f000 fbd9 	bl	8000e68 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80006b6:	e738      	b.n	800052a <main+0x2e>
 80006b8:	200000dc 	.word	0x200000dc
 80006bc:	20000090 	.word	0x20000090
 80006c0:	2000002c 	.word	0x2000002c
 80006c4:	20000128 	.word	0x20000128
 80006c8:	200001fc 	.word	0x200001fc
 80006cc:	20000134 	.word	0x20000134
 80006d0:	20000200 	.word	0x20000200
 80006d4:	200001fd 	.word	0x200001fd
 80006d8:	20000001 	.word	0x20000001
 80006dc:	20000202 	.word	0x20000202
 80006e0:	200001fe 	.word	0x200001fe
 80006e4:	20000000 	.word	0x20000000
 80006e8:	2000012c 	.word	0x2000012c

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0a6      	sub	sp, #152	@ 0x98
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006f6:	2228      	movs	r2, #40	@ 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 f8dc 	bl	80048b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2258      	movs	r2, #88	@ 0x58
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 f8ce 	bl	80048b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000748:	4618      	mov	r0, r3
 800074a:	f002 f809 	bl	8002760 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000754:	f000 f9be 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 f818 	bl	80037a8 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077e:	f000 f9a9 	bl	8000ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <SystemClock_Config+0xc4>)
 8000784:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV2;
 8000786:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000790:	2300      	movs	r3, #0
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f9c8 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007a2:	f000 f997 	bl	8000ad4 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3798      	adds	r7, #152	@ 0x98
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	00101080 	.word	0x00101080

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_ADC1_Init+0xdc>)
 80007d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007de:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_ADC1_Init+0xdc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <MX_ADC1_Init+0xdc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_ADC1_Init+0xdc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <MX_ADC1_Init+0xdc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_ADC1_Init+0xdc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000806:	2201      	movs	r2, #1
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_ADC1_Init+0xdc>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000812:	2201      	movs	r2, #1
 8000814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000820:	2204      	movs	r2, #4
 8000822:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_ADC1_Init+0xdc>)
 800082c:	2200      	movs	r2, #0
 800082e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	4817      	ldr	r0, [pc, #92]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000832:	f000 fb3d 	bl	8000eb0 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f94a 	bl	8000ad4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_ADC1_Init+0xdc>)
 800084c:	f001 fa3a 	bl	8001cc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000856:	f000 f93d 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2301      	movs	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000866:	2304      	movs	r3, #4
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000878:	f000 ff3a 	bl	80016f0 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000882:	f000 f927 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000002c 	.word	0x2000002c

08000894 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_DAC1_Init+0x4c>)
 80008a6:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <MX_DAC1_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008aa:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <MX_DAC1_Init+0x4c>)
 80008ac:	f001 fcd7 	bl	800225e <HAL_DAC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80008b6:	f000 f90d 	bl	8000ad4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_DAC1_Init+0x4c>)
 80008ca:	f001 fd5a 	bl	8002382 <HAL_DAC_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80008d4:	f000 f8fe 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000007c 	.word	0x2000007c
 80008e4:	40007400 	.word	0x40007400

080008e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <MX_TIM1_Init+0xa0>)
 8000908:	4a20      	ldr	r2, [pc, #128]	@ (800098c <MX_TIM1_Init+0xa4>)
 800090a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_TIM1_Init+0xa0>)
 800090e:	2223      	movs	r2, #35	@ 0x23
 8000910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <MX_TIM1_Init+0xa0>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_TIM1_Init+0xa0>)
 800091a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800091e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <MX_TIM1_Init+0xa0>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_TIM1_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_TIM1_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000932:	4815      	ldr	r0, [pc, #84]	@ (8000988 <MX_TIM1_Init+0xa0>)
 8000934:	f003 fb16 	bl	8003f64 <HAL_TIM_Base_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800093e:	f000 f8c9 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	480e      	ldr	r0, [pc, #56]	@ (8000988 <MX_TIM1_Init+0xa0>)
 8000950:	f003 fcd2 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800095a:	f000 f8bb 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <MX_TIM1_Init+0xa0>)
 8000970:	f003 fef8 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800097a:	f000 f8ab 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000090 	.word	0x20000090
 800098c:	40012c00 	.word	0x40012c00

08000990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009b8:	2248      	movs	r2, #72	@ 0x48
 80009ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009c4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80009c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d6:	4814      	ldr	r0, [pc, #80]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009d8:	f003 fac4 	bl	8003f64 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009e2:	f000 f877 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_TIM2_Init+0x98>)
 80009f4:	f003 fc80 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009fe:	f000 f869 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_TIM2_Init+0x98>)
 8000a10:	f003 fea8 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a1a:	f000 f85b 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000dc 	.word	0x200000dc

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <MX_GPIO_Init+0xa0>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <MX_GPIO_Init+0xa0>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <MX_GPIO_Init+0xa0>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <MX_GPIO_Init+0xa0>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000acc <MX_GPIO_Init+0xa0>)
 8000a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <MX_GPIO_Init+0xa0>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	21e4      	movs	r1, #228	@ 0xe4
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f001 fe59 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2140      	movs	r1, #64	@ 0x40
 8000a82:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <MX_GPIO_Init+0xa4>)
 8000a84:	f001 fe54 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a88:	23e4      	movs	r3, #228	@ 0xe4
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f001 fcbb 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa6:	2340      	movs	r3, #64	@ 0x40
 8000aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_GPIO_Init+0xa4>)
 8000abe:	f001 fcad 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <HAL_MspInit+0x44>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b48:	d124      	bne.n	8000b94 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b90:	f001 fc44 	bl	800241c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a15      	ldr	r2, [pc, #84]	@ (8000c14 <HAL_DAC_MspInit+0x74>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d124      	bne.n	8000c0c <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_DAC_MspInit+0x78>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <HAL_DAC_MspInit+0x78>)
 8000bc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_DAC_MspInit+0x78>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <HAL_DAC_MspInit+0x78>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <HAL_DAC_MspInit+0x78>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_DAC_MspInit+0x78>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f001 fc08 	bl	800241c <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	@ 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40007400 	.word	0x40007400
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1a      	ldr	r2, [pc, #104]	@ (8000c94 <HAL_TIM_Base_MspInit+0x78>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d114      	bne.n	8000c58 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f001 fad1 	bl	80021f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c50:	2019      	movs	r0, #25
 8000c52:	f001 faea 	bl	800222a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c56:	e018      	b.n	8000c8a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c60:	d113      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a0c      	ldr	r2, [pc, #48]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f001 fab7 	bl	80021f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c84:	201c      	movs	r0, #28
 8000c86:	f001 fad0 	bl	800222a <HAL_NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40012c00 	.word	0x40012c00
 8000c98:	40021000 	.word	0x40021000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f000 f899 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d02:	f003 f9f7 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000090 	.word	0x20000090

08000d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <TIM2_IRQHandler+0x10>)
 8000d16:	f003 f9ed 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000dc 	.word	0x200000dc

08000d24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d80 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d4c:	f7ff ffea 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f003 fda7 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d7a:	f7ff fbbf 	bl	80004fc <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d8c:	08004960 	.word	0x08004960
  ldr r2, =_sbss
 8000d90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d94:	2000020c 	.word	0x2000020c

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_Init+0x28>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_Init+0x28>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f001 fa15 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe92 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fa2d 	bl	8002246 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f001 f9f5 	bl	80021f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000208 	.word	0x20000208

08000e50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000208 	.word	0x20000208

08000e68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000000c 	.word	0x2000000c

08000eb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09a      	sub	sp, #104	@ 0x68
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e1e3      	b.n	8001298 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d176      	bne.n	8000fd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d152      	bne.n	8000f90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fe0f 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d13b      	bne.n	8000f90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f001 f829 	bl	8001f70 <ADC_Disable>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d12f      	bne.n	8000f90 <HAL_ADC_Init+0xe0>
 8000f30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d12b      	bne.n	8000f90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f40:	f023 0302 	bic.w	r3, r3, #2
 8000f44:	f043 0202 	orr.w	r2, r3, #2
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6c:	4b92      	ldr	r3, [pc, #584]	@ (80011b8 <HAL_ADC_Init+0x308>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a92      	ldr	r2, [pc, #584]	@ (80011bc <HAL_ADC_Init+0x30c>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9a      	lsrs	r2, r3, #18
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f82:	e002      	b.n	8000f8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f9      	bne.n	8000f84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fac:	d110      	bne.n	8000fd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f023 0312 	bic.w	r3, r3, #18
 8000fb6:	f043 0210 	orr.w	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f043 0201 	orr.w	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f040 8150 	bne.w	800127e <HAL_ADC_Init+0x3ce>
 8000fde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 814b 	bne.w	800127e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 8143 	bne.w	800127e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001000:	f043 0202 	orr.w	r2, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d004      	beq.n	800101c <HAL_ADC_Init+0x16c>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6a      	ldr	r2, [pc, #424]	@ (80011c0 <HAL_ADC_Init+0x310>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d101      	bne.n	8001020 <HAL_ADC_Init+0x170>
 800101c:	4b69      	ldr	r3, [pc, #420]	@ (80011c4 <HAL_ADC_Init+0x314>)
 800101e:	e000      	b.n	8001022 <HAL_ADC_Init+0x172>
 8001020:	4b69      	ldr	r3, [pc, #420]	@ (80011c8 <HAL_ADC_Init+0x318>)
 8001022:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800102c:	d102      	bne.n	8001034 <HAL_ADC_Init+0x184>
 800102e:	4b64      	ldr	r3, [pc, #400]	@ (80011c0 <HAL_ADC_Init+0x310>)
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e01a      	b.n	800106a <HAL_ADC_Init+0x1ba>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a61      	ldr	r2, [pc, #388]	@ (80011c0 <HAL_ADC_Init+0x310>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d103      	bne.n	8001046 <HAL_ADC_Init+0x196>
 800103e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e011      	b.n	800106a <HAL_ADC_Init+0x1ba>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a60      	ldr	r2, [pc, #384]	@ (80011cc <HAL_ADC_Init+0x31c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d102      	bne.n	8001056 <HAL_ADC_Init+0x1a6>
 8001050:	4b5f      	ldr	r3, [pc, #380]	@ (80011d0 <HAL_ADC_Init+0x320>)
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e009      	b.n	800106a <HAL_ADC_Init+0x1ba>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a5d      	ldr	r2, [pc, #372]	@ (80011d0 <HAL_ADC_Init+0x320>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d102      	bne.n	8001066 <HAL_ADC_Init+0x1b6>
 8001060:	4b5a      	ldr	r3, [pc, #360]	@ (80011cc <HAL_ADC_Init+0x31c>)
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e001      	b.n	800106a <HAL_ADC_Init+0x1ba>
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d108      	bne.n	800108a <HAL_ADC_Init+0x1da>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_ADC_Init+0x1da>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_ADC_Init+0x1dc>
 800108a:	2300      	movs	r3, #0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11c      	bne.n	80010ca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001090:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001092:	2b00      	cmp	r3, #0
 8001094:	d010      	beq.n	80010b8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <HAL_ADC_Init+0x202>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Init+0x202>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_ADC_Init+0x204>
 80010b2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d108      	bne.n	80010ca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010c8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7e5b      	ldrb	r3, [r3, #25]
 80010ce:	035b      	lsls	r3, r3, #13
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80010d4:	2a01      	cmp	r2, #1
 80010d6:	d002      	beq.n	80010de <HAL_ADC_Init+0x22e>
 80010d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010dc:	e000      	b.n	80010e0 <HAL_ADC_Init+0x230>
 80010de:	2200      	movs	r2, #0
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010f0:	4313      	orrs	r3, r2
 80010f2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d11b      	bne.n	8001136 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7e5b      	ldrb	r3, [r3, #25]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110a:	3b01      	subs	r3, #1
 800110c:	045a      	lsls	r2, r3, #17
 800110e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001110:	4313      	orrs	r3, r2
 8001112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001116:	663b      	str	r3, [r7, #96]	@ 0x60
 8001118:	e00d      	b.n	8001136 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001122:	f043 0220 	orr.w	r2, r3, #32
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113a:	2b01      	cmp	r3, #1
 800113c:	d054      	beq.n	80011e8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a22      	ldr	r2, [pc, #136]	@ (80011cc <HAL_ADC_Init+0x31c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d004      	beq.n	8001152 <HAL_ADC_Init+0x2a2>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <HAL_ADC_Init+0x320>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d140      	bne.n	80011d4 <HAL_ADC_Init+0x324>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001156:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800115a:	d02a      	beq.n	80011b2 <HAL_ADC_Init+0x302>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001164:	d022      	beq.n	80011ac <HAL_ADC_Init+0x2fc>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800116e:	d01a      	beq.n	80011a6 <HAL_ADC_Init+0x2f6>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001178:	d012      	beq.n	80011a0 <HAL_ADC_Init+0x2f0>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001182:	d00a      	beq.n	800119a <HAL_ADC_Init+0x2ea>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001188:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 800118c:	d002      	beq.n	8001194 <HAL_ADC_Init+0x2e4>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	e023      	b.n	80011dc <HAL_ADC_Init+0x32c>
 8001194:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001198:	e020      	b.n	80011dc <HAL_ADC_Init+0x32c>
 800119a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800119e:	e01d      	b.n	80011dc <HAL_ADC_Init+0x32c>
 80011a0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011a4:	e01a      	b.n	80011dc <HAL_ADC_Init+0x32c>
 80011a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011aa:	e017      	b.n	80011dc <HAL_ADC_Init+0x32c>
 80011ac:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80011b0:	e014      	b.n	80011dc <HAL_ADC_Init+0x32c>
 80011b2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80011b6:	e011      	b.n	80011dc <HAL_ADC_Init+0x32c>
 80011b8:	20000004 	.word	0x20000004
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	50000100 	.word	0x50000100
 80011c4:	50000300 	.word	0x50000300
 80011c8:	50000700 	.word	0x50000700
 80011cc:	50000400 	.word	0x50000400
 80011d0:	50000500 	.word	0x50000500
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011e0:	4313      	orrs	r3, r2
 80011e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011e4:	4313      	orrs	r3, r2
 80011e6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d114      	bne.n	8001220 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001204:	f023 0302 	bic.w	r3, r3, #2
 8001208:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7e1b      	ldrb	r3, [r3, #24]
 800120e:	039a      	lsls	r2, r3, #14
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4313      	orrs	r3, r2
 800121a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800121c:	4313      	orrs	r3, r2
 800121e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <HAL_ADC_Init+0x3f0>)
 8001228:	4013      	ands	r3, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001230:	430b      	orrs	r3, r1
 8001232:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10c      	bne.n	8001256 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f023 010f 	bic.w	r1, r3, #15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	631a      	str	r2, [r3, #48]	@ 0x30
 8001254:	e007      	b.n	8001266 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 020f 	bic.w	r2, r2, #15
 8001264:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f023 0303 	bic.w	r3, r3, #3
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40
 800127c:	e00a      	b.n	8001294 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f023 0312 	bic.w	r3, r3, #18
 8001286:	f043 0210 	orr.w	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800128e:	2301      	movs	r3, #1
 8001290:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001294:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001298:	4618      	mov	r0, r3
 800129a:	3768      	adds	r7, #104	@ 0x68
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	fff0c007 	.word	0xfff0c007

080012a4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 80f9 	bne.w	80014b2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Start+0x2a>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e0f4      	b.n	80014b8 <HAL_ADC_Start+0x214>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fde6 	bl	8001ea8 <ADC_Enable>
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 80e0 	bne.w	80014a8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001304:	d004      	beq.n	8001310 <HAL_ADC_Start+0x6c>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6d      	ldr	r2, [pc, #436]	@ (80014c0 <HAL_ADC_Start+0x21c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d106      	bne.n	800131e <HAL_ADC_Start+0x7a>
 8001310:	4b6c      	ldr	r3, [pc, #432]	@ (80014c4 <HAL_ADC_Start+0x220>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	2b00      	cmp	r3, #0
 800131a:	d010      	beq.n	800133e <HAL_ADC_Start+0x9a>
 800131c:	e005      	b.n	800132a <HAL_ADC_Start+0x86>
 800131e:	4b6a      	ldr	r3, [pc, #424]	@ (80014c8 <HAL_ADC_Start+0x224>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2b00      	cmp	r3, #0
 8001328:	d009      	beq.n	800133e <HAL_ADC_Start+0x9a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001332:	d004      	beq.n	800133e <HAL_ADC_Start+0x9a>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a64      	ldr	r2, [pc, #400]	@ (80014cc <HAL_ADC_Start+0x228>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d115      	bne.n	800136a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d036      	beq.n	80013c6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001360:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001368:	e02d      	b.n	80013c6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800137e:	d004      	beq.n	800138a <HAL_ADC_Start+0xe6>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a4e      	ldr	r2, [pc, #312]	@ (80014c0 <HAL_ADC_Start+0x21c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10a      	bne.n	80013a0 <HAL_ADC_Start+0xfc>
 800138a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf14      	ite	ne
 8001398:	2301      	movne	r3, #1
 800139a:	2300      	moveq	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	e008      	b.n	80013b2 <HAL_ADC_Start+0x10e>
 80013a0:	4b4a      	ldr	r3, [pc, #296]	@ (80014cc <HAL_ADC_Start+0x228>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013d2:	d106      	bne.n	80013e2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	f023 0206 	bic.w	r2, r3, #6
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	221c      	movs	r2, #28
 80013f6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001400:	d004      	beq.n	800140c <HAL_ADC_Start+0x168>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <HAL_ADC_Start+0x21c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d106      	bne.n	800141a <HAL_ADC_Start+0x176>
 800140c:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <HAL_ADC_Start+0x220>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2b00      	cmp	r3, #0
 8001416:	d03e      	beq.n	8001496 <HAL_ADC_Start+0x1f2>
 8001418:	e005      	b.n	8001426 <HAL_ADC_Start+0x182>
 800141a:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_ADC_Start+0x224>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d037      	beq.n	8001496 <HAL_ADC_Start+0x1f2>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800142e:	d004      	beq.n	800143a <HAL_ADC_Start+0x196>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <HAL_ADC_Start+0x21c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d106      	bne.n	8001448 <HAL_ADC_Start+0x1a4>
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <HAL_ADC_Start+0x220>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2b05      	cmp	r3, #5
 8001444:	d027      	beq.n	8001496 <HAL_ADC_Start+0x1f2>
 8001446:	e005      	b.n	8001454 <HAL_ADC_Start+0x1b0>
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <HAL_ADC_Start+0x224>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2b05      	cmp	r3, #5
 8001452:	d020      	beq.n	8001496 <HAL_ADC_Start+0x1f2>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800145c:	d004      	beq.n	8001468 <HAL_ADC_Start+0x1c4>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <HAL_ADC_Start+0x21c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d106      	bne.n	8001476 <HAL_ADC_Start+0x1d2>
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <HAL_ADC_Start+0x220>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2b09      	cmp	r3, #9
 8001472:	d010      	beq.n	8001496 <HAL_ADC_Start+0x1f2>
 8001474:	e005      	b.n	8001482 <HAL_ADC_Start+0x1de>
 8001476:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <HAL_ADC_Start+0x224>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	2b09      	cmp	r3, #9
 8001480:	d009      	beq.n	8001496 <HAL_ADC_Start+0x1f2>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800148a:	d004      	beq.n	8001496 <HAL_ADC_Start+0x1f2>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0e      	ldr	r2, [pc, #56]	@ (80014cc <HAL_ADC_Start+0x228>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10f      	bne.n	80014b6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0204 	orr.w	r2, r2, #4
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	e006      	b.n	80014b6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80014b0:	e001      	b.n	80014b6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014b2:	2302      	movs	r3, #2
 80014b4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	50000100 	.word	0x50000100
 80014c4:	50000300 	.word	0x50000300
 80014c8:	50000700 	.word	0x50000700
 80014cc:	50000400 	.word	0x50000400

080014d0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d102      	bne.n	80014ec <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80014e6:	2308      	movs	r3, #8
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e03a      	b.n	8001562 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f4:	d004      	beq.n	8001500 <HAL_ADC_PollForConversion+0x30>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a72      	ldr	r2, [pc, #456]	@ (80016c4 <HAL_ADC_PollForConversion+0x1f4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_PollForConversion+0x34>
 8001500:	4b71      	ldr	r3, [pc, #452]	@ (80016c8 <HAL_ADC_PollForConversion+0x1f8>)
 8001502:	e000      	b.n	8001506 <HAL_ADC_PollForConversion+0x36>
 8001504:	4b71      	ldr	r3, [pc, #452]	@ (80016cc <HAL_ADC_PollForConversion+0x1fc>)
 8001506:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	2b00      	cmp	r3, #0
 8001512:	d112      	bne.n	800153a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d11d      	bne.n	800155e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0bf      	b.n	80016ba <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f043 0220 	orr.w	r2, r3, #32
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0ad      	b.n	80016ba <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800155e:	230c      	movs	r3, #12
 8001560:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800156a:	d004      	beq.n	8001576 <HAL_ADC_PollForConversion+0xa6>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a54      	ldr	r2, [pc, #336]	@ (80016c4 <HAL_ADC_PollForConversion+0x1f4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d106      	bne.n	8001584 <HAL_ADC_PollForConversion+0xb4>
 8001576:	4b54      	ldr	r3, [pc, #336]	@ (80016c8 <HAL_ADC_PollForConversion+0x1f8>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2b00      	cmp	r3, #0
 8001580:	d010      	beq.n	80015a4 <HAL_ADC_PollForConversion+0xd4>
 8001582:	e005      	b.n	8001590 <HAL_ADC_PollForConversion+0xc0>
 8001584:	4b51      	ldr	r3, [pc, #324]	@ (80016cc <HAL_ADC_PollForConversion+0x1fc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <HAL_ADC_PollForConversion+0xd4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001598:	d004      	beq.n	80015a4 <HAL_ADC_PollForConversion+0xd4>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a4c      	ldr	r2, [pc, #304]	@ (80016d0 <HAL_ADC_PollForConversion+0x200>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d104      	bne.n	80015ae <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e00f      	b.n	80015ce <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b6:	d004      	beq.n	80015c2 <HAL_ADC_PollForConversion+0xf2>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a41      	ldr	r2, [pc, #260]	@ (80016c4 <HAL_ADC_PollForConversion+0x1f4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d102      	bne.n	80015c8 <HAL_ADC_PollForConversion+0xf8>
 80015c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015c6:	e000      	b.n	80015ca <HAL_ADC_PollForConversion+0xfa>
 80015c8:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <HAL_ADC_PollForConversion+0x200>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80015ce:	f7ff fc3f 	bl	8000e50 <HAL_GetTick>
 80015d2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015d4:	e021      	b.n	800161a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d01d      	beq.n	800161a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_ADC_PollForConversion+0x124>
 80015e4:	f7ff fc34 	bl	8000e50 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d212      	bcs.n	800161a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10b      	bne.n	800161a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f043 0204 	orr.w	r2, r3, #4
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e04f      	b.n	80016ba <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0d6      	beq.n	80015d6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800163e:	2b00      	cmp	r3, #0
 8001640:	d131      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001648:	2b00      	cmp	r3, #0
 800164a:	d12c      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b08      	cmp	r3, #8
 8001658:	d125      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d112      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	@ 0x40
 800168c:	e00b      	b.n	80016a6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f043 0220 	orr.w	r2, r3, #32
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	50000100 	.word	0x50000100
 80016c8:	50000300 	.word	0x50000300
 80016cc:	50000700 	.word	0x50000700
 80016d0:	50000400 	.word	0x50000400

080016d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b09b      	sub	sp, #108	@ 0x6c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x22>
 800170e:	2302      	movs	r3, #2
 8001710:	e2c8      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x5b4>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	f040 82ac 	bne.w	8001c82 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b04      	cmp	r3, #4
 8001730:	d81c      	bhi.n	800176c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	461a      	mov	r2, r3
 8001746:	231f      	movs	r3, #31
 8001748:	4093      	lsls	r3, r2
 800174a:	43db      	mvns	r3, r3
 800174c:	4019      	ands	r1, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa00 f203 	lsl.w	r2, r0, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	631a      	str	r2, [r3, #48]	@ 0x30
 800176a:	e063      	b.n	8001834 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b09      	cmp	r3, #9
 8001772:	d81e      	bhi.n	80017b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	3b1e      	subs	r3, #30
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	4019      	ands	r1, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	3b1e      	subs	r3, #30
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80017b0:	e040      	b.n	8001834 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b0e      	cmp	r3, #14
 80017b8:	d81e      	bhi.n	80017f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	3b3c      	subs	r3, #60	@ 0x3c
 80017ce:	221f      	movs	r2, #31
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4019      	ands	r1, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	3b3c      	subs	r3, #60	@ 0x3c
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017f6:	e01d      	b.n	8001834 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	3b5a      	subs	r3, #90	@ 0x5a
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4019      	ands	r1, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	3b5a      	subs	r3, #90	@ 0x5a
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80e5 	bne.w	8001a0e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b09      	cmp	r3, #9
 800184a:	d91c      	bls.n	8001886 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6999      	ldr	r1, [r3, #24]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	3b1e      	subs	r3, #30
 800185e:	2207      	movs	r2, #7
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	4019      	ands	r1, r3
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	6898      	ldr	r0, [r3, #8]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	3b1e      	subs	r3, #30
 8001878:	fa00 f203 	lsl.w	r2, r0, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	619a      	str	r2, [r3, #24]
 8001884:	e019      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6959      	ldr	r1, [r3, #20]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	2207      	movs	r2, #7
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	4019      	ands	r1, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6898      	ldr	r0, [r3, #8]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	fa00 f203 	lsl.w	r2, r0, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d84f      	bhi.n	800197c <HAL_ADC_ConfigChannel+0x28c>
 80018dc:	a201      	add	r2, pc, #4	@ (adr r2, 80018e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018f5 	.word	0x080018f5
 80018e8:	08001917 	.word	0x08001917
 80018ec:	08001939 	.word	0x08001939
 80018f0:	0800195b 	.word	0x0800195b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018fa:	4b99      	ldr	r3, [pc, #612]	@ (8001b60 <HAL_ADC_ConfigChannel+0x470>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	0691      	lsls	r1, r2, #26
 8001904:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001906:	430a      	orrs	r2, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001912:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001914:	e07b      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800191c:	4b90      	ldr	r3, [pc, #576]	@ (8001b60 <HAL_ADC_ConfigChannel+0x470>)
 800191e:	4013      	ands	r3, r2
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	0691      	lsls	r1, r2, #26
 8001926:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001928:	430a      	orrs	r2, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001934:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001936:	e06a      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800193e:	4b88      	ldr	r3, [pc, #544]	@ (8001b60 <HAL_ADC_ConfigChannel+0x470>)
 8001940:	4013      	ands	r3, r2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	0691      	lsls	r1, r2, #26
 8001948:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800194a:	430a      	orrs	r2, r1
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001956:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001958:	e059      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001960:	4b7f      	ldr	r3, [pc, #508]	@ (8001b60 <HAL_ADC_ConfigChannel+0x470>)
 8001962:	4013      	ands	r3, r2
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	0691      	lsls	r1, r2, #26
 800196a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800196c:	430a      	orrs	r2, r1
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001978:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800197a:	e048      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	069b      	lsls	r3, r3, #26
 800198c:	429a      	cmp	r2, r3
 800198e:	d107      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800199e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	069b      	lsls	r3, r3, #26
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d107      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80019c2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	069b      	lsls	r3, r3, #26
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d107      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80019e6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	069b      	lsls	r3, r3, #26
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d107      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001a0c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d108      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x33e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x33e>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x340>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 8131 	bne.w	8001c98 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d00f      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43da      	mvns	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	400a      	ands	r2, r1
 8001a58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001a5c:	e049      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d91c      	bls.n	8001aba <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6999      	ldr	r1, [r3, #24]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1b      	subs	r3, #27
 8001a92:	2207      	movs	r2, #7
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4019      	ands	r1, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6898      	ldr	r0, [r3, #8]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b1b      	subs	r3, #27
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	619a      	str	r2, [r3, #24]
 8001ab8:	e01b      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6959      	ldr	r1, [r3, #20]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	2207      	movs	r2, #7
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	4019      	ands	r1, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6898      	ldr	r0, [r3, #8]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001afa:	d004      	beq.n	8001b06 <HAL_ADC_ConfigChannel+0x416>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <HAL_ADC_ConfigChannel+0x474>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x41a>
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <HAL_ADC_ConfigChannel+0x478>)
 8001b08:	e000      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x41c>
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_ADC_ConfigChannel+0x47c>)
 8001b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d105      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d015      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b26:	2b11      	cmp	r3, #17
 8001b28:	d105      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	f040 80ac 	bne.w	8001c98 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f040 80a5 	bne.w	8001c98 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x480>
 8001b58:	4b02      	ldr	r3, [pc, #8]	@ (8001b64 <HAL_ADC_ConfigChannel+0x474>)
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e023      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x4b6>
 8001b5e:	bf00      	nop
 8001b60:	83fff000 	.word	0x83fff000
 8001b64:	50000100 	.word	0x50000100
 8001b68:	50000300 	.word	0x50000300
 8001b6c:	50000700 	.word	0x50000700
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb0 <HAL_ADC_ConfigChannel+0x5c0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d103      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x492>
 8001b7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e011      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x4b6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d102      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x4a2>
 8001b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e009      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x4b6>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x4b2>
 8001b9c:	4b45      	ldr	r3, [pc, #276]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e001      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d108      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x4d6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x4d6>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x4d8>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d150      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x4fe>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x4fe>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x500>
 8001bee:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d13c      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d11d      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x548>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c04:	d118      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c10:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c12:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <HAL_ADC_ConfigChannel+0x5cc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	0c9a      	lsrs	r2, r3, #18
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f9      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c36:	e02e      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b11      	cmp	r3, #17
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x568>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c48:	d106      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c54:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c56:	e01e      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d11a      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c6a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c6c:	e013      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f043 0220 	orr.w	r2, r3, #32
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001c80:	e00a      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f043 0220 	orr.w	r2, r3, #32
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001c94:	e000      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c96:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ca0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	376c      	adds	r7, #108	@ 0x6c
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	50000100 	.word	0x50000100
 8001cb4:	50000400 	.word	0x50000400
 8001cb8:	50000500 	.word	0x50000500
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b099      	sub	sp, #100	@ 0x64
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cdc:	d102      	bne.n	8001ce4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001cde:	4b6d      	ldr	r3, [pc, #436]	@ (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	e01a      	b.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d103      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001cee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	e011      	b.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a67      	ldr	r2, [pc, #412]	@ (8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d102      	bne.n	8001d06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d00:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	e009      	b.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a64      	ldr	r2, [pc, #400]	@ (8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001d10:	4b61      	ldr	r3, [pc, #388]	@ (8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	e001      	b.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b0      	b.n	8001e86 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e0a9      	b.n	8001e86 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 808d 	bne.w	8001e64 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8086 	bne.w	8001e64 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d60:	d004      	beq.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a4b      	ldr	r2, [pc, #300]	@ (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d6e:	e000      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d72:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d040      	beq.n	8001dfe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d8e:	035b      	lsls	r3, r3, #13
 8001d90:	430b      	orrs	r3, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d96:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d108      	bne.n	8001db8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d15c      	bne.n	8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001dda:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d14b      	bne.n	8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001de8:	f023 030f 	bic.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	6811      	ldr	r1, [r2, #0]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	6892      	ldr	r2, [r2, #8]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	431a      	orrs	r2, r3
 8001df8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dfa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dfc:	e03c      	b.n	8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e08:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d108      	bne.n	8001e2a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d123      	bne.n	8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d107      	bne.n	8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e4c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d112      	bne.n	8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e5a:	f023 030f 	bic.w	r3, r3, #15
 8001e5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e60:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e62:	e009      	b.n	8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f043 0220 	orr.w	r2, r3, #32
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001e76:	e000      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e78:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001e86:	4618      	mov	r0, r3
 8001e88:	3764      	adds	r7, #100	@ 0x64
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	50000100 	.word	0x50000100
 8001e98:	50000400 	.word	0x50000400
 8001e9c:	50000500 	.word	0x50000500
 8001ea0:	50000300 	.word	0x50000300
 8001ea4:	50000700 	.word	0x50000700

08001ea8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <ADC_Enable+0x2c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <ADC_Enable+0x2c>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <ADC_Enable+0x2e>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d143      	bne.n	8001f62 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <ADC_Enable+0xc4>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	f043 0210 	orr.w	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e02f      	b.n	8001f64 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001f14:	f7fe ff9c 	bl	8000e50 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f1a:	e01b      	b.n	8001f54 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f1c:	f7fe ff98 	bl	8000e50 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d914      	bls.n	8001f54 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d00d      	beq.n	8001f54 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e007      	b.n	8001f64 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d1dc      	bne.n	8001f1c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	8000003f 	.word	0x8000003f

08001f70 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <ADC_Disable+0x2c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <ADC_Disable+0x2c>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <ADC_Disable+0x2e>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d047      	beq.n	8002032 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030d 	and.w	r3, r3, #13
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10f      	bne.n	8001fd0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0202 	orr.w	r2, r2, #2
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe ff42 	bl	8000e50 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fce:	e029      	b.n	8002024 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f043 0210 	orr.w	r2, r3, #16
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e023      	b.n	8002034 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fec:	f7fe ff30 	bl	8000e50 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d914      	bls.n	8002024 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10d      	bne.n	8002024 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f043 0210 	orr.w	r2, r3, #16
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e007      	b.n	8002034 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d0dc      	beq.n	8001fec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	@ (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	@ (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	@ (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	@ (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	@ 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f7ff ff8e 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff29 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff3e 	bl	8002084 <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff8e 	bl	8002130 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5d 	bl	80020dc <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff31 	bl	80020a0 <__NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffa2 	bl	8002198 <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e014      	b.n	800229a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7fe fc8d 	bl	8000ba0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3308      	adds	r3, #8
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e004      	b.n	80022d6 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	3314      	adds	r3, #20
 80022d4:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	795b      	ldrb	r3, [r3, #5]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_DAC_Start+0x16>
 80022fe:	2302      	movs	r3, #2
 8002300:	e039      	b.n	8002376 <HAL_DAC_Start+0x8a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	2201      	movs	r2, #1
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10f      	bne.n	8002348 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002332:	2b3c      	cmp	r3, #60	@ 0x3c
 8002334:	d118      	bne.n	8002368 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	e00f      	b.n	8002368 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002352:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8002356:	d107      	bne.n	8002368 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0202 	orr.w	r2, r2, #2
 8002366:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002382:	b480      	push	{r7}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	795b      	ldrb	r3, [r3, #5]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_DAC_ConfigChannel+0x20>
 800239e:	2302      	movs	r3, #2
 80023a0:	e036      	b.n	8002410 <HAL_DAC_ConfigChannel+0x8e>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2202      	movs	r2, #2
 80023ac:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80023b6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	22c0      	movs	r2, #192	@ 0xc0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242a:	e160      	b.n	80026ee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8152 	beq.w	80026e8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x40>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d017      	beq.n	80024fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d123      	bne.n	800254e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	6939      	ldr	r1, [r7, #16]
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0203 	and.w	r2, r3, #3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80ac 	beq.w	80026e8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	4b5e      	ldr	r3, [pc, #376]	@ (800270c <HAL_GPIO_Init+0x2f0>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a5d      	ldr	r2, [pc, #372]	@ (800270c <HAL_GPIO_Init+0x2f0>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b5b      	ldr	r3, [pc, #364]	@ (800270c <HAL_GPIO_Init+0x2f0>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025a8:	4a59      	ldr	r2, [pc, #356]	@ (8002710 <HAL_GPIO_Init+0x2f4>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025d2:	d025      	beq.n	8002620 <HAL_GPIO_Init+0x204>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002714 <HAL_GPIO_Init+0x2f8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d01f      	beq.n	800261c <HAL_GPIO_Init+0x200>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4e      	ldr	r2, [pc, #312]	@ (8002718 <HAL_GPIO_Init+0x2fc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d019      	beq.n	8002618 <HAL_GPIO_Init+0x1fc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a4d      	ldr	r2, [pc, #308]	@ (800271c <HAL_GPIO_Init+0x300>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_GPIO_Init+0x1f8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002720 <HAL_GPIO_Init+0x304>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00d      	beq.n	8002610 <HAL_GPIO_Init+0x1f4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002724 <HAL_GPIO_Init+0x308>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <HAL_GPIO_Init+0x1f0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_GPIO_Init+0x1ec>
 8002604:	2306      	movs	r3, #6
 8002606:	e00c      	b.n	8002622 <HAL_GPIO_Init+0x206>
 8002608:	2307      	movs	r3, #7
 800260a:	e00a      	b.n	8002622 <HAL_GPIO_Init+0x206>
 800260c:	2305      	movs	r3, #5
 800260e:	e008      	b.n	8002622 <HAL_GPIO_Init+0x206>
 8002610:	2304      	movs	r3, #4
 8002612:	e006      	b.n	8002622 <HAL_GPIO_Init+0x206>
 8002614:	2303      	movs	r3, #3
 8002616:	e004      	b.n	8002622 <HAL_GPIO_Init+0x206>
 8002618:	2302      	movs	r3, #2
 800261a:	e002      	b.n	8002622 <HAL_GPIO_Init+0x206>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_GPIO_Init+0x206>
 8002620:	2300      	movs	r3, #0
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	f002 0203 	and.w	r2, r2, #3
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	4093      	lsls	r3, r2
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002632:	4937      	ldr	r1, [pc, #220]	@ (8002710 <HAL_GPIO_Init+0x2f4>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002640:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <HAL_GPIO_Init+0x310>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002664:	4a31      	ldr	r2, [pc, #196]	@ (800272c <HAL_GPIO_Init+0x310>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266a:	4b30      	ldr	r3, [pc, #192]	@ (800272c <HAL_GPIO_Init+0x310>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800268e:	4a27      	ldr	r2, [pc, #156]	@ (800272c <HAL_GPIO_Init+0x310>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002694:	4b25      	ldr	r3, [pc, #148]	@ (800272c <HAL_GPIO_Init+0x310>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026b8:	4a1c      	ldr	r2, [pc, #112]	@ (800272c <HAL_GPIO_Init+0x310>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_GPIO_Init+0x310>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <HAL_GPIO_Init+0x310>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f ae97 	bne.w	800242c <HAL_GPIO_Init+0x10>
  }
}
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000
 8002714:	48000400 	.word	0x48000400
 8002718:	48000800 	.word	0x48000800
 800271c:	48000c00 	.word	0x48000c00
 8002720:	48001000 	.word	0x48001000
 8002724:	48001400 	.word	0x48001400
 8002728:	48001800 	.word	0x48001800
 800272c:	40010400 	.word	0x40010400

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800274c:	e002      	b.n	8002754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002766:	af00      	add	r7, sp, #0
 8002768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002770:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002776:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f001 b80a 	b.w	800379a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8161 	beq.w	8002a5e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800279c:	4bae      	ldr	r3, [pc, #696]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d00c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a8:	4bab      	ldr	r3, [pc, #684]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d157      	bne.n	8002864 <HAL_RCC_OscConfig+0x104>
 80027b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c0:	d150      	bne.n	8002864 <HAL_RCC_OscConfig+0x104>
 80027c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80027e2:	d802      	bhi.n	80027ea <HAL_RCC_OscConfig+0x8a>
 80027e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	e015      	b.n	8002816 <HAL_RCC_OscConfig+0xb6>
 80027ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80027fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002802:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002806:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002812:	4b91      	ldr	r3, [pc, #580]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800281a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800281e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002822:	fa92 f2a2 	rbit	r2, r2
 8002826:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800282a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0220 	orr.w	r2, r2, #32
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8108 	beq.w	8002a5c <HAL_RCC_OscConfig+0x2fc>
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 80ff 	bne.w	8002a5c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f000 bf9b 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002868:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002874:	d106      	bne.n	8002884 <HAL_RCC_OscConfig+0x124>
 8002876:	4b78      	ldr	r3, [pc, #480]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a77      	ldr	r2, [pc, #476]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e036      	b.n	80028f2 <HAL_RCC_OscConfig+0x192>
 8002884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002888:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x14e>
 8002894:	4b70      	ldr	r3, [pc, #448]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6f      	ldr	r2, [pc, #444]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6c      	ldr	r2, [pc, #432]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e021      	b.n	80028f2 <HAL_RCC_OscConfig+0x192>
 80028ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x17a>
 80028c0:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a64      	ldr	r2, [pc, #400]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b62      	ldr	r3, [pc, #392]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a61      	ldr	r2, [pc, #388]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e00b      	b.n	80028f2 <HAL_RCC_OscConfig+0x192>
 80028da:	4b5f      	ldr	r3, [pc, #380]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5e      	ldr	r2, [pc, #376]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80028ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d054      	beq.n	80029ac <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe faa5 	bl	8000e50 <HAL_GetTick>
 8002906:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe faa0 	bl	8000e50 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	@ 0x64
 800291a:	d902      	bls.n	8002922 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	f000 bf3c 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
 8002922:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002926:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002936:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b3f      	cmp	r3, #63	@ 0x3f
 8002942:	d802      	bhi.n	800294a <HAL_RCC_OscConfig+0x1ea>
 8002944:	4b44      	ldr	r3, [pc, #272]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	e015      	b.n	8002976 <HAL_RCC_OscConfig+0x216>
 800294a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800294e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800295e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002962:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002966:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002972:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800297a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800297e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002982:	fa92 f2a2 	rbit	r2, r2
 8002986:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800298a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0b0      	beq.n	800290c <HAL_RCC_OscConfig+0x1ac>
 80029aa:	e058      	b.n	8002a5e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fa50 	bl	8000e50 <HAL_GetTick>
 80029b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b6:	f7fe fa4b 	bl	8000e50 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	@ 0x64
 80029c4:	d902      	bls.n	80029cc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	f000 bee7 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
 80029cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80029e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80029ec:	d802      	bhi.n	80029f4 <HAL_RCC_OscConfig+0x294>
 80029ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e015      	b.n	8002a20 <HAL_RCC_OscConfig+0x2c0>
 80029f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002a08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a0c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002a10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_RCC_OscConfig+0x2f8>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a24:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002a28:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002a2c:	fa92 f2a2 	rbit	r2, r2
 8002a30:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002a34:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a38:	fab2 f282 	clz	r2, r2
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f042 0220 	orr.w	r2, r2, #32
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f002 021f 	and.w	r2, r2, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1b0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x256>
 8002a54:	e003      	b.n	8002a5e <HAL_RCC_OscConfig+0x2fe>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 816d 	beq.w	8002d4e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a74:	4bcd      	ldr	r3, [pc, #820]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00c      	beq.n	8002a9a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a80:	4bca      	ldr	r3, [pc, #808]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d16e      	bne.n	8002b6a <HAL_RCC_OscConfig+0x40a>
 8002a8c:	4bc7      	ldr	r3, [pc, #796]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a98:	d167      	bne.n	8002b6a <HAL_RCC_OscConfig+0x40a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002aac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ab8:	d802      	bhi.n	8002ac0 <HAL_RCC_OscConfig+0x360>
 8002aba:	4bbc      	ldr	r3, [pc, #752]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e013      	b.n	8002ae8 <HAL_RCC_OscConfig+0x388>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ad8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ae4:	4bb1      	ldr	r3, [pc, #708]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002aee:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002af2:	fa92 f2a2 	rbit	r2, r2
 8002af6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002afa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002afe:	fab2 f282 	clz	r2, r2
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f042 0220 	orr.w	r2, r2, #32
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f002 021f 	and.w	r2, r2, #31
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCC_OscConfig+0x3d0>
 8002b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f000 be35 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b9e      	ldr	r3, [pc, #632]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	21f8      	movs	r1, #248	@ 0xf8
 8002b46:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002b4e:	fa91 f1a1 	rbit	r1, r1
 8002b52:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002b56:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002b5a:	fab1 f181 	clz	r1, r1
 8002b5e:	b2c9      	uxtb	r1, r1
 8002b60:	408b      	lsls	r3, r1
 8002b62:	4992      	ldr	r1, [pc, #584]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b68:	e0f1      	b.n	8002d4e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8083 	beq.w	8002c82 <HAL_RCC_OscConfig+0x522>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002b8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f952 	bl	8000e50 <HAL_GetTick>
 8002bac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7fe f94d 	bl	8000e50 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d902      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	f000 bde9 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002bda:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002be6:	d802      	bhi.n	8002bee <HAL_RCC_OscConfig+0x48e>
 8002be8:	4b70      	ldr	r3, [pc, #448]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	e013      	b.n	8002c16 <HAL_RCC_OscConfig+0x4b6>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002c06:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002c12:	4b66      	ldr	r3, [pc, #408]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	2202      	movs	r2, #2
 8002c18:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002c1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002c20:	fa92 f2a2 	rbit	r2, r2
 8002c24:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002c28:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f042 0220 	orr.w	r2, r2, #32
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f002 021f 	and.w	r2, r2, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0b4      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b58      	ldr	r3, [pc, #352]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	21f8      	movs	r1, #248	@ 0xf8
 8002c5e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002c66:	fa91 f1a1 	rbit	r1, r1
 8002c6a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002c6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002c72:	fab1 f181 	clz	r1, r1
 8002c76:	b2c9      	uxtb	r1, r1
 8002c78:	408b      	lsls	r3, r1
 8002c7a:	494c      	ldr	r1, [pc, #304]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
 8002c80:	e065      	b.n	8002d4e <HAL_RCC_OscConfig+0x5ee>
 8002c82:	2301      	movs	r3, #1
 8002c84:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002c94:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ca2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe f8cf 	bl	8000e50 <HAL_GetTick>
 8002cb2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe f8ca 	bl	8000e50 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d902      	bls.n	8002cce <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f000 bd66 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002ce0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cec:	d802      	bhi.n	8002cf4 <HAL_RCC_OscConfig+0x594>
 8002cee:	4b2f      	ldr	r3, [pc, #188]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	e013      	b.n	8002d1c <HAL_RCC_OscConfig+0x5bc>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002d06:	2302      	movs	r3, #2
 8002d08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002d0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d18:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_RCC_OscConfig+0x64c>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002d22:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002d26:	fa92 f2a2 	rbit	r2, r2
 8002d2a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002d2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d32:	fab2 f282 	clz	r2, r2
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f042 0220 	orr.w	r2, r2, #32
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f002 021f 	and.w	r2, r2, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1b4      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8119 	beq.w	8002f96 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8082 	beq.w	8002e7a <HAL_RCC_OscConfig+0x71a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002d88:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_RCC_OscConfig+0x650>)
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7fe f856 	bl	8000e50 <HAL_GetTick>
 8002da4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da8:	e00f      	b.n	8002dca <HAL_RCC_OscConfig+0x66a>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe f84c 	bl	8000e50 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d902      	bls.n	8002dca <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	f000 bce8 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ddc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fa93 f2a3 	rbit	r2, r3
 8002dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	fa93 f2a3 	rbit	r2, r3
 8002e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4bb0      	ldr	r3, [pc, #704]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8002e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e36:	2102      	movs	r1, #2
 8002e38:	6019      	str	r1, [r3, #0]
 8002e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f1a3 	rbit	r1, r3
 8002e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e50:	6019      	str	r1, [r3, #0]
  return result;
 8002e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d09d      	beq.n	8002db4 <HAL_RCC_OscConfig+0x654>
 8002e78:	e08d      	b.n	8002f96 <HAL_RCC_OscConfig+0x836>
 8002e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e98:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e9c:	601a      	str	r2, [r3, #0]
  return result;
 8002e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ea6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b8f      	ldr	r3, [pc, #572]	@ (80030f0 <HAL_RCC_OscConfig+0x990>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fd ffc8 	bl	8000e50 <HAL_GetTick>
 8002ec0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fd ffc3 	bl	8000e50 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d902      	bls.n	8002edc <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	f000 bc5f 	b.w	800379a <HAL_RCC_OscConfig+0x103a>
 8002edc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f08:	2202      	movs	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b68      	ldr	r3, [pc, #416]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f54:	2102      	movs	r1, #2
 8002f56:	6019      	str	r1, [r3, #0]
 8002f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f1a3 	rbit	r1, r3
 8002f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f6e:	6019      	str	r1, [r3, #0]
  return result;
 8002f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f74:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d197      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 819c 	beq.w	80032e4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	61d3      	str	r3, [r2, #28]
 8002fca:	4b48      	ldr	r3, [pc, #288]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fe4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b41      	ldr	r3, [pc, #260]	@ (80030f4 <HAL_RCC_OscConfig+0x994>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11a      	bne.n	800302e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <HAL_RCC_OscConfig+0x994>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3d      	ldr	r2, [pc, #244]	@ (80030f4 <HAL_RCC_OscConfig+0x994>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003002:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003004:	f7fd ff24 	bl	8000e50 <HAL_GetTick>
 8003008:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e009      	b.n	8003022 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fd ff1f 	bl	8000e50 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e3bb      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_RCC_OscConfig+0x994>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ef      	beq.n	800300e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003032:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x8ec>
 800303e:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4a2a      	ldr	r2, [pc, #168]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6213      	str	r3, [r2, #32]
 800304a:	e035      	b.n	80030b8 <HAL_RCC_OscConfig+0x958>
 800304c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003050:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x916>
 800305c:	4b23      	ldr	r3, [pc, #140]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a1f      	ldr	r2, [pc, #124]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 800306e:	f023 0304 	bic.w	r3, r3, #4
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	e020      	b.n	80030b8 <HAL_RCC_OscConfig+0x958>
 8003076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b05      	cmp	r3, #5
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x940>
 8003086:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6213      	str	r3, [r2, #32]
 8003092:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6213      	str	r3, [r2, #32]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0x958>
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4a11      	ldr	r2, [pc, #68]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6213      	str	r3, [r2, #32]
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a0e      	ldr	r2, [pc, #56]	@ (80030ec <HAL_RCC_OscConfig+0x98c>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8085 	beq.w	80031d4 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7fd fec1 	bl	8000e50 <HAL_GetTick>
 80030ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	e011      	b.n	80030f8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fd febc 	bl	8000e50 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e356      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
 80030ec:	40021000 	.word	0x40021000
 80030f0:	10908120 	.word	0x10908120
 80030f4:	40007000 	.word	0x40007000
 80030f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003100:	2202      	movs	r2, #2
 8003102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003108:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003116:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003120:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003124:	2202      	movs	r2, #2
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800312c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f2a3 	rbit	r2, r3
 8003136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800313a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800313e:	601a      	str	r2, [r3, #0]
  return result;
 8003140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003144:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003148:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <HAL_RCC_OscConfig+0xa00>
 800315a:	4b98      	ldr	r3, [pc, #608]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	e013      	b.n	8003188 <HAL_RCC_OscConfig+0xa28>
 8003160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003164:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003168:	2202      	movs	r2, #2
 800316a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003170:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b8d      	ldr	r3, [pc, #564]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800318c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003190:	2102      	movs	r1, #2
 8003192:	6011      	str	r1, [r2, #0]
 8003194:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003198:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	fa92 f1a2 	rbit	r1, r2
 80031a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031a6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80031aa:	6011      	str	r1, [r2, #0]
  return result;
 80031ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031b0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	fab2 f282 	clz	r2, r2
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d080      	beq.n	80030d4 <HAL_RCC_OscConfig+0x974>
 80031d2:	e07d      	b.n	80032d0 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fd fe3c 	bl	8000e50 <HAL_GetTick>
 80031d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fd fe37 	bl	8000e50 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e2d1      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
 80031f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003206:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003214:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003222:	2202      	movs	r2, #2
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	fa93 f2a3 	rbit	r2, r3
 8003234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003238:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800323c:	601a      	str	r2, [r3, #0]
  return result;
 800323e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003242:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003246:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_RCC_OscConfig+0xafe>
 8003258:	4b58      	ldr	r3, [pc, #352]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	e013      	b.n	8003286 <HAL_RCC_OscConfig+0xb26>
 800325e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003262:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003266:	2202      	movs	r2, #2
 8003268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800326e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fa93 f2a3 	rbit	r2, r3
 8003278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	4b4e      	ldr	r3, [pc, #312]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800328a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800328e:	2102      	movs	r1, #2
 8003290:	6011      	str	r1, [r2, #0]
 8003292:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003296:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	fa92 f1a2 	rbit	r1, r2
 80032a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032a4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80032a8:	6011      	str	r1, [r2, #0]
  return result;
 80032aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032ae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d186      	bne.n	80031de <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032d0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b38      	ldr	r3, [pc, #224]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	4a37      	ldr	r2, [pc, #220]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8251 	beq.w	8003798 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f6:	4b31      	ldr	r3, [pc, #196]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b08      	cmp	r3, #8
 8003300:	f000 820f 	beq.w	8003722 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003308:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b02      	cmp	r3, #2
 8003312:	f040 8165 	bne.w	80035e0 <HAL_RCC_OscConfig+0xe80>
 8003316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800331e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003328:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003336:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800333a:	601a      	str	r2, [r3, #0]
  return result;
 800333c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003340:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003344:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003350:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	461a      	mov	r2, r3
 8003358:	2300      	movs	r3, #0
 800335a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fd fd78 	bl	8000e50 <HAL_GetTick>
 8003360:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003364:	e009      	b.n	800337a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003366:	f7fd fd73 	bl	8000e50 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e20f      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
 800337a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003382:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fa93 f2a3 	rbit	r2, r3
 8003396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800339e:	601a      	str	r2, [r3, #0]
  return result;
 80033a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80033b2:	d805      	bhi.n	80033c0 <HAL_RCC_OscConfig+0xc60>
 80033b4:	4b01      	ldr	r3, [pc, #4]	@ (80033bc <HAL_RCC_OscConfig+0xc5c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e02a      	b.n	8003410 <HAL_RCC_OscConfig+0xcb0>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80033c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003406:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	4bca      	ldr	r3, [pc, #808]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003414:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003418:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003422:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	fa92 f1a2 	rbit	r1, r2
 800342c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003430:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003434:	6011      	str	r1, [r2, #0]
  return result;
 8003436:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800343a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	fab2 f282 	clz	r2, r2
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f042 0220 	orr.w	r2, r2, #32
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	f002 021f 	and.w	r2, r2, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d184      	bne.n	8003366 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345c:	4bb6      	ldr	r3, [pc, #728]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	f023 020f 	bic.w	r2, r3, #15
 8003464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003468:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	49b1      	ldr	r1, [pc, #708]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003476:	4bb0      	ldr	r3, [pc, #704]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800347e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003482:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a19      	ldr	r1, [r3, #32]
 800348a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800348e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	430b      	orrs	r3, r1
 8003498:	49a7      	ldr	r1, [pc, #668]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
 800349e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034c2:	601a      	str	r2, [r3, #0]
  return result;
 80034c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034cc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	461a      	mov	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fcb4 	bl	8000e50 <HAL_GetTick>
 80034e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ec:	e009      	b.n	8003502 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fd fcaf 	bl	8000e50 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e14b      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
 8003502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003506:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800350a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003514:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003522:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003526:	601a      	str	r2, [r3, #0]
  return result;
 8003528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003530:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b3f      	cmp	r3, #63	@ 0x3f
 800353a:	d802      	bhi.n	8003542 <HAL_RCC_OscConfig+0xde2>
 800353c:	4b7e      	ldr	r3, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e027      	b.n	8003592 <HAL_RCC_OscConfig+0xe32>
 8003542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003546:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800354a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003554:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003562:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800356c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800357a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fa93 f2a3 	rbit	r2, r3
 8003584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003588:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003596:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800359a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800359e:	6011      	str	r1, [r2, #0]
 80035a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	fa92 f1a2 	rbit	r1, r2
 80035ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035b2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80035b6:	6011      	str	r1, [r2, #0]
  return result;
 80035b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035bc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	fab2 f282 	clz	r2, r2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f042 0220 	orr.w	r2, r2, #32
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f002 021f 	and.w	r2, r2, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d087      	beq.n	80034ee <HAL_RCC_OscConfig+0xd8e>
 80035de:	e0db      	b.n	8003798 <HAL_RCC_OscConfig+0x1038>
 80035e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fa93 f2a3 	rbit	r2, r3
 80035fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003600:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003604:	601a      	str	r2, [r3, #0]
  return result;
 8003606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800360a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800360e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800361a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	461a      	mov	r2, r3
 8003622:	2300      	movs	r3, #0
 8003624:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fd fc13 	bl	8000e50 <HAL_GetTick>
 800362a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	e009      	b.n	8003644 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003630:	f7fd fc0e 	bl	8000e50 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0aa      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
 8003644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003648:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800364c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003656:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	fa93 f2a3 	rbit	r2, r3
 8003660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003664:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003668:	601a      	str	r2, [r3, #0]
  return result;
 800366a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003672:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b3f      	cmp	r3, #63	@ 0x3f
 800367c:	d802      	bhi.n	8003684 <HAL_RCC_OscConfig+0xf24>
 800367e:	4b2e      	ldr	r3, [pc, #184]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	e027      	b.n	80036d4 <HAL_RCC_OscConfig+0xf74>
 8003684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003688:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800368c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003696:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fa93 f2a3 	rbit	r2, r3
 80036a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036bc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ca:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <HAL_RCC_OscConfig+0xfd8>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036e0:	6011      	str	r1, [r2, #0]
 80036e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036e6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	fa92 f1a2 	rbit	r1, r2
 80036f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036f4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80036f8:	6011      	str	r1, [r2, #0]
  return result;
 80036fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036fe:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	fab2 f282 	clz	r2, r2
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f002 021f 	and.w	r2, r2, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f202 	lsl.w	r2, r1, r2
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d187      	bne.n	8003630 <HAL_RCC_OscConfig+0xed0>
 8003720:	e03a      	b.n	8003798 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003726:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d104      	bne.n	800373c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e031      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800373c:	4b19      	ldr	r3, [pc, #100]	@ (80037a4 <HAL_RCC_OscConfig+0x1044>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003744:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <HAL_RCC_OscConfig+0x1044>)
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800374c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003750:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003758:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	429a      	cmp	r2, r3
 8003762:	d117      	bne.n	8003794 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003764:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003768:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800376c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003770:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003778:	429a      	cmp	r2, r3
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800377c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003788:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b09e      	sub	sp, #120	@ 0x78
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e154      	b.n	8003a6a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b89      	ldr	r3, [pc, #548]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d910      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b86      	ldr	r3, [pc, #536]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	4984      	ldr	r1, [pc, #528]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b82      	ldr	r3, [pc, #520]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e13c      	b.n	8003a6a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b7b      	ldr	r3, [pc, #492]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4978      	ldr	r1, [pc, #480]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80cd 	beq.w	80039b6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d137      	bne.n	8003894 <HAL_RCC_ClockConfig+0xec>
 8003824:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003828:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003834:	fab3 f383 	clz	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b3f      	cmp	r3, #63	@ 0x3f
 800383c:	d802      	bhi.n	8003844 <HAL_RCC_ClockConfig+0x9c>
 800383e:	4b6b      	ldr	r3, [pc, #428]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	e00f      	b.n	8003864 <HAL_RCC_ClockConfig+0xbc>
 8003844:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	667b      	str	r3, [r7, #100]	@ 0x64
 8003852:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003856:	663b      	str	r3, [r7, #96]	@ 0x60
 8003858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003860:	4b62      	ldr	r3, [pc, #392]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003868:	65ba      	str	r2, [r7, #88]	@ 0x58
 800386a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800386c:	fa92 f2a2 	rbit	r2, r2
 8003870:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003872:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003874:	fab2 f282 	clz	r2, r2
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f042 0220 	orr.w	r2, r2, #32
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	f002 021f 	and.w	r2, r2, #31
 8003884:	2101      	movs	r1, #1
 8003886:	fa01 f202 	lsl.w	r2, r1, r2
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d171      	bne.n	8003974 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ea      	b.n	8003a6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d137      	bne.n	800390c <HAL_RCC_ClockConfig+0x164>
 800389c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80038b4:	d802      	bhi.n	80038bc <HAL_RCC_ClockConfig+0x114>
 80038b6:	4b4d      	ldr	r3, [pc, #308]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	e00f      	b.n	80038dc <HAL_RCC_ClockConfig+0x134>
 80038bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d8:	4b44      	ldr	r3, [pc, #272]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038e0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80038e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038e4:	fa92 f2a2 	rbit	r2, r2
 80038e8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80038ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038ec:	fab2 f282 	clz	r2, r2
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f042 0220 	orr.w	r2, r2, #32
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	f002 021f 	and.w	r2, r2, #31
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d135      	bne.n	8003974 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0ae      	b.n	8003a6a <HAL_RCC_ClockConfig+0x2c2>
 800390c:	2302      	movs	r3, #2
 800390e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b3f      	cmp	r3, #63	@ 0x3f
 8003922:	d802      	bhi.n	800392a <HAL_RCC_ClockConfig+0x182>
 8003924:	4b31      	ldr	r3, [pc, #196]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	e00d      	b.n	8003946 <HAL_RCC_ClockConfig+0x19e>
 800392a:	2302      	movs	r3, #2
 800392c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
 8003936:	2302      	movs	r3, #2
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	4b2a      	ldr	r3, [pc, #168]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	2202      	movs	r2, #2
 8003948:	61ba      	str	r2, [r7, #24]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	fa92 f2a2 	rbit	r2, r2
 8003950:	617a      	str	r2, [r7, #20]
  return result;
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	fab2 f282 	clz	r2, r2
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f042 0220 	orr.w	r2, r2, #32
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	f002 021f 	and.w	r2, r2, #31
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f202 	lsl.w	r2, r1, r2
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e07a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003974:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 0203 	bic.w	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	491a      	ldr	r1, [pc, #104]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003986:	f7fd fa63 	bl	8000e50 <HAL_GetTick>
 800398a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398e:	f7fd fa5f 	bl	8000e50 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e062      	b.n	8003a6a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a4:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <HAL_RCC_ClockConfig+0x244>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 020c 	and.w	r2, r3, #12
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d1eb      	bne.n	800398e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b6:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d215      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c4:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 0207 	bic.w	r2, r3, #7
 80039cc:	4906      	ldr	r1, [pc, #24]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d4:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <HAL_RCC_ClockConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d006      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e041      	b.n	8003a6a <HAL_RCC_ClockConfig+0x2c2>
 80039e6:	bf00      	nop
 80039e8:	40022000 	.word	0x40022000
 80039ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <HAL_RCC_ClockConfig+0x2cc>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	491a      	ldr	r1, [pc, #104]	@ (8003a74 <HAL_RCC_ClockConfig+0x2cc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1a:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <HAL_RCC_ClockConfig+0x2cc>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4912      	ldr	r1, [pc, #72]	@ (8003a74 <HAL_RCC_ClockConfig+0x2cc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a2e:	f000 f829 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8003a32:	4601      	mov	r1, r0
 8003a34:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <HAL_RCC_ClockConfig+0x2cc>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a3c:	22f0      	movs	r2, #240	@ 0xf0
 8003a3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	fa92 f2a2 	rbit	r2, r2
 8003a46:	60fa      	str	r2, [r7, #12]
  return result;
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	fab2 f282 	clz	r2, r2
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	40d3      	lsrs	r3, r2
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <HAL_RCC_ClockConfig+0x2d0>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5a:	4a08      	ldr	r2, [pc, #32]	@ (8003a7c <HAL_RCC_ClockConfig+0x2d4>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a5e:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_RCC_ClockConfig+0x2d8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd f9b0 	bl	8000dc8 <HAL_InitTick>
  
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3778      	adds	r7, #120	@ 0x78
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08004928 	.word	0x08004928
 8003a7c:	20000004 	.word	0x20000004
 8003a80:	20000008 	.word	0x20000008

08003a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x36>
 8003ab2:	e029      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	e029      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	0c9b      	lsrs	r3, r3, #18
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	4a15      	ldr	r2, [pc, #84]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e007      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003af2:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	613b      	str	r3, [r7, #16]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b0a:	613b      	str	r3, [r7, #16]
      break;
 8003b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0e:	693b      	ldr	r3, [r7, #16]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	007a1200 	.word	0x007a1200
 8003b24:	08004938 	.word	0x08004938
 8003b28:	08004948 	.word	0x08004948

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b092      	sub	sp, #72	@ 0x48
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80d2 	beq.w	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b50:	4b4d      	ldr	r3, [pc, #308]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10e      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	4a49      	ldr	r2, [pc, #292]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	61d3      	str	r3, [r2, #28]
 8003b68:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b44      	ldr	r3, [pc, #272]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d118      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b86:	4b41      	ldr	r3, [pc, #260]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a40      	ldr	r2, [pc, #256]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b92:	f7fd f95d 	bl	8000e50 <HAL_GetTick>
 8003b96:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7fd f959 	bl	8000e50 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	@ 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e1d4      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b37      	ldr	r3, [pc, #220]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb8:	4b33      	ldr	r3, [pc, #204]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8082 	beq.w	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d07a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003be6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	461a      	mov	r2, r3
 8003c02:	2301      	movs	r3, #1
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	461a      	mov	r2, r3
 8003c26:	2300      	movs	r3, #0
 8003c28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c2a:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d049      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fd f909 	bl	8000e50 <HAL_GetTick>
 8003c3e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fd f905 	bl	8000e50 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e17e      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c64:	2302      	movs	r3, #2
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
  return result;
 8003c70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d108      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003c82:	4b01      	ldr	r3, [pc, #4]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	e00d      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	10908100 	.word	0x10908100
 8003c94:	2302      	movs	r3, #2
 8003c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	4b9a      	ldr	r3, [pc, #616]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	613a      	str	r2, [r7, #16]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	fa92 f2a2 	rbit	r2, r2
 8003cae:	60fa      	str	r2, [r7, #12]
  return result;
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	fab2 f282 	clz	r2, r2
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	f002 021f 	and.w	r2, r2, #31
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0b9      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cce:	4b8f      	ldr	r3, [pc, #572]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	498c      	ldr	r1, [pc, #560]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b88      	ldr	r3, [pc, #544]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4a87      	ldr	r2, [pc, #540]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d00:	4b82      	ldr	r3, [pc, #520]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	f023 0203 	bic.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	497f      	ldr	r1, [pc, #508]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	4978      	ldr	r1, [pc, #480]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d3c:	4b73      	ldr	r3, [pc, #460]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	4970      	ldr	r1, [pc, #448]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f023 0210 	bic.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4969      	ldr	r1, [pc, #420]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d78:	4b64      	ldr	r3, [pc, #400]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	4961      	ldr	r1, [pc, #388]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d96:	4b5d      	ldr	r3, [pc, #372]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	f023 0220 	bic.w	r2, r3, #32
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	495a      	ldr	r1, [pc, #360]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db4:	4b55      	ldr	r3, [pc, #340]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	4952      	ldr	r1, [pc, #328]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	494b      	ldr	r1, [pc, #300]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df0:	4b46      	ldr	r3, [pc, #280]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4943      	ldr	r1, [pc, #268]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	493c      	ldr	r1, [pc, #240]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e2c:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	4934      	ldr	r1, [pc, #208]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e4a:	4b30      	ldr	r3, [pc, #192]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	492d      	ldr	r1, [pc, #180]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e68:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e74:	4925      	ldr	r1, [pc, #148]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e86:	4b21      	ldr	r3, [pc, #132]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	491e      	ldr	r1, [pc, #120]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ea4:	4b19      	ldr	r3, [pc, #100]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb0:	4916      	ldr	r1, [pc, #88]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003ec2:	4b12      	ldr	r3, [pc, #72]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	490f      	ldr	r1, [pc, #60]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eec:	4907      	ldr	r1, [pc, #28]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00c      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003efe:	4b03      	ldr	r3, [pc, #12]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f12:	4913      	ldr	r1, [pc, #76]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f30:	490b      	ldr	r1, [pc, #44]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4e:	4904      	ldr	r1, [pc, #16]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3748      	adds	r7, #72	@ 0x48
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e049      	b.n	800400a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc fe46 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 fa9a 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d001      	beq.n	800402c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e04f      	b.n	80040cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a23      	ldr	r2, [pc, #140]	@ (80040d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01d      	beq.n	800408a <HAL_TIM_Base_Start_IT+0x76>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004056:	d018      	beq.n	800408a <HAL_TIM_Base_Start_IT+0x76>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1f      	ldr	r2, [pc, #124]	@ (80040dc <HAL_TIM_Base_Start_IT+0xc8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_TIM_Base_Start_IT+0x76>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1e      	ldr	r2, [pc, #120]	@ (80040e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_TIM_Base_Start_IT+0x76>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1c      	ldr	r2, [pc, #112]	@ (80040e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_TIM_Base_Start_IT+0x76>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1b      	ldr	r2, [pc, #108]	@ (80040e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIM_Base_Start_IT+0x76>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d115      	bne.n	80040b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4b17      	ldr	r3, [pc, #92]	@ (80040f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004092:	4013      	ands	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b06      	cmp	r3, #6
 800409a:	d015      	beq.n	80040c8 <HAL_TIM_Base_Start_IT+0xb4>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a2:	d011      	beq.n	80040c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b4:	e008      	b.n	80040c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e000      	b.n	80040ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40013400 	.word	0x40013400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40015000 	.word	0x40015000
 80040f0:	00010007 	.word	0x00010007

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0202 	mvn.w	r2, #2
 8004128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9ad 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f99f 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f9b0 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f987 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f979 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f98a 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d020      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01b      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0208 	mvn.w	r2, #8
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2204      	movs	r2, #4
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f961 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f953 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f964 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0210 	mvn.w	r2, #16
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2208      	movs	r2, #8
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f93b 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f92d 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f93e 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0201 	mvn.w	r2, #1
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fb ffba 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb06 	bl	8004890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fafe 	bl	80048a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f8fd 	bl	80044c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0220 	mvn.w	r2, #32
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fac6 	bl	800487c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIM_ConfigClockSource+0x1c>
 8004310:	2302      	movs	r3, #2
 8004312:	e0b6      	b.n	8004482 <HAL_TIM_ConfigClockSource+0x18a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004332:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800433e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004350:	d03e      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0xd8>
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004356:	f200 8087 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x170>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435e:	f000 8086 	beq.w	800446e <HAL_TIM_ConfigClockSource+0x176>
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004366:	d87f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004368:	2b70      	cmp	r3, #112	@ 0x70
 800436a:	d01a      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0xaa>
 800436c:	2b70      	cmp	r3, #112	@ 0x70
 800436e:	d87b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004370:	2b60      	cmp	r3, #96	@ 0x60
 8004372:	d050      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x11e>
 8004374:	2b60      	cmp	r3, #96	@ 0x60
 8004376:	d877      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004378:	2b50      	cmp	r3, #80	@ 0x50
 800437a:	d03c      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0xfe>
 800437c:	2b50      	cmp	r3, #80	@ 0x50
 800437e:	d873      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004380:	2b40      	cmp	r3, #64	@ 0x40
 8004382:	d058      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x13e>
 8004384:	2b40      	cmp	r3, #64	@ 0x40
 8004386:	d86f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004388:	2b30      	cmp	r3, #48	@ 0x30
 800438a:	d064      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 800438c:	2b30      	cmp	r3, #48	@ 0x30
 800438e:	d86b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d060      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d867      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05c      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 800439c:	2b10      	cmp	r3, #16
 800439e:	d05a      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 80043a0:	e062      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b2:	f000 f9b7 	bl	8004724 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	609a      	str	r2, [r3, #8]
      break;
 80043ce:	e04f      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	f000 f9a0 	bl	8004724 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043f2:	609a      	str	r2, [r3, #8]
      break;
 80043f4:	e03c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	461a      	mov	r2, r3
 8004404:	f000 f914 	bl	8004630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2150      	movs	r1, #80	@ 0x50
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f96d 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 8004414:	e02c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004422:	461a      	mov	r2, r3
 8004424:	f000 f933 	bl	800468e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2160      	movs	r1, #96	@ 0x60
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f95d 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 8004434:	e01c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004442:	461a      	mov	r2, r3
 8004444:	f000 f8f4 	bl	8004630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2140      	movs	r1, #64	@ 0x40
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f94d 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 8004454:	e00c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 f944 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 8004466:	e003      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e000      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800446e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a48      	ldr	r2, [pc, #288]	@ (8004610 <TIM_Base_SetConfig+0x134>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a45      	ldr	r2, [pc, #276]	@ (8004614 <TIM_Base_SetConfig+0x138>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a44      	ldr	r2, [pc, #272]	@ (8004618 <TIM_Base_SetConfig+0x13c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a43      	ldr	r2, [pc, #268]	@ (800461c <TIM_Base_SetConfig+0x140>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a42      	ldr	r2, [pc, #264]	@ (8004620 <TIM_Base_SetConfig+0x144>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a37      	ldr	r2, [pc, #220]	@ (8004610 <TIM_Base_SetConfig+0x134>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a34      	ldr	r2, [pc, #208]	@ (8004614 <TIM_Base_SetConfig+0x138>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a33      	ldr	r2, [pc, #204]	@ (8004618 <TIM_Base_SetConfig+0x13c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a32      	ldr	r2, [pc, #200]	@ (800461c <TIM_Base_SetConfig+0x140>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a32      	ldr	r2, [pc, #200]	@ (8004624 <TIM_Base_SetConfig+0x148>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a31      	ldr	r2, [pc, #196]	@ (8004628 <TIM_Base_SetConfig+0x14c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a30      	ldr	r2, [pc, #192]	@ (800462c <TIM_Base_SetConfig+0x150>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2b      	ldr	r2, [pc, #172]	@ (8004620 <TIM_Base_SetConfig+0x144>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a18      	ldr	r2, [pc, #96]	@ (8004610 <TIM_Base_SetConfig+0x134>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <TIM_Base_SetConfig+0x100>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a19      	ldr	r2, [pc, #100]	@ (800461c <TIM_Base_SetConfig+0x140>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00f      	beq.n	80045dc <TIM_Base_SetConfig+0x100>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a19      	ldr	r2, [pc, #100]	@ (8004624 <TIM_Base_SetConfig+0x148>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x100>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <TIM_Base_SetConfig+0x14c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x100>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a17      	ldr	r2, [pc, #92]	@ (800462c <TIM_Base_SetConfig+0x150>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x100>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <TIM_Base_SetConfig+0x144>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]
  }
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40013400 	.word	0x40013400
 8004620:	40015000 	.word	0x40015000
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400
 800462c:	40014800 	.word	0x40014800

08004630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800465a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 030a 	bic.w	r3, r3, #10
 800466c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468e:	b480      	push	{r7}
 8004690:	b087      	sub	sp, #28
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f023 0210 	bic.w	r2, r3, #16
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	031b      	lsls	r3, r3, #12
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	f043 0307 	orr.w	r3, r3, #7
 8004710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800473e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	021a      	lsls	r2, r3, #8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	431a      	orrs	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4313      	orrs	r3, r2
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004778:	2302      	movs	r3, #2
 800477a:	e06d      	b.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a30      	ldr	r2, [pc, #192]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2d      	ldr	r2, [pc, #180]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d108      	bne.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01d      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f8:	d018      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1a      	ldr	r2, [pc, #104]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a11      	ldr	r2, [pc, #68]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d10c      	bne.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	4313      	orrs	r3, r2
 800483c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40015000 	.word	0x40015000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40014000 	.word	0x40014000

0800487c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <memset>:
 80048b8:	4402      	add	r2, r0
 80048ba:	4603      	mov	r3, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004904 <__libc_init_array+0x3c>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2600      	movs	r6, #0
 80048d4:	42a6      	cmp	r6, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	@ (800490c <__libc_init_array+0x44>)
 80048dc:	f000 f818 	bl	8004910 <_init>
 80048e0:	1b64      	subs	r4, r4, r5
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2600      	movs	r6, #0
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f0:	4798      	blx	r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fa:	4798      	blx	r3
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	08004958 	.word	0x08004958
 8004904:	08004958 	.word	0x08004958
 8004908:	08004958 	.word	0x08004958
 800490c:	0800495c 	.word	0x0800495c

08004910 <_init>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	bf00      	nop
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr

0800491c <_fini>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	bf00      	nop
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr
