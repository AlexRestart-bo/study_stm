
study_stm_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000476c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004900  08004900  00005900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004930  08004930  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004930  08004930  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00005930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004934  08004934  00005934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004938  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000001f8  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1c4  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efa  00000000  00000000  00013204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00015100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d1  00000000  00000000  00015db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212b6  00000000  00000000  00016781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010592  00000000  00000000  00037a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfb19  00000000  00000000  00047fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117ae2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003530  00000000  00000000  00117b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0011b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080048e8 	.word	0x080048e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080048e8 	.word	0x080048e8

080001d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80001e4:	f040 813c 	bne.w	8000460 <HAL_TIM_PeriodElapsedCallback+0x28c>
		if (all % times == 0 && !flag_const){//прореживание в зависимости от периода сигнала, поступающего на ADC
 80001e8:	4bb0      	ldr	r3, [pc, #704]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4ab0      	ldr	r2, [pc, #704]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80001ee:	7812      	ldrb	r2, [r2, #0]
 80001f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80001f4:	fb01 f202 	mul.w	r2, r1, r2
 80001f8:	1a9b      	subs	r3, r3, r2
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	f040 80d6 	bne.w	80003ac <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8000200:	4bac      	ldr	r3, [pc, #688]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	f040 80d1 	bne.w	80003ac <HAL_TIM_PeriodElapsedCallback+0x1d8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	2120      	movs	r1, #32
 800020e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000212:	f002 fa79 	bl	8002708 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2140      	movs	r1, #64	@ 0x40
 800021a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021e:	f002 fa73 	bl	8002708 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2180      	movs	r1, #128	@ 0x80
 8000226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022a:	f002 fa6d 	bl	8002708 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2140      	movs	r1, #64	@ 0x40
 8000232:	48a1      	ldr	r0, [pc, #644]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000234:	f002 fa68 	bl	8002708 <HAL_GPIO_WritePin>
			switch(end_transmit){
 8000238:	4ba0      	ldr	r3, [pc, #640]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b04      	cmp	r3, #4
 800023e:	f200 810a 	bhi.w	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
 8000242:	a201      	add	r2, pc, #4	@ (adr r2, 8000248 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000248:	080003a9 	.word	0x080003a9
 800024c:	0800025d 	.word	0x0800025d
 8000250:	0800028d 	.word	0x0800028d
 8000254:	080002d5 	.word	0x080002d5
 8000258:	08000335 	.word	0x08000335
				case 0:
					break;
				case 1:
					if (k == 0){
 800025c:	4b98      	ldr	r3, [pc, #608]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d109      	bne.n	8000278 <HAL_TIM_PeriodElapsedCallback+0xa4>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2120      	movs	r1, #32
 8000268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800026c:	f002 fa4c 	bl	8002708 <HAL_GPIO_WritePin>
						k = 1;
 8000270:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
					}
					else {
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
						k = 0;
					}
					break;
 8000276:	e098      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2120      	movs	r1, #32
 800027c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000280:	f002 fa42 	bl	8002708 <HAL_GPIO_WritePin>
						k = 0;
 8000284:	4b8e      	ldr	r3, [pc, #568]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
					break;
 800028a:	e08e      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
				case 2:
					if (k == 0){
 800028c:	4b8c      	ldr	r3, [pc, #560]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d10f      	bne.n	80002b4 <HAL_TIM_PeriodElapsedCallback+0xe0>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2120      	movs	r1, #32
 8000298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029c:	f002 fa34 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f002 fa2e 	bl	8002708 <HAL_GPIO_WritePin>
						k = 1;
 80002ac:	4b84      	ldr	r3, [pc, #528]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
					else {
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
						k = 0;
					}
					break;
 80002b2:	e07a      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2120      	movs	r1, #32
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f002 fa24 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2140      	movs	r1, #64	@ 0x40
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c8:	f002 fa1e 	bl	8002708 <HAL_GPIO_WritePin>
						k = 0;
 80002cc:	4b7c      	ldr	r3, [pc, #496]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
					break;
 80002d2:	e06a      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
				case 3:
					if (k == 0){
 80002d4:	4b7a      	ldr	r3, [pc, #488]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d115      	bne.n	8000308 <HAL_TIM_PeriodElapsedCallback+0x134>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	2120      	movs	r1, #32
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e4:	f002 fa10 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	@ 0x40
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f0:	f002 fa0a 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2180      	movs	r1, #128	@ 0x80
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fc:	f002 fa04 	bl	8002708 <HAL_GPIO_WritePin>
						k = 1;
 8000300:	4b6f      	ldr	r3, [pc, #444]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
						k = 0;
					}
					break;
 8000306:	e050      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2120      	movs	r1, #32
 800030c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000310:	f002 f9fa 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2140      	movs	r1, #64	@ 0x40
 8000318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031c:	f002 f9f4 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2180      	movs	r1, #128	@ 0x80
 8000324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000328:	f002 f9ee 	bl	8002708 <HAL_GPIO_WritePin>
						k = 0;
 800032c:	4b64      	ldr	r3, [pc, #400]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
					break;
 8000332:	e03a      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
				case 4:
					if (k == 0){
 8000334:	4b62      	ldr	r3, [pc, #392]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d11a      	bne.n	8000372 <HAL_TIM_PeriodElapsedCallback+0x19e>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f002 f9e0 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2140      	movs	r1, #64	@ 0x40
 800034c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000350:	f002 f9da 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2180      	movs	r1, #128	@ 0x80
 8000358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035c:	f002 f9d4 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2140      	movs	r1, #64	@ 0x40
 8000364:	4854      	ldr	r0, [pc, #336]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000366:	f002 f9cf 	bl	8002708 <HAL_GPIO_WritePin>
						k = 1;
 800036a:	4b55      	ldr	r3, [pc, #340]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
						k = 0;
					}
					break;
 8000370:	e01b      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2120      	movs	r1, #32
 8000376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037a:	f002 f9c5 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2140      	movs	r1, #64	@ 0x40
 8000382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000386:	f002 f9bf 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2180      	movs	r1, #128	@ 0x80
 800038e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000392:	f002 f9b9 	bl	8002708 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2140      	movs	r1, #64	@ 0x40
 800039a:	4847      	ldr	r0, [pc, #284]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800039c:	f002 f9b4 	bl	8002708 <HAL_GPIO_WritePin>
						k = 0;
 80003a0:	4b47      	ldr	r3, [pc, #284]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
					break;
 80003a6:	e000      	b.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d6>
					break;
 80003a8:	bf00      	nop
			switch(end_transmit){
 80003aa:	e054      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
			}
		}
		else if (flag_const) {
 80003ac:	4b41      	ldr	r3, [pc, #260]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d050      	beq.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
			switch(end_transmit){
 80003b4:	4b41      	ldr	r3, [pc, #260]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	d84c      	bhi.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
 80003bc:	a201      	add	r2, pc, #4	@ (adr r2, 80003c4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	08000457 	.word	0x08000457
 80003c8:	080003d9 	.word	0x080003d9
 80003cc:	080003e7 	.word	0x080003e7
 80003d0:	08000401 	.word	0x08000401
 80003d4:	08000427 	.word	0x08000427
				case 0:
					break;
				case 1:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e0:	f002 f992 	bl	8002708 <HAL_GPIO_WritePin>
					break;
 80003e4:	e037      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
				case 2:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2120      	movs	r1, #32
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ee:	f002 f98b 	bl	8002708 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2140      	movs	r1, #64	@ 0x40
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003fa:	f002 f985 	bl	8002708 <HAL_GPIO_WritePin>
					break;
 80003fe:	e02a      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
				case 3:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000400:	2201      	movs	r2, #1
 8000402:	2120      	movs	r1, #32
 8000404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000408:	f002 f97e 	bl	8002708 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2140      	movs	r1, #64	@ 0x40
 8000410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000414:	f002 f978 	bl	8002708 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2180      	movs	r1, #128	@ 0x80
 800041c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000420:	f002 f972 	bl	8002708 <HAL_GPIO_WritePin>
					break;
 8000424:	e017      	b.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x282>
				case 4:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2120      	movs	r1, #32
 800042a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042e:	f002 f96b 	bl	8002708 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2140      	movs	r1, #64	@ 0x40
 8000436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043a:	f002 f965 	bl	8002708 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2180      	movs	r1, #128	@ 0x80
 8000442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000446:	f002 f95f 	bl	8002708 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2140      	movs	r1, #64	@ 0x40
 800044e:	481a      	ldr	r0, [pc, #104]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000450:	f002 f95a 	bl	8002708 <HAL_GPIO_WritePin>
					break;
 8000454:	bf00      	nop
			}
		}
		all++;
 8000456:	4b15      	ldr	r3, [pc, #84]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	4a13      	ldr	r2, [pc, #76]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800045e:	6013      	str	r3, [r2, #0]
	}
	if (htim->Instance == TIM1){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a17      	ldr	r2, [pc, #92]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d11c      	bne.n	80004a4 <HAL_TIM_PeriodElapsedCallback+0x2d0>
		  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800046a:	2100      	movs	r1, #0
 800046c:	4816      	ldr	r0, [pc, #88]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800046e:	f001 ff29 	bl	80022c4 <HAL_DAC_Start>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000472:	4b16      	ldr	r3, [pc, #88]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	2200      	movs	r2, #0
 8000478:	2100      	movs	r1, #0
 800047a:	4813      	ldr	r0, [pc, #76]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800047c:	f001 fefd 	bl	800227a <HAL_DAC_SetValue>
		  if (n == 0){	//производство переменного сигнала
 8000480:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d107      	bne.n	8000498 <HAL_TIM_PeriodElapsedCallback+0x2c4>
			  dac_value = 2500;
 8000488:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800048a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800048e:	801a      	strh	r2, [r3, #0]
			  n = 1;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000492:	2201      	movs	r2, #1
 8000494:	701a      	strb	r2, [r3, #0]
		  else{
			  dac_value = 0;
			  n = 0;
		  }
	}
}
 8000496:	e005      	b.n	80004a4 <HAL_TIM_PeriodElapsedCallback+0x2d0>
			  dac_value = 0;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800049a:	2200      	movs	r2, #0
 800049c:	801a      	strh	r2, [r3, #0]
			  n = 0;
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000130 	.word	0x20000130
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000202 	.word	0x20000202
 80004b8:	48000400 	.word	0x48000400
 80004bc:	2000012c 	.word	0x2000012c
 80004c0:	2000012d 	.word	0x2000012d
 80004c4:	40012c00 	.word	0x40012c00
 80004c8:	2000007c 	.word	0x2000007c
 80004cc:	2000012a 	.word	0x2000012a
 80004d0:	2000012e 	.word	0x2000012e

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fc4b 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f8f1 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 fa8f 	bl	8000a04 <MX_GPIO_Init>
  MX_DAC1_Init();
 80004e6:	f000 f9c1 	bl	800086c <MX_DAC1_Init>
  MX_ADC1_Init();
 80004ea:	f000 f94f 	bl	800078c <MX_ADC1_Init>
  MX_TIM2_Init();
 80004ee:	f000 fa3b 	bl	8000968 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004f2:	f000 f9e5 	bl	80008c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004f6:	4866      	ldr	r0, [pc, #408]	@ (8000690 <main+0x1bc>)
 80004f8:	f003 fd78 	bl	8003fec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80004fc:	4865      	ldr	r0, [pc, #404]	@ (8000694 <main+0x1c0>)
 80004fe:	f003 fd75 	bl	8003fec <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
	  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
	  HAL_ADC_Start(&hadc1);
 8000502:	4865      	ldr	r0, [pc, #404]	@ (8000698 <main+0x1c4>)
 8000504:	f000 feba 	bl	800127c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000508:	2164      	movs	r1, #100	@ 0x64
 800050a:	4863      	ldr	r0, [pc, #396]	@ (8000698 <main+0x1c4>)
 800050c:	f000 ffcc 	bl	80014a8 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000510:	4861      	ldr	r0, [pc, #388]	@ (8000698 <main+0x1c4>)
 8000512:	f001 f8cb 	bl	80016ac <HAL_ADC_GetValue>
 8000516:	4603      	mov	r3, r0
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b60      	ldr	r3, [pc, #384]	@ (800069c <main+0x1c8>)
 800051c:	801a      	strh	r2, [r3, #0]
	  adc_array[i] = adc_value;
 800051e:	4b60      	ldr	r3, [pc, #384]	@ (80006a0 <main+0x1cc>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	4b5d      	ldr	r3, [pc, #372]	@ (800069c <main+0x1c8>)
 8000526:	8819      	ldrh	r1, [r3, #0]
 8000528:	4b5e      	ldr	r3, [pc, #376]	@ (80006a4 <main+0x1d0>)
 800052a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  i++;
 800052e:	4b5c      	ldr	r3, [pc, #368]	@ (80006a0 <main+0x1cc>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b5a      	ldr	r3, [pc, #360]	@ (80006a0 <main+0x1cc>)
 8000538:	701a      	strb	r2, [r3, #0]
	  if (i == 100){//происходит анализ массива, полученного с DAC
 800053a:	4b59      	ldr	r3, [pc, #356]	@ (80006a0 <main+0x1cc>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b64      	cmp	r3, #100	@ 0x64
 8000540:	d16a      	bne.n	8000618 <main+0x144>
		  for (int j = 0; j < 99; j++ ){
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e04b      	b.n	80005e0 <main+0x10c>
			  if (adc_array[j] > max){	//поиск предельного напряжения
 8000548:	4a56      	ldr	r2, [pc, #344]	@ (80006a4 <main+0x1d0>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000550:	4b55      	ldr	r3, [pc, #340]	@ (80006a8 <main+0x1d4>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	429a      	cmp	r2, r3
 8000556:	d905      	bls.n	8000564 <main+0x90>
				  max = adc_array[j];
 8000558:	4a52      	ldr	r2, [pc, #328]	@ (80006a4 <main+0x1d0>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000560:	4b51      	ldr	r3, [pc, #324]	@ (80006a8 <main+0x1d4>)
 8000562:	801a      	strh	r2, [r3, #0]
			  }
			  if (adc_array[j] < 20 && m == 0 && adc_array[j-1] > 20){	//проверка на наличие спада
 8000564:	4a4f      	ldr	r2, [pc, #316]	@ (80006a4 <main+0x1d0>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056c:	2b13      	cmp	r3, #19
 800056e:	d815      	bhi.n	800059c <main+0xc8>
 8000570:	4b4e      	ldr	r3, [pc, #312]	@ (80006ac <main+0x1d8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <main+0xc8>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a49      	ldr	r2, [pc, #292]	@ (80006a4 <main+0x1d0>)
 800057e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000582:	2b14      	cmp	r3, #20
 8000584:	d90a      	bls.n	800059c <main+0xc8>
				  m++;
 8000586:	4b49      	ldr	r3, [pc, #292]	@ (80006ac <main+0x1d8>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b47      	ldr	r3, [pc, #284]	@ (80006ac <main+0x1d8>)
 8000590:	701a      	strb	r2, [r3, #0]
				  period = j;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b46      	ldr	r3, [pc, #280]	@ (80006b0 <main+0x1dc>)
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e01e      	b.n	80005da <main+0x106>
			  }
			  else if(adc_array[j] > 20 && m == 1 && adc_array[j-1] < 20){ //проверка на наличиие подъема
 800059c:	4a41      	ldr	r2, [pc, #260]	@ (80006a4 <main+0x1d0>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a4:	2b14      	cmp	r3, #20
 80005a6:	d918      	bls.n	80005da <main+0x106>
 80005a8:	4b40      	ldr	r3, [pc, #256]	@ (80006ac <main+0x1d8>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d114      	bne.n	80005da <main+0x106>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	4a3b      	ldr	r2, [pc, #236]	@ (80006a4 <main+0x1d0>)
 80005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ba:	2b13      	cmp	r3, #19
 80005bc:	d80d      	bhi.n	80005da <main+0x106>
				  m ++;	//благодаря этой переменной период вычисляется лишь раз
 80005be:	4b3b      	ldr	r3, [pc, #236]	@ (80006ac <main+0x1d8>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b39      	ldr	r3, [pc, #228]	@ (80006ac <main+0x1d8>)
 80005c8:	701a      	strb	r2, [r3, #0]
				  period = j - period;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b38      	ldr	r3, [pc, #224]	@ (80006b0 <main+0x1dc>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b36      	ldr	r3, [pc, #216]	@ (80006b0 <main+0x1dc>)
 80005d8:	701a      	strb	r2, [r3, #0]
		  for (int j = 0; j < 99; j++ ){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b62      	cmp	r3, #98	@ 0x62
 80005e4:	ddb0      	ble.n	8000548 <main+0x74>

			  }

		  }
		  if (m == 1 || m == 0) flag_const = 1;	//проверка того, что сигнал имеет период
 80005e6:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <main+0x1d8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d003      	beq.n	80005f6 <main+0x122>
 80005ee:	4b2f      	ldr	r3, [pc, #188]	@ (80006ac <main+0x1d8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d102      	bne.n	80005fc <main+0x128>
 80005f6:	4b2f      	ldr	r3, [pc, #188]	@ (80006b4 <main+0x1e0>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
		  m = 0;
 80005fc:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <main+0x1d8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
		  amplitude = max;
 8000602:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <main+0x1d4>)
 8000604:	881a      	ldrh	r2, [r3, #0]
 8000606:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <main+0x1e4>)
 8000608:	801a      	strh	r2, [r3, #0]
		  times = period;
 800060a:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <main+0x1dc>)
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	4b2b      	ldr	r3, [pc, #172]	@ (80006bc <main+0x1e8>)
 8000610:	701a      	strb	r2, [r3, #0]
		  i = 0;
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <main+0x1cc>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	  }
	  //snprintf(trans_str, 63, "ADC %d\n", adc_value);
	  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)trans_str, strlen(trans_str));
	  //end_transmit = 0;
	  if (amplitude > 0 && amplitude <= 1000) end_transmit = 1;
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <main+0x1e4>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d008      	beq.n	8000632 <main+0x15e>
 8000620:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <main+0x1e4>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000628:	d803      	bhi.n	8000632 <main+0x15e>
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <main+0x1ec>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e02a      	b.n	8000688 <main+0x1b4>
	  else if (amplitude > 1000 && amplitude <= 2000) end_transmit = 2;
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <main+0x1e4>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800063a:	d908      	bls.n	800064e <main+0x17a>
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <main+0x1e4>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000644:	d803      	bhi.n	800064e <main+0x17a>
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <main+0x1ec>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	e01c      	b.n	8000688 <main+0x1b4>
	  else if (amplitude > 2000 && amplitude <= 3000) end_transmit = 3;
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <main+0x1e4>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000656:	d909      	bls.n	800066c <main+0x198>
 8000658:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <main+0x1e4>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000660:	4293      	cmp	r3, r2
 8000662:	d803      	bhi.n	800066c <main+0x198>
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <main+0x1ec>)
 8000666:	2203      	movs	r2, #3
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e00d      	b.n	8000688 <main+0x1b4>
	  else if (amplitude > 3000 && amplitude <= 4000) end_transmit = 4;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <main+0x1e4>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000674:	4293      	cmp	r3, r2
 8000676:	d907      	bls.n	8000688 <main+0x1b4>
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <main+0x1e4>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000680:	d802      	bhi.n	8000688 <main+0x1b4>
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <main+0x1ec>)
 8000684:	2204      	movs	r2, #4
 8000686:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
 8000688:	200a      	movs	r0, #10
 800068a:	f000 fbd9 	bl	8000e40 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800068e:	e738      	b.n	8000502 <main+0x2e>
 8000690:	200000dc 	.word	0x200000dc
 8000694:	20000090 	.word	0x20000090
 8000698:	2000002c 	.word	0x2000002c
 800069c:	20000128 	.word	0x20000128
 80006a0:	200001fc 	.word	0x200001fc
 80006a4:	20000134 	.word	0x20000134
 80006a8:	20000200 	.word	0x20000200
 80006ac:	200001fd 	.word	0x200001fd
 80006b0:	20000001 	.word	0x20000001
 80006b4:	20000202 	.word	0x20000202
 80006b8:	200001fe 	.word	0x200001fe
 80006bc:	20000000 	.word	0x20000000
 80006c0:	2000012c 	.word	0x2000012c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0a6      	sub	sp, #152	@ 0x98
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006ce:	2228      	movs	r2, #40	@ 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f8dc 	bl	8004890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2258      	movs	r2, #88	@ 0x58
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f8ce 	bl	8004890 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800070c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f809 	bl	8002738 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800072c:	f000 f9be 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 f818 	bl	8003780 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000756:	f000 f9a9 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <SystemClock_Config+0xc4>)
 800075c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV2;
 800075e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f003 f9c8 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800077a:	f000 f997 	bl	8000aac <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3798      	adds	r7, #152	@ 0x98
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	00101080 	.word	0x00101080

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d6:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007de:	2201      	movs	r2, #1
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_ADC1_Init+0xdc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC1_Init+0xdc>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000808:	4817      	ldr	r0, [pc, #92]	@ (8000868 <MX_ADC1_Init+0xdc>)
 800080a:	f000 fb3d 	bl	8000e88 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000814:	f000 f94a 	bl	8000aac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_ADC1_Init+0xdc>)
 8000824:	f001 fa3a 	bl	8001c9c <HAL_ADCEx_MultiModeConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800082e:	f000 f93d 	bl	8000aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000832:	2301      	movs	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2301      	movs	r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800083e:	2304      	movs	r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_ADC1_Init+0xdc>)
 8000850:	f000 ff3a 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800085a:	f000 f927 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000002c 	.word	0x2000002c

0800086c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_DAC1_Init+0x4c>)
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <MX_DAC1_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000882:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <MX_DAC1_Init+0x4c>)
 8000884:	f001 fcd7 	bl	8002236 <HAL_DAC_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 800088e:	f000 f90d 	bl	8000aac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_DAC1_Init+0x4c>)
 80008a2:	f001 fd5a 	bl	800235a <HAL_DAC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80008ac:	f000 f8fe 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000007c 	.word	0x2000007c
 80008bc:	40007400 	.word	0x40007400

080008c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_TIM1_Init+0xa0>)
 80008e0:	4a20      	ldr	r2, [pc, #128]	@ (8000964 <MX_TIM1_Init+0xa4>)
 80008e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_TIM1_Init+0xa0>)
 80008e6:	2223      	movs	r2, #35	@ 0x23
 80008e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_TIM1_Init+0xa0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_TIM1_Init+0xa0>)
 80008f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_TIM1_Init+0xa0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_TIM1_Init+0xa0>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_TIM1_Init+0xa0>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800090a:	4815      	ldr	r0, [pc, #84]	@ (8000960 <MX_TIM1_Init+0xa0>)
 800090c:	f003 fb16 	bl	8003f3c <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000916:	f000 f8c9 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_TIM1_Init+0xa0>)
 8000928:	f003 fcd2 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000932:	f000 f8bb 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_TIM1_Init+0xa0>)
 8000948:	f003 fef8 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000952:	f000 f8ab 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000090 	.word	0x20000090
 8000964:	40012c00 	.word	0x40012c00

08000968 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000986:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_TIM2_Init+0x98>)
 8000988:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800098e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_TIM2_Init+0x98>)
 8000990:	2248      	movs	r2, #72	@ 0x48
 8000992:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_TIM2_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800099a:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_TIM2_Init+0x98>)
 800099c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80009a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_TIM2_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_TIM2_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ae:	4814      	ldr	r0, [pc, #80]	@ (8000a00 <MX_TIM2_Init+0x98>)
 80009b0:	f003 fac4 	bl	8003f3c <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 f877 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <MX_TIM2_Init+0x98>)
 80009cc:	f003 fc80 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009d6:	f000 f869 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <MX_TIM2_Init+0x98>)
 80009e8:	f003 fea8 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009f2:	f000 f85b 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000dc 	.word	0x200000dc

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	21e4      	movs	r1, #228	@ 0xe4
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a52:	f001 fe59 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	@ 0x40
 8000a5a:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a5c:	f001 fe54 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a60:	23e4      	movs	r3, #228	@ 0xe4
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f001 fcbb 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a7e:	2340      	movs	r3, #64	@ 0x40
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a96:	f001 fcad 	bl	80023f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000400 	.word	0x48000400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b20:	d124      	bne.n	8000b6c <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_ADC_MspInit+0x74>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a13      	ldr	r2, [pc, #76]	@ (8000b74 <HAL_ADC_MspInit+0x74>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_ADC_MspInit+0x74>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_ADC_MspInit+0x74>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <HAL_ADC_MspInit+0x74>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <HAL_ADC_MspInit+0x74>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b68:	f001 fc44 	bl	80023f4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a15      	ldr	r2, [pc, #84]	@ (8000bec <HAL_DAC_MspInit+0x74>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d124      	bne.n	8000be4 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_DAC_MspInit+0x78>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <HAL_DAC_MspInit+0x78>)
 8000ba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_DAC_MspInit+0x78>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <HAL_DAC_MspInit+0x78>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_DAC_MspInit+0x78>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_DAC_MspInit+0x78>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f001 fc08 	bl	80023f4 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40007400 	.word	0x40007400
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1a      	ldr	r2, [pc, #104]	@ (8000c6c <HAL_TIM_Base_MspInit+0x78>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d114      	bne.n	8000c30 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <HAL_TIM_Base_MspInit+0x7c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <HAL_TIM_Base_MspInit+0x7c>)
 8000c0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_TIM_Base_MspInit+0x7c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2019      	movs	r0, #25
 8000c24:	f001 fad1 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f001 faea 	bl	8002202 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c2e:	e018      	b.n	8000c62 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c38:	d113      	bne.n	8000c62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_TIM_Base_MspInit+0x7c>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <HAL_TIM_Base_MspInit+0x7c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_TIM_Base_MspInit+0x7c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	201c      	movs	r0, #28
 8000c58:	f001 fab7 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c5c:	201c      	movs	r0, #28
 8000c5e:	f001 fad0 	bl	8002202 <HAL_NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40012c00 	.word	0x40012c00
 8000c70:	40021000 	.word	0x40021000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f899 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cda:	f003 f9f7 	bl	80040cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000090 	.word	0x20000090

08000ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <TIM2_IRQHandler+0x10>)
 8000cee:	f003 f9ed 	bl	80040cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000dc 	.word	0x200000dc

08000cfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d24:	f7ff ffea 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	@ (8000d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <LoopForever+0xe>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	@ (8000d6c <LoopForever+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f003 fda7 	bl	80048a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d52:	f7ff fbbf 	bl	80004d4 <main>

08000d56 <LoopForever>:

LoopForever:
    b LoopForever
 8000d56:	e7fe      	b.n	8000d56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d64:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 8000d68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d6c:	20000208 	.word	0x20000208

08000d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_2_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x28>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f001 fa15 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe92 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fa2d 	bl	800221e <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f001 f9f5 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000004 	.word	0x20000004
 8000df8:	2000000c 	.word	0x2000000c
 8000dfc:	20000008 	.word	0x20000008

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000204 	.word	0x20000204

08000e28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000204 	.word	0x20000204

08000e40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000000c 	.word	0x2000000c

08000e88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b09a      	sub	sp, #104	@ 0x68
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e1e3      	b.n	8001270 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d176      	bne.n	8000fa8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d152      	bne.n	8000f68 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fe0f 	bl	8000b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d13b      	bne.n	8000f68 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f001 f829 	bl	8001f48 <ADC_Disable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d12f      	bne.n	8000f68 <HAL_ADC_Init+0xe0>
 8000f08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d12b      	bne.n	8000f68 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	f043 0202 	orr.w	r2, r3, #2
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f32:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f42:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f44:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <HAL_ADC_Init+0x308>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a92      	ldr	r2, [pc, #584]	@ (8001194 <HAL_ADC_Init+0x30c>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0c9a      	lsrs	r2, r3, #18
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f5a:	e002      	b.n	8000f62 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f9      	bne.n	8000f5c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f84:	d110      	bne.n	8000fa8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f023 0312 	bic.w	r3, r3, #18
 8000f8e:	f043 0210 	orr.w	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f040 8150 	bne.w	8001256 <HAL_ADC_Init+0x3ce>
 8000fb6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 814b 	bne.w	8001256 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 8143 	bne.w	8001256 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000fd8:	f043 0202 	orr.w	r2, r3, #2
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fe8:	d004      	beq.n	8000ff4 <HAL_ADC_Init+0x16c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6a      	ldr	r2, [pc, #424]	@ (8001198 <HAL_ADC_Init+0x310>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_ADC_Init+0x170>
 8000ff4:	4b69      	ldr	r3, [pc, #420]	@ (800119c <HAL_ADC_Init+0x314>)
 8000ff6:	e000      	b.n	8000ffa <HAL_ADC_Init+0x172>
 8000ff8:	4b69      	ldr	r3, [pc, #420]	@ (80011a0 <HAL_ADC_Init+0x318>)
 8000ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001004:	d102      	bne.n	800100c <HAL_ADC_Init+0x184>
 8001006:	4b64      	ldr	r3, [pc, #400]	@ (8001198 <HAL_ADC_Init+0x310>)
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e01a      	b.n	8001042 <HAL_ADC_Init+0x1ba>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a61      	ldr	r2, [pc, #388]	@ (8001198 <HAL_ADC_Init+0x310>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d103      	bne.n	800101e <HAL_ADC_Init+0x196>
 8001016:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e011      	b.n	8001042 <HAL_ADC_Init+0x1ba>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a60      	ldr	r2, [pc, #384]	@ (80011a4 <HAL_ADC_Init+0x31c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d102      	bne.n	800102e <HAL_ADC_Init+0x1a6>
 8001028:	4b5f      	ldr	r3, [pc, #380]	@ (80011a8 <HAL_ADC_Init+0x320>)
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e009      	b.n	8001042 <HAL_ADC_Init+0x1ba>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a5d      	ldr	r2, [pc, #372]	@ (80011a8 <HAL_ADC_Init+0x320>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d102      	bne.n	800103e <HAL_ADC_Init+0x1b6>
 8001038:	4b5a      	ldr	r3, [pc, #360]	@ (80011a4 <HAL_ADC_Init+0x31c>)
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e001      	b.n	8001042 <HAL_ADC_Init+0x1ba>
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <HAL_ADC_Init+0x1da>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x1da>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_ADC_Init+0x1dc>
 8001062:	2300      	movs	r3, #0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d11c      	bne.n	80010a2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001068:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800106a:	2b00      	cmp	r3, #0
 800106c:	d010      	beq.n	8001090 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <HAL_ADC_Init+0x202>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_ADC_Init+0x202>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_ADC_Init+0x204>
 800108a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800108c:	2b00      	cmp	r3, #0
 800108e:	d108      	bne.n	80010a2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	431a      	orrs	r2, r3
 800109e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010a0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7e5b      	ldrb	r3, [r3, #25]
 80010a6:	035b      	lsls	r3, r3, #13
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80010ac:	2a01      	cmp	r2, #1
 80010ae:	d002      	beq.n	80010b6 <HAL_ADC_Init+0x22e>
 80010b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010b4:	e000      	b.n	80010b8 <HAL_ADC_Init+0x230>
 80010b6:	2200      	movs	r2, #0
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010c8:	4313      	orrs	r3, r2
 80010ca:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d11b      	bne.n	800110e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7e5b      	ldrb	r3, [r3, #25]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	3b01      	subs	r3, #1
 80010e4:	045a      	lsls	r2, r3, #17
 80010e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010e8:	4313      	orrs	r3, r2
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80010f0:	e00d      	b.n	800110e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80010fa:	f043 0220 	orr.w	r2, r3, #32
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001112:	2b01      	cmp	r3, #1
 8001114:	d054      	beq.n	80011c0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <HAL_ADC_Init+0x31c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d004      	beq.n	800112a <HAL_ADC_Init+0x2a2>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a20      	ldr	r2, [pc, #128]	@ (80011a8 <HAL_ADC_Init+0x320>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d140      	bne.n	80011ac <HAL_ADC_Init+0x324>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001132:	d02a      	beq.n	800118a <HAL_ADC_Init+0x302>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800113c:	d022      	beq.n	8001184 <HAL_ADC_Init+0x2fc>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001142:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001146:	d01a      	beq.n	800117e <HAL_ADC_Init+0x2f6>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114c:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001150:	d012      	beq.n	8001178 <HAL_ADC_Init+0x2f0>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001156:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800115a:	d00a      	beq.n	8001172 <HAL_ADC_Init+0x2ea>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001160:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001164:	d002      	beq.n	800116c <HAL_ADC_Init+0x2e4>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	e023      	b.n	80011b4 <HAL_ADC_Init+0x32c>
 800116c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001170:	e020      	b.n	80011b4 <HAL_ADC_Init+0x32c>
 8001172:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001176:	e01d      	b.n	80011b4 <HAL_ADC_Init+0x32c>
 8001178:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800117c:	e01a      	b.n	80011b4 <HAL_ADC_Init+0x32c>
 800117e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001182:	e017      	b.n	80011b4 <HAL_ADC_Init+0x32c>
 8001184:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001188:	e014      	b.n	80011b4 <HAL_ADC_Init+0x32c>
 800118a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800118e:	e011      	b.n	80011b4 <HAL_ADC_Init+0x32c>
 8001190:	20000004 	.word	0x20000004
 8001194:	431bde83 	.word	0x431bde83
 8001198:	50000100 	.word	0x50000100
 800119c:	50000300 	.word	0x50000300
 80011a0:	50000700 	.word	0x50000700
 80011a4:	50000400 	.word	0x50000400
 80011a8:	50000500 	.word	0x50000500
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011b8:	4313      	orrs	r3, r2
 80011ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011bc:	4313      	orrs	r3, r2
 80011be:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d114      	bne.n	80011f8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011dc:	f023 0302 	bic.w	r3, r3, #2
 80011e0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7e1b      	ldrb	r3, [r3, #24]
 80011e6:	039a      	lsls	r2, r3, #14
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011f4:	4313      	orrs	r3, r2
 80011f6:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <HAL_ADC_Init+0x3f0>)
 8001200:	4013      	ands	r3, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001208:	430b      	orrs	r3, r1
 800120a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10c      	bne.n	800122e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f023 010f 	bic.w	r1, r3, #15
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	631a      	str	r2, [r3, #48]	@ 0x30
 800122c:	e007      	b.n	800123e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 020f 	bic.w	r2, r2, #15
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f023 0303 	bic.w	r3, r3, #3
 800124c:	f043 0201 	orr.w	r2, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	@ 0x40
 8001254:	e00a      	b.n	800126c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	f023 0312 	bic.w	r3, r3, #18
 800125e:	f043 0210 	orr.w	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800126c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001270:	4618      	mov	r0, r3
 8001272:	3768      	adds	r7, #104	@ 0x68
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	fff0c007 	.word	0xfff0c007

0800127c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 80f9 	bne.w	800148a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Start+0x2a>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e0f4      	b.n	8001490 <HAL_ADC_Start+0x214>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fde6 	bl	8001e80 <ADC_Enable>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 80e0 	bne.w	8001480 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012dc:	d004      	beq.n	80012e8 <HAL_ADC_Start+0x6c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6d      	ldr	r2, [pc, #436]	@ (8001498 <HAL_ADC_Start+0x21c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d106      	bne.n	80012f6 <HAL_ADC_Start+0x7a>
 80012e8:	4b6c      	ldr	r3, [pc, #432]	@ (800149c <HAL_ADC_Start+0x220>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d010      	beq.n	8001316 <HAL_ADC_Start+0x9a>
 80012f4:	e005      	b.n	8001302 <HAL_ADC_Start+0x86>
 80012f6:	4b6a      	ldr	r3, [pc, #424]	@ (80014a0 <HAL_ADC_Start+0x224>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_ADC_Start+0x9a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800130a:	d004      	beq.n	8001316 <HAL_ADC_Start+0x9a>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a64      	ldr	r2, [pc, #400]	@ (80014a4 <HAL_ADC_Start+0x228>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d115      	bne.n	8001342 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d036      	beq.n	800139e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001340:	e02d      	b.n	800139e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001356:	d004      	beq.n	8001362 <HAL_ADC_Start+0xe6>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a4e      	ldr	r2, [pc, #312]	@ (8001498 <HAL_ADC_Start+0x21c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10a      	bne.n	8001378 <HAL_ADC_Start+0xfc>
 8001362:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf14      	ite	ne
 8001370:	2301      	movne	r3, #1
 8001372:	2300      	moveq	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	e008      	b.n	800138a <HAL_ADC_Start+0x10e>
 8001378:	4b4a      	ldr	r3, [pc, #296]	@ (80014a4 <HAL_ADC_Start+0x228>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001396:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013aa:	d106      	bne.n	80013ba <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	f023 0206 	bic.w	r2, r3, #6
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80013b8:	e002      	b.n	80013c0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	221c      	movs	r2, #28
 80013ce:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_Start+0x168>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a2e      	ldr	r2, [pc, #184]	@ (8001498 <HAL_ADC_Start+0x21c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <HAL_ADC_Start+0x176>
 80013e4:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <HAL_ADC_Start+0x220>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d03e      	beq.n	800146e <HAL_ADC_Start+0x1f2>
 80013f0:	e005      	b.n	80013fe <HAL_ADC_Start+0x182>
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <HAL_ADC_Start+0x224>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d037      	beq.n	800146e <HAL_ADC_Start+0x1f2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001406:	d004      	beq.n	8001412 <HAL_ADC_Start+0x196>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a22      	ldr	r2, [pc, #136]	@ (8001498 <HAL_ADC_Start+0x21c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d106      	bne.n	8001420 <HAL_ADC_Start+0x1a4>
 8001412:	4b22      	ldr	r3, [pc, #136]	@ (800149c <HAL_ADC_Start+0x220>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b05      	cmp	r3, #5
 800141c:	d027      	beq.n	800146e <HAL_ADC_Start+0x1f2>
 800141e:	e005      	b.n	800142c <HAL_ADC_Start+0x1b0>
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <HAL_ADC_Start+0x224>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2b05      	cmp	r3, #5
 800142a:	d020      	beq.n	800146e <HAL_ADC_Start+0x1f2>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001434:	d004      	beq.n	8001440 <HAL_ADC_Start+0x1c4>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_ADC_Start+0x21c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d106      	bne.n	800144e <HAL_ADC_Start+0x1d2>
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_ADC_Start+0x220>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	2b09      	cmp	r3, #9
 800144a:	d010      	beq.n	800146e <HAL_ADC_Start+0x1f2>
 800144c:	e005      	b.n	800145a <HAL_ADC_Start+0x1de>
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <HAL_ADC_Start+0x224>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2b09      	cmp	r3, #9
 8001458:	d009      	beq.n	800146e <HAL_ADC_Start+0x1f2>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001462:	d004      	beq.n	800146e <HAL_ADC_Start+0x1f2>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <HAL_ADC_Start+0x228>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10f      	bne.n	800148e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0204 	orr.w	r2, r2, #4
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	e006      	b.n	800148e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001488:	e001      	b.n	800148e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800148a:	2302      	movs	r3, #2
 800148c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	50000100 	.word	0x50000100
 800149c:	50000300 	.word	0x50000300
 80014a0:	50000700 	.word	0x50000700
 80014a4:	50000400 	.word	0x50000400

080014a8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d102      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80014be:	2308      	movs	r3, #8
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e03a      	b.n	800153a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014cc:	d004      	beq.n	80014d8 <HAL_ADC_PollForConversion+0x30>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a72      	ldr	r2, [pc, #456]	@ (800169c <HAL_ADC_PollForConversion+0x1f4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_PollForConversion+0x34>
 80014d8:	4b71      	ldr	r3, [pc, #452]	@ (80016a0 <HAL_ADC_PollForConversion+0x1f8>)
 80014da:	e000      	b.n	80014de <HAL_ADC_PollForConversion+0x36>
 80014dc:	4b71      	ldr	r3, [pc, #452]	@ (80016a4 <HAL_ADC_PollForConversion+0x1fc>)
 80014de:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d112      	bne.n	8001512 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d11d      	bne.n	8001536 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f043 0220 	orr.w	r2, r3, #32
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0bf      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f043 0220 	orr.w	r2, r3, #32
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0ad      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001536:	230c      	movs	r3, #12
 8001538:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001542:	d004      	beq.n	800154e <HAL_ADC_PollForConversion+0xa6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a54      	ldr	r2, [pc, #336]	@ (800169c <HAL_ADC_PollForConversion+0x1f4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d106      	bne.n	800155c <HAL_ADC_PollForConversion+0xb4>
 800154e:	4b54      	ldr	r3, [pc, #336]	@ (80016a0 <HAL_ADC_PollForConversion+0x1f8>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	2b00      	cmp	r3, #0
 8001558:	d010      	beq.n	800157c <HAL_ADC_PollForConversion+0xd4>
 800155a:	e005      	b.n	8001568 <HAL_ADC_PollForConversion+0xc0>
 800155c:	4b51      	ldr	r3, [pc, #324]	@ (80016a4 <HAL_ADC_PollForConversion+0x1fc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	2b00      	cmp	r3, #0
 8001566:	d009      	beq.n	800157c <HAL_ADC_PollForConversion+0xd4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001570:	d004      	beq.n	800157c <HAL_ADC_PollForConversion+0xd4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a4c      	ldr	r2, [pc, #304]	@ (80016a8 <HAL_ADC_PollForConversion+0x200>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d104      	bne.n	8001586 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	e00f      	b.n	80015a6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800158e:	d004      	beq.n	800159a <HAL_ADC_PollForConversion+0xf2>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a41      	ldr	r2, [pc, #260]	@ (800169c <HAL_ADC_PollForConversion+0x1f4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d102      	bne.n	80015a0 <HAL_ADC_PollForConversion+0xf8>
 800159a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800159e:	e000      	b.n	80015a2 <HAL_ADC_PollForConversion+0xfa>
 80015a0:	4b41      	ldr	r3, [pc, #260]	@ (80016a8 <HAL_ADC_PollForConversion+0x200>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80015a6:	f7ff fc3f 	bl	8000e28 <HAL_GetTick>
 80015aa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015ac:	e021      	b.n	80015f2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d01d      	beq.n	80015f2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_ADC_PollForConversion+0x124>
 80015bc:	f7ff fc34 	bl	8000e28 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d212      	bcs.n	80015f2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10b      	bne.n	80015f2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f043 0204 	orr.w	r2, r3, #4
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e04f      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0d6      	beq.n	80015ae <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001616:	2b00      	cmp	r3, #0
 8001618:	d131      	bne.n	800167e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001620:	2b00      	cmp	r3, #0
 8001622:	d12c      	bne.n	800167e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b08      	cmp	r3, #8
 8001630:	d125      	bne.n	800167e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d112      	bne.n	8001666 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d112      	bne.n	800167e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	@ 0x40
 8001664:	e00b      	b.n	800167e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f043 0220 	orr.w	r2, r3, #32
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	50000100 	.word	0x50000100
 80016a0:	50000300 	.word	0x50000300
 80016a4:	50000700 	.word	0x50000700
 80016a8:	50000400 	.word	0x50000400

080016ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b09b      	sub	sp, #108	@ 0x6c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x22>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e2c8      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x5b4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 82ac 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d81c      	bhi.n	8001744 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	461a      	mov	r2, r3
 800171e:	231f      	movs	r3, #31
 8001720:	4093      	lsls	r3, r2
 8001722:	43db      	mvns	r3, r3
 8001724:	4019      	ands	r1, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	631a      	str	r2, [r3, #48]	@ 0x30
 8001742:	e063      	b.n	800180c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b09      	cmp	r3, #9
 800174a:	d81e      	bhi.n	800178a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	3b1e      	subs	r3, #30
 8001760:	221f      	movs	r2, #31
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	4019      	ands	r1, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	3b1e      	subs	r3, #30
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34
 8001788:	e040      	b.n	800180c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b0e      	cmp	r3, #14
 8001790:	d81e      	bhi.n	80017d0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	3b3c      	subs	r3, #60	@ 0x3c
 80017a6:	221f      	movs	r2, #31
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4019      	ands	r1, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	3b3c      	subs	r3, #60	@ 0x3c
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80017ce:	e01d      	b.n	800180c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	3b5a      	subs	r3, #90	@ 0x5a
 80017e4:	221f      	movs	r2, #31
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	4019      	ands	r1, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	3b5a      	subs	r3, #90	@ 0x5a
 8001800:	fa00 f203 	lsl.w	r2, r0, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80e5 	bne.w	80019e6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b09      	cmp	r3, #9
 8001822:	d91c      	bls.n	800185e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6999      	ldr	r1, [r3, #24]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	3b1e      	subs	r3, #30
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	4019      	ands	r1, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6898      	ldr	r0, [r3, #8]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	3b1e      	subs	r3, #30
 8001850:	fa00 f203 	lsl.w	r2, r0, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	619a      	str	r2, [r3, #24]
 800185c:	e019      	b.n	8001892 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6959      	ldr	r1, [r3, #20]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	2207      	movs	r2, #7
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	4019      	ands	r1, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6898      	ldr	r0, [r3, #8]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	fa00 f203 	lsl.w	r2, r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d84f      	bhi.n	8001954 <HAL_ADC_ConfigChannel+0x28c>
 80018b4:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <HAL_ADC_ConfigChannel+0x1f4>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	080018ef 	.word	0x080018ef
 80018c4:	08001911 	.word	0x08001911
 80018c8:	08001933 	.word	0x08001933
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018d2:	4b99      	ldr	r3, [pc, #612]	@ (8001b38 <HAL_ADC_ConfigChannel+0x470>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	0691      	lsls	r1, r2, #26
 80018dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018de:	430a      	orrs	r2, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018ea:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ec:	e07b      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018f4:	4b90      	ldr	r3, [pc, #576]	@ (8001b38 <HAL_ADC_ConfigChannel+0x470>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	0691      	lsls	r1, r2, #26
 80018fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001900:	430a      	orrs	r2, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800190c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800190e:	e06a      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001916:	4b88      	ldr	r3, [pc, #544]	@ (8001b38 <HAL_ADC_ConfigChannel+0x470>)
 8001918:	4013      	ands	r3, r2
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	0691      	lsls	r1, r2, #26
 8001920:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001922:	430a      	orrs	r2, r1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800192e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001930:	e059      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001938:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <HAL_ADC_ConfigChannel+0x470>)
 800193a:	4013      	ands	r3, r2
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	0691      	lsls	r1, r2, #26
 8001942:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001944:	430a      	orrs	r2, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001950:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001952:	e048      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001976:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800197e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	069b      	lsls	r3, r3, #26
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800199a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	069b      	lsls	r3, r3, #26
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d107      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80019be:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	069b      	lsls	r3, r3, #26
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80019e2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80019e4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x33e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x33e>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x340>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 8131 	bne.w	8001c70 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00f      	beq.n	8001a36 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2201      	movs	r2, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	400a      	ands	r2, r1
 8001a30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001a34:	e049      	b.n	8001aca <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	409a      	lsls	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d91c      	bls.n	8001a92 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6999      	ldr	r1, [r3, #24]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	3b1b      	subs	r3, #27
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4019      	ands	r1, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6898      	ldr	r0, [r3, #8]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	3b1b      	subs	r3, #27
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	619a      	str	r2, [r3, #24]
 8001a90:	e01b      	b.n	8001aca <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6959      	ldr	r1, [r3, #20]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4019      	ands	r1, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6898      	ldr	r0, [r3, #8]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad2:	d004      	beq.n	8001ade <HAL_ADC_ConfigChannel+0x416>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_ADC_ConfigChannel+0x474>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x41a>
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_ADC_ConfigChannel+0x478>)
 8001ae0:	e000      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x41c>
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_ADC_ConfigChannel+0x47c>)
 8001ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d105      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d015      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001afe:	2b11      	cmp	r3, #17
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	f040 80ac 	bne.w	8001c70 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 80a5 	bne.w	8001c70 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x480>
 8001b30:	4b02      	ldr	r3, [pc, #8]	@ (8001b3c <HAL_ADC_ConfigChannel+0x474>)
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e023      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x4b6>
 8001b36:	bf00      	nop
 8001b38:	83fff000 	.word	0x83fff000
 8001b3c:	50000100 	.word	0x50000100
 8001b40:	50000300 	.word	0x50000300
 8001b44:	50000700 	.word	0x50000700
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c88 <HAL_ADC_ConfigChannel+0x5c0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d103      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x492>
 8001b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e011      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x4b6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c8c <HAL_ADC_ConfigChannel+0x5c4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d102      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x4a2>
 8001b64:	4b4a      	ldr	r3, [pc, #296]	@ (8001c90 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e009      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x4b6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a48      	ldr	r2, [pc, #288]	@ (8001c90 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d102      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x4b2>
 8001b74:	4b45      	ldr	r3, [pc, #276]	@ (8001c8c <HAL_ADC_ConfigChannel+0x5c4>)
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e001      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x4b6>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x4d6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x4d6>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x4d8>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d150      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d010      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x4fe>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x4fe>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x500>
 8001bc6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d13c      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d11d      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x548>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bdc:	d118      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001be8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bea:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <HAL_ADC_ConfigChannel+0x5cc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2a      	ldr	r2, [pc, #168]	@ (8001c98 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	0c9a      	lsrs	r2, r3, #18
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c0e:	e02e      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b11      	cmp	r3, #17
 8001c16:	d10b      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x568>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c20:	d106      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c2c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c2e:	e01e      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b12      	cmp	r3, #18
 8001c36:	d11a      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c42:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c44:	e013      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f043 0220 	orr.w	r2, r3, #32
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001c58:	e00a      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f043 0220 	orr.w	r2, r3, #32
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001c6c:	e000      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c6e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	376c      	adds	r7, #108	@ 0x6c
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	50000100 	.word	0x50000100
 8001c8c:	50000400 	.word	0x50000400
 8001c90:	50000500 	.word	0x50000500
 8001c94:	20000004 	.word	0x20000004
 8001c98:	431bde83 	.word	0x431bde83

08001c9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b099      	sub	sp, #100	@ 0x64
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb4:	d102      	bne.n	8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	e01a      	b.n	8001cf2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d103      	bne.n	8001cce <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001cc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	e011      	b.n	8001cf2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a67      	ldr	r2, [pc, #412]	@ (8001e70 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d102      	bne.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cd8:	4b66      	ldr	r3, [pc, #408]	@ (8001e74 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	e009      	b.n	8001cf2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a64      	ldr	r2, [pc, #400]	@ (8001e74 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d102      	bne.n	8001cee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ce8:	4b61      	ldr	r3, [pc, #388]	@ (8001e70 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	e001      	b.n	8001cf2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0b0      	b.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e0a9      	b.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 808d 	bne.w	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 8086 	bne.w	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d38:	d004      	beq.n	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4b      	ldr	r2, [pc, #300]	@ (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d44:	4b4c      	ldr	r3, [pc, #304]	@ (8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d46:	e000      	b.n	8001d4a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d48:	4b4c      	ldr	r3, [pc, #304]	@ (8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d040      	beq.n	8001dd6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d66:	035b      	lsls	r3, r3, #13
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d6e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d15c      	bne.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001db2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d14b      	bne.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001db8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001dc0:	f023 030f 	bic.w	r3, r3, #15
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	6811      	ldr	r1, [r2, #0]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6892      	ldr	r2, [r2, #8]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dd2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dd4:	e03c      	b.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001de0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d123      	bne.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e24:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d112      	bne.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e32:	f023 030f 	bic.w	r3, r3, #15
 8001e36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e38:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e3a:	e009      	b.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001e4e:	e000      	b.n	8001e52 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e50:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3764      	adds	r7, #100	@ 0x64
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	50000100 	.word	0x50000100
 8001e70:	50000400 	.word	0x50000400
 8001e74:	50000500 	.word	0x50000500
 8001e78:	50000300 	.word	0x50000300
 8001e7c:	50000700 	.word	0x50000700

08001e80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d108      	bne.n	8001eac <ADC_Enable+0x2c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <ADC_Enable+0x2c>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <ADC_Enable+0x2e>
 8001eac:	2300      	movs	r3, #0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d143      	bne.n	8001f3a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <ADC_Enable+0xc4>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f043 0210 	orr.w	r2, r3, #16
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e02f      	b.n	8001f3c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001eec:	f7fe ff9c 	bl	8000e28 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ef2:	e01b      	b.n	8001f2c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ef4:	f7fe ff98 	bl	8000e28 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d914      	bls.n	8001f2c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d00d      	beq.n	8001f2c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	f043 0210 	orr.w	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e007      	b.n	8001f3c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d1dc      	bne.n	8001ef4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	8000003f 	.word	0x8000003f

08001f48 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <ADC_Disable+0x2c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <ADC_Disable+0x2c>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <ADC_Disable+0x2e>
 8001f74:	2300      	movs	r3, #0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d047      	beq.n	800200a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030d 	and.w	r3, r3, #13
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10f      	bne.n	8001fa8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0202 	orr.w	r2, r2, #2
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fa0:	f7fe ff42 	bl	8000e28 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fa6:	e029      	b.n	8001ffc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f043 0210 	orr.w	r2, r3, #16
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e023      	b.n	800200c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fc4:	f7fe ff30 	bl	8000e28 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d914      	bls.n	8001ffc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10d      	bne.n	8001ffc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e007      	b.n	800200c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d0dc      	beq.n	8001fc4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4907      	ldr	r1, [pc, #28]	@ (80020b0 <__NVIC_EnableIRQ+0x38>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff29 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff3e 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff8e 	bl	8002108 <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5d 	bl	80020b4 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff31 	bl	8002078 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e014      	b.n	8002272 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	791b      	ldrb	r3, [r3, #4]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7fe fc8d 	bl	8000b78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3308      	adds	r3, #8
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e004      	b.n	80022ae <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	3314      	adds	r3, #20
 80022ac:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	461a      	mov	r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	795b      	ldrb	r3, [r3, #5]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_DAC_Start+0x16>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e039      	b.n	800234e <HAL_DAC_Start+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	2201      	movs	r2, #1
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	409a      	lsls	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10f      	bne.n	8002320 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800230a:	2b3c      	cmp	r3, #60	@ 0x3c
 800230c:	d118      	bne.n	8002340 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	e00f      	b.n	8002340 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800232a:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 800232e:	d107      	bne.n	8002340 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0202 	orr.w	r2, r2, #2
 800233e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800235a:	b480      	push	{r7}
 800235c:	b087      	sub	sp, #28
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	795b      	ldrb	r3, [r3, #5]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_DAC_ConfigChannel+0x20>
 8002376:	2302      	movs	r3, #2
 8002378:	e036      	b.n	80023e8 <HAL_DAC_ConfigChannel+0x8e>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2202      	movs	r2, #2
 8002384:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800238e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4013      	ands	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	22c0      	movs	r2, #192	@ 0xc0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002402:	e160      	b.n	80026c6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8152 	beq.w	80026c0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d005      	beq.n	8002434 <HAL_GPIO_Init+0x40>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d017      	beq.n	80024d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d123      	bne.n	8002526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	6939      	ldr	r1, [r7, #16]
 8002522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80ac 	beq.w	80026c0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b5e      	ldr	r3, [pc, #376]	@ (80026e4 <HAL_GPIO_Init+0x2f0>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a5d      	ldr	r2, [pc, #372]	@ (80026e4 <HAL_GPIO_Init+0x2f0>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b5b      	ldr	r3, [pc, #364]	@ (80026e4 <HAL_GPIO_Init+0x2f0>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002580:	4a59      	ldr	r2, [pc, #356]	@ (80026e8 <HAL_GPIO_Init+0x2f4>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025aa:	d025      	beq.n	80025f8 <HAL_GPIO_Init+0x204>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a4f      	ldr	r2, [pc, #316]	@ (80026ec <HAL_GPIO_Init+0x2f8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d01f      	beq.n	80025f4 <HAL_GPIO_Init+0x200>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4e      	ldr	r2, [pc, #312]	@ (80026f0 <HAL_GPIO_Init+0x2fc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d019      	beq.n	80025f0 <HAL_GPIO_Init+0x1fc>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4d      	ldr	r2, [pc, #308]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d013      	beq.n	80025ec <HAL_GPIO_Init+0x1f8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <HAL_GPIO_Init+0x304>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00d      	beq.n	80025e8 <HAL_GPIO_Init+0x1f4>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a4b      	ldr	r2, [pc, #300]	@ (80026fc <HAL_GPIO_Init+0x308>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_Init+0x1f0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_GPIO_Init+0x1ec>
 80025dc:	2306      	movs	r3, #6
 80025de:	e00c      	b.n	80025fa <HAL_GPIO_Init+0x206>
 80025e0:	2307      	movs	r3, #7
 80025e2:	e00a      	b.n	80025fa <HAL_GPIO_Init+0x206>
 80025e4:	2305      	movs	r3, #5
 80025e6:	e008      	b.n	80025fa <HAL_GPIO_Init+0x206>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e006      	b.n	80025fa <HAL_GPIO_Init+0x206>
 80025ec:	2303      	movs	r3, #3
 80025ee:	e004      	b.n	80025fa <HAL_GPIO_Init+0x206>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e002      	b.n	80025fa <HAL_GPIO_Init+0x206>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_GPIO_Init+0x206>
 80025f8:	2300      	movs	r3, #0
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	f002 0203 	and.w	r2, r2, #3
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	4093      	lsls	r3, r2
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800260a:	4937      	ldr	r1, [pc, #220]	@ (80026e8 <HAL_GPIO_Init+0x2f4>)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002618:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <HAL_GPIO_Init+0x310>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800263c:	4a31      	ldr	r2, [pc, #196]	@ (8002704 <HAL_GPIO_Init+0x310>)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002642:	4b30      	ldr	r3, [pc, #192]	@ (8002704 <HAL_GPIO_Init+0x310>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002666:	4a27      	ldr	r2, [pc, #156]	@ (8002704 <HAL_GPIO_Init+0x310>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_GPIO_Init+0x310>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002690:	4a1c      	ldr	r2, [pc, #112]	@ (8002704 <HAL_GPIO_Init+0x310>)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002696:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <HAL_GPIO_Init+0x310>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <HAL_GPIO_Init+0x310>)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f ae97 	bne.w	8002404 <HAL_GPIO_Init+0x10>
  }
}
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40010000 	.word	0x40010000
 80026ec:	48000400 	.word	0x48000400
 80026f0:	48000800 	.word	0x48000800
 80026f4:	48000c00 	.word	0x48000c00
 80026f8:	48001000 	.word	0x48001000
 80026fc:	48001400 	.word	0x48001400
 8002700:	48001800 	.word	0x48001800
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
 8002714:	4613      	mov	r3, r2
 8002716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002718:	787b      	ldrb	r3, [r7, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002724:	e002      	b.n	800272c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800273e:	af00      	add	r7, sp, #0
 8002740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002744:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002748:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f001 b80a 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002762:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8161 	beq.w	8002a36 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002774:	4bae      	ldr	r3, [pc, #696]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b04      	cmp	r3, #4
 800277e:	d00c      	beq.n	800279a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002780:	4bab      	ldr	r3, [pc, #684]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d157      	bne.n	800283c <HAL_RCC_OscConfig+0x104>
 800278c:	4ba8      	ldr	r3, [pc, #672]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002798:	d150      	bne.n	800283c <HAL_RCC_OscConfig+0x104>
 800279a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800279e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ba:	d802      	bhi.n	80027c2 <HAL_RCC_OscConfig+0x8a>
 80027bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0xb6>
 80027c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80027d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027da:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80027de:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80027ea:	4b91      	ldr	r3, [pc, #580]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027f2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80027f6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80027fa:	fa92 f2a2 	rbit	r2, r2
 80027fe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002802:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002806:	fab2 f282 	clz	r2, r2
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f042 0220 	orr.w	r2, r2, #32
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f002 021f 	and.w	r2, r2, #31
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8108 	beq.w	8002a34 <HAL_RCC_OscConfig+0x2fc>
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 80ff 	bne.w	8002a34 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f000 bf9b 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284c:	d106      	bne.n	800285c <HAL_RCC_OscConfig+0x124>
 800284e:	4b78      	ldr	r3, [pc, #480]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a77      	ldr	r2, [pc, #476]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e036      	b.n	80028ca <HAL_RCC_OscConfig+0x192>
 800285c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002860:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_OscConfig+0x14e>
 800286c:	4b70      	ldr	r3, [pc, #448]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6f      	ldr	r2, [pc, #444]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b6d      	ldr	r3, [pc, #436]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6c      	ldr	r2, [pc, #432]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e021      	b.n	80028ca <HAL_RCC_OscConfig+0x192>
 8002886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_OscConfig+0x17a>
 8002898:	4b65      	ldr	r3, [pc, #404]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a64      	ldr	r2, [pc, #400]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800289e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b62      	ldr	r3, [pc, #392]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a61      	ldr	r2, [pc, #388]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e00b      	b.n	80028ca <HAL_RCC_OscConfig+0x192>
 80028b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b5c      	ldr	r3, [pc, #368]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d054      	beq.n	8002984 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe faa5 	bl	8000e28 <HAL_GetTick>
 80028de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe faa0 	bl	8000e28 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b64      	cmp	r3, #100	@ 0x64
 80028f2:	d902      	bls.n	80028fa <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f000 bf3c 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
 80028fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028fe:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800290e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b3f      	cmp	r3, #63	@ 0x3f
 800291a:	d802      	bhi.n	8002922 <HAL_RCC_OscConfig+0x1ea>
 800291c:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x216>
 8002922:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002926:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002936:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800293a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800293e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800294a:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002952:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002956:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800295a:	fa92 f2a2 	rbit	r2, r2
 800295e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002962:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f042 0220 	orr.w	r2, r2, #32
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f002 021f 	and.w	r2, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0b0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x1ac>
 8002982:	e058      	b.n	8002a36 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe fa50 	bl	8000e28 <HAL_GetTick>
 8002988:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298e:	f7fe fa4b 	bl	8000e28 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	d902      	bls.n	80029a4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	f000 bee7 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
 80029a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80029b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80029c4:	d802      	bhi.n	80029cc <HAL_RCC_OscConfig+0x294>
 80029c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0x2c0>
 80029cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80029e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029e4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80029e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029fc:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002a00:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002a0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a10:	fab2 f282 	clz	r2, r2
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f002 021f 	and.w	r2, r2, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1b0      	bne.n	800298e <HAL_RCC_OscConfig+0x256>
 8002a2c:	e003      	b.n	8002a36 <HAL_RCC_OscConfig+0x2fe>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 816d 	beq.w	8002d26 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a4c:	4bcd      	ldr	r3, [pc, #820]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a58:	4bca      	ldr	r3, [pc, #808]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d16e      	bne.n	8002b42 <HAL_RCC_OscConfig+0x40a>
 8002a64:	4bc7      	ldr	r3, [pc, #796]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a70:	d167      	bne.n	8002b42 <HAL_RCC_OscConfig+0x40a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002a84:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a90:	d802      	bhi.n	8002a98 <HAL_RCC_OscConfig+0x360>
 8002a92:	4bbc      	ldr	r3, [pc, #752]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	e013      	b.n	8002ac0 <HAL_RCC_OscConfig+0x388>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ab0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002abc:	4bb1      	ldr	r3, [pc, #708]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002ac6:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002aca:	fa92 f2a2 	rbit	r2, r2
 8002ace:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002ad2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCC_OscConfig+0x3d0>
 8002af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f000 be35 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b9e      	ldr	r3, [pc, #632]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	21f8      	movs	r1, #248	@ 0xf8
 8002b1e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002b26:	fa91 f1a1 	rbit	r1, r1
 8002b2a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002b2e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002b32:	fab1 f181 	clz	r1, r1
 8002b36:	b2c9      	uxtb	r1, r1
 8002b38:	408b      	lsls	r3, r1
 8002b3a:	4992      	ldr	r1, [pc, #584]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b40:	e0f1      	b.n	8002d26 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8083 	beq.w	8002c5a <HAL_RCC_OscConfig+0x522>
 8002b54:	2301      	movs	r3, #1
 8002b56:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002b66:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f952 	bl	8000e28 <HAL_GetTick>
 8002b84:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fe f94d 	bl	8000e28 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d902      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f000 bde9 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002bb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bbe:	d802      	bhi.n	8002bc6 <HAL_RCC_OscConfig+0x48e>
 8002bc0:	4b70      	ldr	r3, [pc, #448]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e013      	b.n	8002bee <HAL_RCC_OscConfig+0x4b6>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002bde:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002bea:	4b66      	ldr	r3, [pc, #408]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002bf4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002bf8:	fa92 f2a2 	rbit	r2, r2
 8002bfc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002c00:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f042 0220 	orr.w	r2, r2, #32
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f002 021f 	and.w	r2, r2, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0b4      	beq.n	8002b8a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b58      	ldr	r3, [pc, #352]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	21f8      	movs	r1, #248	@ 0xf8
 8002c36:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002c3e:	fa91 f1a1 	rbit	r1, r1
 8002c42:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002c46:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002c4a:	fab1 f181 	clz	r1, r1
 8002c4e:	b2c9      	uxtb	r1, r1
 8002c50:	408b      	lsls	r3, r1
 8002c52:	494c      	ldr	r1, [pc, #304]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e065      	b.n	8002d26 <HAL_RCC_OscConfig+0x5ee>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002c6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	461a      	mov	r2, r3
 8002c82:	2300      	movs	r3, #0
 8002c84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe f8cf 	bl	8000e28 <HAL_GetTick>
 8002c8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe f8ca 	bl	8000e28 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f000 bd66 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002cb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc4:	d802      	bhi.n	8002ccc <HAL_RCC_OscConfig+0x594>
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e013      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5bc>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ce4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002cf0:	4b24      	ldr	r3, [pc, #144]	@ (8002d84 <HAL_RCC_OscConfig+0x64c>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002cfa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002d06:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0220 	orr.w	r2, r2, #32
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1b4      	bne.n	8002c90 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8119 	beq.w	8002f6e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8082 	beq.w	8002e52 <HAL_RCC_OscConfig+0x71a>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002d60:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	461a      	mov	r2, r3
 8002d74:	2301      	movs	r3, #1
 8002d76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fe f856 	bl	8000e28 <HAL_GetTick>
 8002d7c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d80:	e00f      	b.n	8002da2 <HAL_RCC_OscConfig+0x66a>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe f84c 	bl	8000e28 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d902      	bls.n	8002da2 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f000 bce8 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
 8002da2:	2302      	movs	r3, #2
 8002da4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fa93 f2a3 	rbit	r2, r3
 8002dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002de6:	2202      	movs	r2, #2
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	4bb0      	ldr	r3, [pc, #704]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8002e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e0e:	2102      	movs	r1, #2
 8002e10:	6019      	str	r1, [r3, #0]
 8002e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	fa93 f1a3 	rbit	r1, r3
 8002e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e28:	6019      	str	r1, [r3, #0]
  return result;
 8002e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d09d      	beq.n	8002d8c <HAL_RCC_OscConfig+0x654>
 8002e50:	e08d      	b.n	8002f6e <HAL_RCC_OscConfig+0x836>
 8002e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e56:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e70:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e74:	601a      	str	r2, [r3, #0]
  return result;
 8002e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e7e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b8f      	ldr	r3, [pc, #572]	@ (80030c8 <HAL_RCC_OscConfig+0x990>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e94:	f7fd ffc8 	bl	8000e28 <HAL_GetTick>
 8002e98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fd ffc3 	bl	8000e28 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f000 bc5f 	b.w	8003772 <HAL_RCC_OscConfig+0x103a>
 8002eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002edc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f04:	2202      	movs	r2, #2
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	4b68      	ldr	r3, [pc, #416]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8002f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	6019      	str	r1, [r3, #0]
 8002f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f1a3 	rbit	r1, r3
 8002f3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f42:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f46:	6019      	str	r1, [r3, #0]
  return result;
 8002f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d197      	bne.n	8002e9e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 819c 	beq.w	80032bc <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b4b      	ldr	r3, [pc, #300]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]
 8002fa2:	4b48      	ldr	r3, [pc, #288]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fbc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b41      	ldr	r3, [pc, #260]	@ (80030cc <HAL_RCC_OscConfig+0x994>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11a      	bne.n	8003006 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80030cc <HAL_RCC_OscConfig+0x994>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3d      	ldr	r2, [pc, #244]	@ (80030cc <HAL_RCC_OscConfig+0x994>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fda:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fdc:	f7fd ff24 	bl	8000e28 <HAL_GetTick>
 8002fe0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e009      	b.n	8002ffa <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7fd ff1f 	bl	8000e28 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e3bb      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <HAL_RCC_OscConfig+0x994>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ef      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x8ec>
 8003016:	4b2b      	ldr	r3, [pc, #172]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4a2a      	ldr	r2, [pc, #168]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6213      	str	r3, [r2, #32]
 8003022:	e035      	b.n	8003090 <HAL_RCC_OscConfig+0x958>
 8003024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003028:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10c      	bne.n	800304e <HAL_RCC_OscConfig+0x916>
 8003034:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	4b20      	ldr	r3, [pc, #128]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a1f      	ldr	r2, [pc, #124]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003046:	f023 0304 	bic.w	r3, r3, #4
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	e020      	b.n	8003090 <HAL_RCC_OscConfig+0x958>
 800304e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003052:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x940>
 800305e:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a18      	ldr	r2, [pc, #96]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6213      	str	r3, [r2, #32]
 800306a:	4b16      	ldr	r3, [pc, #88]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x958>
 8003078:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a11      	ldr	r2, [pc, #68]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	4b0f      	ldr	r3, [pc, #60]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4a0e      	ldr	r2, [pc, #56]	@ (80030c4 <HAL_RCC_OscConfig+0x98c>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003094:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8085 	beq.w	80031ac <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fd fec1 	bl	8000e28 <HAL_GetTick>
 80030a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e011      	b.n	80030d0 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fd febc 	bl	8000e28 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d907      	bls.n	80030d0 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e356      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
 80030c4:	40021000 	.word	0x40021000
 80030c8:	10908120 	.word	0x10908120
 80030cc:	40007000 	.word	0x40007000
 80030d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030d8:	2202      	movs	r2, #2
 80030da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030fc:	2202      	movs	r2, #2
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003112:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003116:	601a      	str	r2, [r3, #0]
  return result;
 8003118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003120:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0xa00>
 8003132:	4b98      	ldr	r3, [pc, #608]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	e013      	b.n	8003160 <HAL_RCC_OscConfig+0xa28>
 8003138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800313c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003140:	2202      	movs	r2, #2
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003148:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003156:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	4b8d      	ldr	r3, [pc, #564]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003164:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003168:	2102      	movs	r1, #2
 800316a:	6011      	str	r1, [r2, #0]
 800316c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003170:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	fa92 f1a2 	rbit	r1, r2
 800317a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800317e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003182:	6011      	str	r1, [r2, #0]
  return result;
 8003184:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003188:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	fab2 f282 	clz	r2, r2
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f002 021f 	and.w	r2, r2, #31
 800319e:	2101      	movs	r1, #1
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d080      	beq.n	80030ac <HAL_RCC_OscConfig+0x974>
 80031aa:	e07d      	b.n	80032a8 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7fd fe3c 	bl	8000e28 <HAL_GetTick>
 80031b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fe37 	bl	8000e28 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e2d1      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
 80031ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80031d6:	2202      	movs	r2, #2
 80031d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031de:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031fa:	2202      	movs	r2, #2
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003202:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003210:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003214:	601a      	str	r2, [r3, #0]
  return result;
 8003216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800321e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <HAL_RCC_OscConfig+0xafe>
 8003230:	4b58      	ldr	r3, [pc, #352]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	e013      	b.n	800325e <HAL_RCC_OscConfig+0xb26>
 8003236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	4b4e      	ldr	r3, [pc, #312]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003262:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003266:	2102      	movs	r1, #2
 8003268:	6011      	str	r1, [r2, #0]
 800326a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800326e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	fa92 f1a2 	rbit	r1, r2
 8003278:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800327c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003280:	6011      	str	r1, [r2, #0]
  return result;
 8003282:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003286:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	fab2 f282 	clz	r2, r2
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f002 021f 	and.w	r2, r2, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d186      	bne.n	80031b6 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b38      	ldr	r3, [pc, #224]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4a37      	ldr	r2, [pc, #220]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8251 	beq.w	8003770 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ce:	4b31      	ldr	r3, [pc, #196]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	f000 820f 	beq.w	80036fa <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	f040 8165 	bne.w	80035b8 <HAL_RCC_OscConfig+0xe80>
 80032ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003300:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	fa93 f2a3 	rbit	r2, r3
 800330a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003312:	601a      	str	r2, [r3, #0]
  return result;
 8003314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003318:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800331c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003328:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	461a      	mov	r2, r3
 8003330:	2300      	movs	r3, #0
 8003332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fd fd78 	bl	8000e28 <HAL_GetTick>
 8003338:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333c:	e009      	b.n	8003352 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333e:	f7fd fd73 	bl	8000e28 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e20f      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
 8003352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003356:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800335a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800335e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003364:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	fa93 f2a3 	rbit	r2, r3
 800336e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003372:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003376:	601a      	str	r2, [r3, #0]
  return result;
 8003378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003380:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b3f      	cmp	r3, #63	@ 0x3f
 800338a:	d805      	bhi.n	8003398 <HAL_RCC_OscConfig+0xc60>
 800338c:	4b01      	ldr	r3, [pc, #4]	@ (8003394 <HAL_RCC_OscConfig+0xc5c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e02a      	b.n	80033e8 <HAL_RCC_OscConfig+0xcb0>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80033a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fa93 f2a3 	rbit	r2, r3
 80033b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033de:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	4bca      	ldr	r3, [pc, #808]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033ec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fa92 f1a2 	rbit	r1, r2
 8003404:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003408:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800340c:	6011      	str	r1, [r2, #0]
  return result;
 800340e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003412:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	fab2 f282 	clz	r2, r2
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f042 0220 	orr.w	r2, r2, #32
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	f002 021f 	and.w	r2, r2, #31
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f202 	lsl.w	r2, r1, r2
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d184      	bne.n	800333e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003434:	4bb6      	ldr	r3, [pc, #728]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	f023 020f 	bic.w	r2, r3, #15
 800343c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003440:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	49b1      	ldr	r1, [pc, #708]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 800344a:	4313      	orrs	r3, r2
 800344c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800344e:	4bb0      	ldr	r3, [pc, #704]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6a19      	ldr	r1, [r3, #32]
 8003462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003466:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	430b      	orrs	r3, r1
 8003470:	49a7      	ldr	r1, [pc, #668]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
 8003476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800347e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003488:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	fa93 f2a3 	rbit	r2, r3
 8003492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003496:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800349a:	601a      	str	r2, [r3, #0]
  return result;
 800349c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034a4:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fcb4 	bl	8000e28 <HAL_GetTick>
 80034c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c4:	e009      	b.n	80034da <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd fcaf 	bl	8000e28 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e14b      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
 80034da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034de:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	fa93 f2a3 	rbit	r2, r3
 80034f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034fe:	601a      	str	r2, [r3, #0]
  return result;
 8003500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003504:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003508:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b3f      	cmp	r3, #63	@ 0x3f
 8003512:	d802      	bhi.n	800351a <HAL_RCC_OscConfig+0xde2>
 8003514:	4b7e      	ldr	r3, [pc, #504]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	e027      	b.n	800356a <HAL_RCC_OscConfig+0xe32>
 800351a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003522:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	fa93 f2a3 	rbit	r2, r3
 8003536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003544:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003548:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003552:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003560:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	4b6a      	ldr	r3, [pc, #424]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800356e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003572:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003576:	6011      	str	r1, [r2, #0]
 8003578:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800357c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	fa92 f1a2 	rbit	r1, r2
 8003586:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800358a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800358e:	6011      	str	r1, [r2, #0]
  return result;
 8003590:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003594:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	fab2 f282 	clz	r2, r2
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f042 0220 	orr.w	r2, r2, #32
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	f002 021f 	and.w	r2, r2, #31
 80035aa:	2101      	movs	r1, #1
 80035ac:	fa01 f202 	lsl.w	r2, r1, r2
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d087      	beq.n	80034c6 <HAL_RCC_OscConfig+0xd8e>
 80035b6:	e0db      	b.n	8003770 <HAL_RCC_OscConfig+0x1038>
 80035b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035dc:	601a      	str	r2, [r3, #0]
  return result;
 80035de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035e6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	461a      	mov	r2, r3
 80035fa:	2300      	movs	r3, #0
 80035fc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fd fc13 	bl	8000e28 <HAL_GetTick>
 8003602:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003606:	e009      	b.n	800361c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fc0e 	bl	8000e28 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e0aa      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
 800361c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003620:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003624:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800362e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	fa93 f2a3 	rbit	r2, r3
 8003638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800363c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003640:	601a      	str	r2, [r3, #0]
  return result;
 8003642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003646:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800364a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b3f      	cmp	r3, #63	@ 0x3f
 8003654:	d802      	bhi.n	800365c <HAL_RCC_OscConfig+0xf24>
 8003656:	4b2e      	ldr	r3, [pc, #184]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	e027      	b.n	80036ac <HAL_RCC_OscConfig+0xf74>
 800365c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003660:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003664:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	fa93 f2a3 	rbit	r2, r3
 8003678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800367c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003686:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800368a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003694:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_RCC_OscConfig+0xfd8>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036be:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	fa92 f1a2 	rbit	r1, r2
 80036c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036cc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80036d0:	6011      	str	r1, [r2, #0]
  return result;
 80036d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036d6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f042 0220 	orr.w	r2, r2, #32
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f002 021f 	and.w	r2, r2, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d187      	bne.n	8003608 <HAL_RCC_OscConfig+0xed0>
 80036f8:	e03a      	b.n	8003770 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d104      	bne.n	8003714 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e031      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003714:	4b19      	ldr	r3, [pc, #100]	@ (800377c <HAL_RCC_OscConfig+0x1044>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <HAL_RCC_OscConfig+0x1044>)
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003724:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003728:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800372c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003730:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	429a      	cmp	r2, r3
 800373a:	d117      	bne.n	800376c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800373c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003740:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003748:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003750:	429a      	cmp	r2, r3
 8003752:	d10b      	bne.n	800376c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003760:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b09e      	sub	sp, #120	@ 0x78
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e154      	b.n	8003a42 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003798:	4b89      	ldr	r3, [pc, #548]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d910      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b86      	ldr	r3, [pc, #536]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 0207 	bic.w	r2, r3, #7
 80037ae:	4984      	ldr	r1, [pc, #528]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b82      	ldr	r3, [pc, #520]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e13c      	b.n	8003a42 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b7b      	ldr	r3, [pc, #492]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4978      	ldr	r1, [pc, #480]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80cd 	beq.w	800398e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d137      	bne.n	800386c <HAL_RCC_ClockConfig+0xec>
 80037fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003800:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800380a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b3f      	cmp	r3, #63	@ 0x3f
 8003814:	d802      	bhi.n	800381c <HAL_RCC_ClockConfig+0x9c>
 8003816:	4b6b      	ldr	r3, [pc, #428]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e00f      	b.n	800383c <HAL_RCC_ClockConfig+0xbc>
 800381c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003820:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	667b      	str	r3, [r7, #100]	@ 0x64
 800382a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800382e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003830:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003838:	4b62      	ldr	r3, [pc, #392]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003840:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003842:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003844:	fa92 f2a2 	rbit	r2, r2
 8003848:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800384a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d171      	bne.n	800394c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0ea      	b.n	8003a42 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d137      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x164>
 8003874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003878:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	fab3 f383 	clz	r3, r3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b3f      	cmp	r3, #63	@ 0x3f
 800388c:	d802      	bhi.n	8003894 <HAL_RCC_ClockConfig+0x114>
 800388e:	4b4d      	ldr	r3, [pc, #308]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e00f      	b.n	80038b4 <HAL_RCC_ClockConfig+0x134>
 8003894:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80038a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038b0:	4b44      	ldr	r3, [pc, #272]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038b8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80038ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038bc:	fa92 f2a2 	rbit	r2, r2
 80038c0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80038c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038c4:	fab2 f282 	clz	r2, r2
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f002 021f 	and.w	r2, r2, #31
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d135      	bne.n	800394c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0ae      	b.n	8003a42 <HAL_RCC_ClockConfig+0x2c2>
 80038e4:	2302      	movs	r3, #2
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80038fa:	d802      	bhi.n	8003902 <HAL_RCC_ClockConfig+0x182>
 80038fc:	4b31      	ldr	r3, [pc, #196]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	e00d      	b.n	800391e <HAL_RCC_ClockConfig+0x19e>
 8003902:	2302      	movs	r3, #2
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
 800390e:	2302      	movs	r3, #2
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	4b2a      	ldr	r3, [pc, #168]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	2202      	movs	r2, #2
 8003920:	61ba      	str	r2, [r7, #24]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	617a      	str	r2, [r7, #20]
  return result;
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	fab2 f282 	clz	r2, r2
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f042 0220 	orr.w	r2, r2, #32
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f002 021f 	and.w	r2, r2, #31
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e07a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 0203 	bic.w	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	491a      	ldr	r1, [pc, #104]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800395e:	f7fd fa63 	bl	8000e28 <HAL_GetTick>
 8003962:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003964:	e00a      	b.n	800397c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003966:	f7fd fa5f 	bl	8000e28 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e062      	b.n	8003a42 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397c:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <HAL_RCC_ClockConfig+0x244>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 020c 	and.w	r2, r3, #12
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	429a      	cmp	r2, r3
 800398c:	d1eb      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d215      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399c:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 0207 	bic.w	r2, r3, #7
 80039a4:	4906      	ldr	r1, [pc, #24]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ac:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <HAL_RCC_ClockConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d006      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e041      	b.n	8003a42 <HAL_RCC_ClockConfig+0x2c2>
 80039be:	bf00      	nop
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a4c <HAL_RCC_ClockConfig+0x2cc>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	491a      	ldr	r1, [pc, #104]	@ (8003a4c <HAL_RCC_ClockConfig+0x2cc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f2:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <HAL_RCC_ClockConfig+0x2cc>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4912      	ldr	r1, [pc, #72]	@ (8003a4c <HAL_RCC_ClockConfig+0x2cc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a06:	f000 f829 	bl	8003a5c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <HAL_RCC_ClockConfig+0x2cc>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a14:	22f0      	movs	r2, #240	@ 0xf0
 8003a16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	fa92 f2a2 	rbit	r2, r2
 8003a1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	fab2 f282 	clz	r2, r2
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	40d3      	lsrs	r3, r2
 8003a2a:	4a09      	ldr	r2, [pc, #36]	@ (8003a50 <HAL_RCC_ClockConfig+0x2d0>)
 8003a2c:	5cd3      	ldrb	r3, [r2, r3]
 8003a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a32:	4a08      	ldr	r2, [pc, #32]	@ (8003a54 <HAL_RCC_ClockConfig+0x2d4>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a36:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <HAL_RCC_ClockConfig+0x2d8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd f9b0 	bl	8000da0 <HAL_InitTick>
  
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3778      	adds	r7, #120	@ 0x78
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08004900 	.word	0x08004900
 8003a54:	20000004 	.word	0x20000004
 8003a58:	20000008 	.word	0x20000008

08003a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a76:	4b1f      	ldr	r3, [pc, #124]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d002      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x30>
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x36>
 8003a8a:	e029      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a8e:	613b      	str	r3, [r7, #16]
      break;
 8003a90:	e029      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a9c:	5cd3      	ldrb	r3, [r2, r3]
 8003a9e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003aa0:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e007      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aca:	4a0b      	ldr	r2, [pc, #44]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	613b      	str	r3, [r7, #16]
      break;
 8003ade:	e002      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ae2:	613b      	str	r3, [r7, #16]
      break;
 8003ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae6:	693b      	ldr	r3, [r7, #16]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40021000 	.word	0x40021000
 8003af8:	007a1200 	.word	0x007a1200
 8003afc:	08004910 	.word	0x08004910
 8003b00:	08004920 	.word	0x08004920

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b092      	sub	sp, #72	@ 0x48
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80d2 	beq.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b28:	4b4d      	ldr	r3, [pc, #308]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10e      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b4a      	ldr	r3, [pc, #296]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	4a49      	ldr	r2, [pc, #292]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	61d3      	str	r3, [r2, #28]
 8003b40:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b44      	ldr	r3, [pc, #272]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5e:	4b41      	ldr	r3, [pc, #260]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a40      	ldr	r2, [pc, #256]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd f95d 	bl	8000e28 <HAL_GetTick>
 8003b6e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fd f959 	bl	8000e28 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b64      	cmp	r3, #100	@ 0x64
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1d4      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b37      	ldr	r3, [pc, #220]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b90:	4b33      	ldr	r3, [pc, #204]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8082 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003baa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d07a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	2301      	movs	r3, #1
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2300      	movs	r3, #0
 8003c00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c02:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d049      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fd f909 	bl	8000e28 <HAL_GetTick>
 8003c16:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd f905 	bl	8000e28 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e17e      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003c30:	2302      	movs	r3, #2
 8003c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	61fb      	str	r3, [r7, #28]
  return result;
 8003c48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003c5a:	4b01      	ldr	r3, [pc, #4]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	e00d      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
 8003c68:	10908100 	.word	0x10908100
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9a      	ldr	r3, [pc, #616]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	613a      	str	r2, [r7, #16]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	fa92 f2a2 	rbit	r2, r2
 8003c86:	60fa      	str	r2, [r7, #12]
  return result;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	fab2 f282 	clz	r2, r2
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f002 021f 	and.w	r2, r2, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0b9      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	498c      	ldr	r1, [pc, #560]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4b88      	ldr	r3, [pc, #544]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4a87      	ldr	r2, [pc, #540]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd8:	4b82      	ldr	r3, [pc, #520]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	f023 0203 	bic.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	497f      	ldr	r1, [pc, #508]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4978      	ldr	r1, [pc, #480]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d14:	4b73      	ldr	r3, [pc, #460]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	4970      	ldr	r1, [pc, #448]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d32:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f023 0210 	bic.w	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4969      	ldr	r1, [pc, #420]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d50:	4b64      	ldr	r3, [pc, #400]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	4961      	ldr	r1, [pc, #388]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	f023 0220 	bic.w	r2, r3, #32
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	495a      	ldr	r1, [pc, #360]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d8c:	4b55      	ldr	r3, [pc, #340]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	4952      	ldr	r1, [pc, #328]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003daa:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	494b      	ldr	r1, [pc, #300]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc8:	4b46      	ldr	r3, [pc, #280]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4943      	ldr	r1, [pc, #268]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003de6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	493c      	ldr	r1, [pc, #240]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e04:	4b37      	ldr	r3, [pc, #220]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	4934      	ldr	r1, [pc, #208]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e22:	4b30      	ldr	r3, [pc, #192]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	492d      	ldr	r1, [pc, #180]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e40:	4b28      	ldr	r3, [pc, #160]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	4925      	ldr	r1, [pc, #148]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e5e:	4b21      	ldr	r3, [pc, #132]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	491e      	ldr	r1, [pc, #120]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	4916      	ldr	r1, [pc, #88]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003e9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea6:	490f      	ldr	r1, [pc, #60]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	4907      	ldr	r1, [pc, #28]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ed6:	4b03      	ldr	r3, [pc, #12]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	e002      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eea:	4913      	ldr	r1, [pc, #76]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003efc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f08:	490b      	ldr	r1, [pc, #44]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003f1a:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f26:	4904      	ldr	r1, [pc, #16]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3748      	adds	r7, #72	@ 0x48
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000

08003f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e049      	b.n	8003fe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fe46 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f000 fa9a 	bl	80044b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d001      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e04f      	b.n	80040a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a23      	ldr	r2, [pc, #140]	@ (80040b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_TIM_Base_Start_IT+0x76>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402e:	d018      	beq.n	8004062 <HAL_TIM_Base_Start_IT+0x76>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1f      	ldr	r2, [pc, #124]	@ (80040b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_TIM_Base_Start_IT+0x76>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1e      	ldr	r2, [pc, #120]	@ (80040b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_TIM_Base_Start_IT+0x76>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <HAL_TIM_Base_Start_IT+0xd0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_TIM_Base_Start_IT+0x76>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1b      	ldr	r2, [pc, #108]	@ (80040c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_TIM_Base_Start_IT+0x76>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d115      	bne.n	800408e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	4b17      	ldr	r3, [pc, #92]	@ (80040c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d015      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0xb4>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800407a:	d011      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408c:	e008      	b.n	80040a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e000      	b.n	80040a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40013400 	.word	0x40013400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40015000 	.word	0x40015000
 80040c8:	00010007 	.word	0x00010007

080040cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d020      	beq.n	8004130 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0202 	mvn.w	r2, #2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9ad 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f99f 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f9b0 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d020      	beq.n	800417c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01b      	beq.n	800417c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0204 	mvn.w	r2, #4
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f987 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f979 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f98a 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d020      	beq.n	80041c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0208 	mvn.w	r2, #8
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2204      	movs	r2, #4
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f961 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f953 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f964 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d020      	beq.n	8004214 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01b      	beq.n	8004214 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0210 	mvn.w	r2, #16
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2208      	movs	r2, #8
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f93b 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f92d 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f93e 	bl	800448a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0201 	mvn.w	r2, #1
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fb ffce 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fb06 	bl	8004868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fafe 	bl	800487c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8fd 	bl	800449e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0220 	mvn.w	r2, #32
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fac6 	bl	8004854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b6      	b.n	800445a <HAL_TIM_ConfigClockSource+0x18a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800430e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004328:	d03e      	beq.n	80043a8 <HAL_TIM_ConfigClockSource+0xd8>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432e:	f200 8087 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	f000 8086 	beq.w	8004446 <HAL_TIM_ConfigClockSource+0x176>
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433e:	d87f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004340:	2b70      	cmp	r3, #112	@ 0x70
 8004342:	d01a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xaa>
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d87b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d050      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x11e>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d877      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d03c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0xfe>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d873      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d058      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x13e>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d86f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d064      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d86b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d060      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d867      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004374:	2b10      	cmp	r3, #16
 8004376:	d05a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004378:	e062      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	f000 f9b7 	bl	80046fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800439c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	609a      	str	r2, [r3, #8]
      break;
 80043a6:	e04f      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	f000 f9a0 	bl	80046fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ca:	609a      	str	r2, [r3, #8]
      break;
 80043cc:	e03c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f914 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2150      	movs	r1, #80	@ 0x50
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f96d 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e02c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f933 	bl	8004666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2160      	movs	r1, #96	@ 0x60
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f95d 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 800440c:	e01c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f8f4 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	@ 0x40
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f94d 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 800442c:	e00c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 f944 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 800443e:	e003      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e000      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a48      	ldr	r2, [pc, #288]	@ (80045e8 <TIM_Base_SetConfig+0x134>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d2:	d00f      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a45      	ldr	r2, [pc, #276]	@ (80045ec <TIM_Base_SetConfig+0x138>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00b      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a44      	ldr	r2, [pc, #272]	@ (80045f0 <TIM_Base_SetConfig+0x13c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a43      	ldr	r2, [pc, #268]	@ (80045f4 <TIM_Base_SetConfig+0x140>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a42      	ldr	r2, [pc, #264]	@ (80045f8 <TIM_Base_SetConfig+0x144>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d108      	bne.n	8004506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a37      	ldr	r2, [pc, #220]	@ (80045e8 <TIM_Base_SetConfig+0x134>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01f      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004514:	d01b      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a34      	ldr	r2, [pc, #208]	@ (80045ec <TIM_Base_SetConfig+0x138>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d017      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a33      	ldr	r2, [pc, #204]	@ (80045f0 <TIM_Base_SetConfig+0x13c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a32      	ldr	r2, [pc, #200]	@ (80045f4 <TIM_Base_SetConfig+0x140>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00f      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a32      	ldr	r2, [pc, #200]	@ (80045fc <TIM_Base_SetConfig+0x148>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00b      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a31      	ldr	r2, [pc, #196]	@ (8004600 <TIM_Base_SetConfig+0x14c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a30      	ldr	r2, [pc, #192]	@ (8004604 <TIM_Base_SetConfig+0x150>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2b      	ldr	r2, [pc, #172]	@ (80045f8 <TIM_Base_SetConfig+0x144>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d108      	bne.n	8004560 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a18      	ldr	r2, [pc, #96]	@ (80045e8 <TIM_Base_SetConfig+0x134>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <TIM_Base_SetConfig+0x100>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <TIM_Base_SetConfig+0x140>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x100>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a19      	ldr	r2, [pc, #100]	@ (80045fc <TIM_Base_SetConfig+0x148>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x100>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <TIM_Base_SetConfig+0x14c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x100>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <TIM_Base_SetConfig+0x150>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x100>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a12      	ldr	r2, [pc, #72]	@ (80045f8 <TIM_Base_SetConfig+0x144>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]
  }
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40013400 	.word	0x40013400
 80045f8:	40015000 	.word	0x40015000
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800

08004608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 030a 	bic.w	r3, r3, #10
 8004644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004666:	b480      	push	{r7}
 8004668:	b087      	sub	sp, #28
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f023 0210 	bic.w	r2, r3, #16
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f043 0307 	orr.w	r3, r3, #7
 80046e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	431a      	orrs	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e06d      	b.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a30      	ldr	r2, [pc, #192]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a2f      	ldr	r2, [pc, #188]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2d      	ldr	r2, [pc, #180]	@ (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d108      	bne.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004798:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d01d      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d0:	d018      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1a      	ldr	r2, [pc, #104]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00e      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a15      	ldr	r2, [pc, #84]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a16      	ldr	r2, [pc, #88]	@ (8004850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a11      	ldr	r2, [pc, #68]	@ (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10c      	bne.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800480a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4313      	orrs	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40015000 	.word	0x40015000
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40014000 	.word	0x40014000

08004854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <memset>:
 8004890:	4402      	add	r2, r0
 8004892:	4603      	mov	r3, r0
 8004894:	4293      	cmp	r3, r2
 8004896:	d100      	bne.n	800489a <memset+0xa>
 8004898:	4770      	bx	lr
 800489a:	f803 1b01 	strb.w	r1, [r3], #1
 800489e:	e7f9      	b.n	8004894 <memset+0x4>

080048a0 <__libc_init_array>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4d0d      	ldr	r5, [pc, #52]	@ (80048d8 <__libc_init_array+0x38>)
 80048a4:	4c0d      	ldr	r4, [pc, #52]	@ (80048dc <__libc_init_array+0x3c>)
 80048a6:	1b64      	subs	r4, r4, r5
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	2600      	movs	r6, #0
 80048ac:	42a6      	cmp	r6, r4
 80048ae:	d109      	bne.n	80048c4 <__libc_init_array+0x24>
 80048b0:	4d0b      	ldr	r5, [pc, #44]	@ (80048e0 <__libc_init_array+0x40>)
 80048b2:	4c0c      	ldr	r4, [pc, #48]	@ (80048e4 <__libc_init_array+0x44>)
 80048b4:	f000 f818 	bl	80048e8 <_init>
 80048b8:	1b64      	subs	r4, r4, r5
 80048ba:	10a4      	asrs	r4, r4, #2
 80048bc:	2600      	movs	r6, #0
 80048be:	42a6      	cmp	r6, r4
 80048c0:	d105      	bne.n	80048ce <__libc_init_array+0x2e>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c8:	4798      	blx	r3
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7ee      	b.n	80048ac <__libc_init_array+0xc>
 80048ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d2:	4798      	blx	r3
 80048d4:	3601      	adds	r6, #1
 80048d6:	e7f2      	b.n	80048be <__libc_init_array+0x1e>
 80048d8:	08004930 	.word	0x08004930
 80048dc:	08004930 	.word	0x08004930
 80048e0:	08004930 	.word	0x08004930
 80048e4:	08004934 	.word	0x08004934

080048e8 <_init>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	bf00      	nop
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr

080048f4 <_fini>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr
